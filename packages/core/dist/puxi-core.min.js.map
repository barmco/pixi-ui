{"version":3,"file":"puxi-core.min.js","sources":["../src/event/DragDropController.js","../src/layout-options/Insets.ts","../src/IMeasurable.ts","../src/event/EventManager.ts","../src/event/ClickManager.ts","../src/event/DragManager.ts","../src/event/EventBroker.ts","../src/event/ScrollManager.ts","../src/Widget.ts","../src/layout-options/Align.ts","../src/layout-options/LayoutOptions.ts","../src/layout-options/FastLayoutOptions.ts","../src/layout-options/BorderLayoutOptions.ts","../src/layout-manager/FastLayout.ts","../src/WidgetGroup.ts","../src/InteractiveGroup.ts","../src/FocusableWidget.ts","../src/TextWidget.ts","../src/Button.ts","../src/Ease/EaseBase.js","../src/Ease/ExponentialEase.js","../src/Ease/Ease.js","../src/Helpers.ts","../src/Sprite.ts","../src/layout-manager/BorderLayout.ts","../src/layout-manager/LinearLayout.ts","../src/Slider.ts","../src/Tween.ts","../src/ScrollBar.ts","../src/ScrollWidget.ts","../src/ctl/Controller.ts","../src/Stage.ts","../src/ctl/CheckBoxGroupController.ts","../src/ctl/FocusController.ts","../src/Style.ts","../src/StyleSheet.ts","../src/TextInput.ts","../src/Ticker.ts","../src/layout-manager/AnchorLayout.ts","../src/layout-options/AnchorLayoutOptions.ts","../src/CheckBox.ts","../src/ImageButton.ts","../src/SliceSprite.ts","../src/SortableList.ts","../src/TilingSprite.ts"],"sourcesContent":["const _items = [];\nconst DragDropController = {\n    add(item, event)\n    {\n        item._dragDropEventId = event.data.identifier;\n        if (_items.indexOf(item) === -1)\n        {\n            _items.push(item);\n\n            return true;\n        }\n\n        return false;\n    },\n    getItem(object)\n    {\n        let item = null; let\n            index;\n\n        for (let i = 0; i < _items.length; i++)\n        {\n            if (_items[i] === object)\n            {\n                item = _items[i];\n                index = i;\n                break;\n            }\n        }\n\n        if (item !== null)\n        {\n            _items.splice(index, 1);\n\n            return item;\n        }\n\n        return false;\n    },\n    getEventItem(event, group)\n    {\n        let item = null; let index; const\n            id = event.data.identifier;\n\n        for (let i = 0; i < _items.length; i++)\n        {\n            if (_items[i]._dragDropEventId === id)\n            {\n                if (group !== _items[i].dragGroup)\n                {\n                    return false;\n                }\n                item = _items[i];\n                index = i;\n                break;\n            }\n        }\n\n        if (item !== null)\n        {\n            _items.splice(index, 1);\n\n            return item;\n        }\n\n        return false;\n    },\n};\n\nexport { DragDropController };\nexport default DragDropController;\n","/**\n * @memberof PUXI\n * @class\n */\nexport class Insets\n{\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n\n    dirtyId: number;\n\n    constructor()\n    {\n        this.reset();\n        this.dirtyId = 0;\n    }\n\n    reset(): void\n    {\n        this.left = -1;\n        this.top = -1;\n        this.right = -1;\n        this.bottom = -1;\n    }\n}\n","/**\n * These are the modes in which an entity can measures its dimension. They are\n * relevant when a layout needs to know the optimal sizes of its children.\n *\n * @memberof PUXI\n * @enum\n * @property {number} UNBOUNDED - no upper limit on bounds. This should calculate the optimal dimensions for the entity.\n * @property {number} EXACTLY - the entity should set its dimension to the one passed to it.\n * @property {number} AT_MOST - the entity should find an optimal dimension below the one passed to it.\n */\nexport enum MeasureMode\n{\n    UNBOUNDED = 0,\n    EXACTLY = 1,\n    AT_MOST = 2\n}\n\nexport interface IMeasurable\n{\n    onMeasure(maxWidth: number, maxHeight: number, widthMode: MeasureMode, heightMode: MeasureMode);\n    getMeasuredWidth(): number;\n    getMeasuredHeight(): number;\n}\n\n/**\n * Any renderable entity that can be used in a widget hierarchy must be\n * measurable.\n *\n * @memberof PUXI\n * @interface IMeasurable\n */\n\n/**\n * Measures its width & height based on the passed constraints.\n *\n * @memberof PUXI.IMeasurable#\n * @method onMeasure\n * @param {number} maxWidth\n * @param {number} maxHeight\n * @param {PUXI.MeasureMode} widthMode\n * @param {PUXI.MeasureMode} heightMode\n */\n\n/**\n * @memberof PUXI.IMeasurable#\n * @method getMeasuredWidth\n * @returns {number} - the measured width of the entity after a `onMeasure` call\n */\n\n/**\n * @memberof PUXI.IMeasurable#\n * @method getMeasuredHeight\n * @returns {number} - the measured height of the entity after a `onMeasure` call\n */\n","import { Widget } from '../Widget';\n\n/**\n * An event manager handles the states related to certain events and can augment\n * widget interaction. For example, the click manager will hide clicks when\n * the object is dragging.\n *\n * Event managers are lifecycle objects - they can start/stop. Their constructor\n * will always accept one argument - the widget. Other settings can be applied before\n * `startEvent`.\n *\n * Ideally, you should access event managers _after_ your widget has initialized. This is\n * because it may depend on the widget's stage being assigned.\n *\n * @memberof PUXI\n * @class\n * @abstract\n */\nexport abstract class EventManager\n{\n    protected target: Widget;\n    protected isEnabled: boolean;\n\n    /**\n     * @param {Widget} target\n     */\n    constructor(target: Widget)\n    {\n        this.target = target;\n        this.isEnabled = false;// use to track start/stopEvent\n    }\n\n    /**\n     * @returns {Widget}\n     */\n    getTarget(): Widget\n    {\n        return this.target;\n    }\n\n    /**\n     * Registers the interaction event listeners that will emit corresponding events\n     * on the target widget.\n     */\n    abstract startEvent(): any;\n\n    /**\n     * Unregisters any event listeners and releases any resources held. This should\n     * revert all changes made by `startEvent`.\n     */\n    abstract stopEvent(): any;\n}\n","import * as PIXI from 'pixi.js';\nimport { Widget } from '../Widget';\nimport { EventManager } from './EventManager';\n\n/**\n * `ClickManager` handles hover and click events. It registers listeners\n * for `mousedown`, `mouseup`, `mousemove`, `mouseout`, `mouseover`, `touchstart`,\n * `touchend`, `touchendoutside`, `touchmove`, `rightup`, `rightdown`, `rightupoutside`\n * events.\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.EventManager\n */\nexport class ClickManager extends EventManager\n{\n    onHover: (event: PIXI.InteractionEvent, over: boolean) => void;\n    onPress: (event: PIXI.InteractionEvent, isPressed: boolean) => void;\n    onClick: (event: PIXI.InteractionMouseEvents) => void;\n    onMove: (event: PIXI.InteractionEvent) => void;\n\n    protected _rightMouseButton: boolean;\n    protected _includeHover: boolean;\n    protected _doubleClick: boolean;\n\n    private bound: boolean;\n    private id: number;\n    private ishover: boolean;\n    protected target: Widget;\n\n    private movementX: number;\n    private movementY: number;\n    mouse: PIXI.Point;\n    offset: PIXI.Point;\n\n    private evMouseDown: string;\n    private evMouseUp: string;\n    private evMouseUpOutside: string;\n\n    time: number;\n\n    /**\n     * @param {PUXI.Widget | PUXI.Button} target\n     * @param {boolean}[includeHover=false] - enable hover (`mouseover`, `mouseout`) listeners\n     * @param {boolean}[rightMouseButton=false] - use right mouse clicks\n     * @param {boolean}[doubleClick=false] - fire double clicks\n     */\n    constructor(target: Widget, includeHover?: boolean, rightMouseButton?, doubleClick?: boolean)\n    {\n        super(target);\n\n        this.bound = false;\n        this.id = 0;\n        this.ishover = false;\n        this.mouse = new PIXI.Point();\n        this.offset = new PIXI.Point();\n        this.movementX = 0;\n        this.movementY = 0;\n\n        this._includeHover = typeof includeHover === 'undefined' ? true : includeHover;\n        this.rightMouseButton = typeof rightMouseButton === 'undefined' ? false : rightMouseButton;\n        this._doubleClick = typeof doubleClick === 'undefined' ? false : doubleClick;\n\n        target.interactive = true;\n\n        this.time = 0;\n        this.startEvent();\n\n        this.onHover = (): void => null;\n        this.onPress = (): void => null;\n        this.onClick = (): void => null;\n        this.onMove = (): void => null;\n    }\n\n    /**\n     * Whether right mice are used for clicks rather than left mice.\n     * @member boolean\n     */\n    get rightMouseButton(): boolean\n    {\n        return this._rightMouseButton;\n    }\n    set rightMouseButton(val: boolean)\n    {\n        this._rightMouseButton = val;\n\n        this.evMouseDown = this._rightMouseButton ? 'rightdown' : 'mousedown';\n        this.evMouseUp = this._rightMouseButton ? 'rightup' : 'mouseup';\n        this.evMouseUpOutside = this._rightMouseButton ? 'rightupoutside' : 'mouseupoutside';\n    }\n\n    /**\n     * @param {boolean}[includeHover]\n     * @param {boolean}[rightMouseButton]\n     * @param {boolean}[doubleClick]\n     * @override\n     */\n    startEvent = (\n        includeHover = this._includeHover,\n        rightMouseButton = this._rightMouseButton,\n        doubleClick = this._doubleClick,\n    ): void =>\n    {\n        if (this.isEnabled)\n        {\n            return;\n        }\n\n        this._includeHover = includeHover;\n        this.rightMouseButton = rightMouseButton;\n        this._doubleClick = doubleClick;\n\n        const { target } = this;\n\n        target.insetContainer.on(this.evMouseDown, this.onMouseDownImpl);\n\n        if (!this._rightMouseButton)\n        {\n            target.insetContainer.on('touchstart', this.onMouseDownImpl);\n        }\n\n        if (this._includeHover)\n        {\n            target.insetContainer.on('mouseover', this.onMouseOverImpl);\n            target.insetContainer.on('mouseout', this.onMouseOutImpl);\n        }\n\n        this.isEnabled = true;\n    };\n\n    /**\n     * @override\n     */\n    stopEvent = (): void =>\n    {\n        if (!this.isEnabled)\n        {\n            return;\n        }\n\n        const { target } = this;\n\n        if (this.bound)\n        {\n            target.insetContainer.removeListener(this.evMouseUp, this.onMouseUpImpl);\n            target.insetContainer.removeListener(this.evMouseUpOutside, this.onMouseUpOutsideImpl);\n\n            if (!this._rightMouseButton)\n            {\n                target.insetContainer.removeListener('touchend', this.onMouseUpImpl);\n                target.insetContainer.removeListener('touchendoutside', this.onMouseUpOutsideImpl);\n            }\n\n            this.bound = false;\n        }\n\n        target.insetContainer.removeListener(this.evMouseDown, this.onMouseDownImpl);\n\n        if (!this._rightMouseButton)\n        {\n            target.insetContainer.removeListener('touchstart', this.onMouseDownImpl);\n        }\n\n        if (this._includeHover)\n        {\n            target.insetContainer.removeListener('mouseover', this.onMouseOverImpl);\n            target.insetContainer.removeListener('mouseout', this.onMouseOutImpl);\n            target.insetContainer.removeListener('mousemove', this.onMouseMoveImpl);\n            target.insetContainer.removeListener('touchmove', this.onMouseMoveImpl);\n        }\n\n        this.isEnabled = false;\n    };\n\n    protected onMouseDownImpl = (event: PIXI.interaction.InteractionEvent): void =>\n    {\n        const {\n            target: obj,\n            evMouseUp,\n            onMouseUpImpl: _onMouseUp,\n            evMouseUpOutside,\n            onMouseUpOutsideImpl: _onMouseUpOutside,\n            _rightMouseButton: right,\n        } = this;\n\n        this.mouse.copyFrom(event.data.global);\n        this.id = event.data.identifier;\n        this.onPress.call(this.target, event, true);\n\n        if (!this.bound)\n        {\n            obj.insetContainer.on(evMouseUp, _onMouseUp);\n            obj.insetContainer.on(evMouseUpOutside, _onMouseUpOutside);\n\n            if (!right)\n            {\n                obj.insetContainer.on('touchend', _onMouseUp);\n                obj.insetContainer.on('touchendoutside', _onMouseUpOutside);\n            }\n\n            this.bound = true;\n        }\n\n        if (this._doubleClick)\n        {\n            const now = performance.now();\n\n            if (now - this.time < 210)\n            {\n                this.onClick.call(obj, event);\n            }\n            else\n            {\n                this.time = now;\n            }\n        }\n\n        event.data.originalEvent.preventDefault();\n    };\n\n    protected onMouseUpCommonImpl = (event: PIXI.interaction.InteractionEvent): void =>\n    {\n        const {\n            target: obj,\n            evMouseUp,\n            onMouseUpImpl: _onMouseUp,\n            evMouseUpOutside,\n            onMouseUpOutsideImpl: _onMouseUpOutside,\n        } = this;\n\n        if (event.data.identifier !== this.id)\n        {\n            return;\n        }\n\n        this.offset.set(event.data.global.x - this.mouse.x, event.data.global.y - this.mouse.y);\n\n        if (this.bound)\n        {\n            obj.insetContainer.removeListener(evMouseUp, _onMouseUp);\n            obj.insetContainer.removeListener(evMouseUpOutside, _onMouseUpOutside);\n\n            if (!this._rightMouseButton)\n            {\n                obj.insetContainer.removeListener('touchend', _onMouseUp);\n                obj.insetContainer.removeListener('touchendoutside', _onMouseUpOutside);\n            }\n\n            this.bound = false;\n        }\n\n        this.onPress.call(obj, event, false);\n    };\n\n    protected onMouseUpImpl = (event): void =>\n    {\n        if (event.data.identifier !== this.id)\n        {\n            return;\n        }\n\n        this.onMouseUpCommonImpl(event);\n\n        // prevent clicks with scrolling/dragging objects\n        if (this.target.dragThreshold)\n        {\n            this.movementX = Math.abs(this.offset.x);\n            this.movementY = Math.abs(this.offset.y);\n\n            if (Math.max(this.movementX, this.movementY) > this.target.dragThreshold)\n            {\n                return;\n            }\n        }\n\n        if (!this._doubleClick)\n        {\n            this.onClick.call(this.target, event);\n        }\n    };\n\n    protected onMouseUpOutsideImpl = (event): void =>\n    {\n        if (event.data.identifier !== this.id)\n        {\n            return;\n        }\n\n        this.onMouseUpCommonImpl(event);\n    };\n\n    protected onMouseOverImpl = (event): void =>\n    {\n        if (!this.ishover)\n        {\n            this.ishover = true;\n            this.target.insetContainer.on('mousemove', this.onMouseMoveImpl);\n            this.target.insetContainer.on('touchmove', this.onMouseMoveImpl);\n\n            this.onHover.call(this.target, event, true);\n        }\n    };\n\n    protected onMouseOutImpl = (event): void =>\n    {\n        if (this.ishover)\n        {\n            this.ishover = false;\n            this.target.insetContainer.removeListener('mousemove', this.onMouseMoveImpl);\n            this.target.insetContainer.removeListener('touchmove', this.onMouseMoveImpl);\n\n            this.onHover.call(this.target, event, false);\n        }\n    };\n\n    protected onMouseMoveImpl = (event): void =>\n    {\n        this.onMove.call(this.target, event);\n    };\n}\n","import * as PIXI from 'pixi.js';\nimport { EventManager } from './EventManager';\nimport { Widget } from '../Widget';\n\n/**\n * `DragManager` handles drag & drop events. It registers listeners for `mousedown`,\n * `touchstart` on the target and `mousemove`, `touchmove`, `mouseup`, `mouseupoutside`,\n * `touchend`, `touchendoutside` on the stage.\n *\n * By default, `draggable` widgets will internally handle drag-n-drop and reassigning\n * the callbacks on their `DragManager` will break their behaviour. You can prevent\n * this by using `eventBroker.dnd` directly without setting `widget.draggable` to\n * `true` (or using `widget.makeDraggable()`).\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.EventManager\n */\nexport class DragManager extends EventManager\n{\n    protected isBound: boolean;\n    protected isDragging: boolean;\n    protected id: number;\n    protected dragStart: PIXI.Point;\n    protected dragOffset: PIXI.Point;\n    protected lastCursor: PIXI.Point;\n    protected movementX: number;\n    protected movementY: number;\n    protected cancel: boolean;\n\n    public onPress: (e: PIXI.interaction.InteractionEvent, isPressed: boolean) => void;\n    public onDragStart: (e: PIXI.interaction.InteractionEvent) => void;\n    public onDragMove: (e: PIXI.interaction.InteractionEvent, dragOffset: PIXI.Point) => void;\n    public onDragEnd: (e: PIXI.interaction.InteractionEvent) => void;\n\n    constructor(target: Widget)\n    {\n        super(target);\n\n        this.isBound = false;\n        this.isDragging = false;\n        this.id = 0;\n        this.dragStart = new PIXI.Point();\n        this.dragOffset = new PIXI.Point();\n        this.lastCursor = new PIXI.Point();\n        this.movementX = 0;\n        this.movementY = 0;\n        this.cancel = false;\n\n        this.target.interactive = true;\n\n        this.onPress = (): void => null;\n        this.onDragStart = (): void => null;\n        this.onDragMove = (): void => null;\n        this.onDragEnd = (): void => null;\n\n        this.startEvent();\n    }\n\n    startEvent(): void\n    {\n        if (this.isEnabled)\n        {\n            return;\n        }\n\n        const { target } = this;\n\n        target.insetContainer.on('mousedown', this.onDragStartImpl);\n        target.insetContainer.on('touchstart', this.onDragStartImpl);\n\n        this.isEnabled = true;\n    }\n\n    stopEvent(): void\n    {\n        if (!this.isEnabled)\n        {\n            return;\n        }\n\n        const { target } = this;\n\n        if (this.isBound)\n        {\n            target.stage.removeListener('mousemove', this.onDragMoveImpl);\n            target.stage.removeListener('touchmove', this.onDragMoveImpl);\n            target.stage.removeListener('mouseup', this.onDragEndImpl);\n            target.stage.removeListener('mouseupoutside', this.onDragEndImpl);\n            target.stage.removeListener('touchend', this.onDragEndImpl);\n            target.stage.removeListener('touchendoutside', this.onDragEndImpl);\n\n            this.isBound = false;\n        }\n\n        target.insetContainer.removeListener('mousedown', this.onDragStartImpl);\n        target.insetContainer.removeListener('touchstart', this.onDragStartImpl);\n\n        this.isEnabled = false;\n    }\n\n    protected onDragStartImpl = (e: PIXI.interaction.InteractionEvent): void =>\n    {\n        const { target } = this;\n\n        this.id = e.data.identifier;\n        this.onPress(e, true);\n\n        if (!this.isBound)\n        {\n            this.dragStart.copyFrom(e.data.global);\n\n            target.stage.on('mousemove', this.onDragMoveImpl);\n            target.stage.on('touchmove', this.onDragMoveImpl);\n            target.stage.on('mouseup', this.onDragEndImpl);\n            target.stage.on('mouseupoutside', this.onDragEndImpl);\n            target.stage.on('touchend', this.onDragEndImpl);\n            target.stage.on('touchendoutside', this.onDragEndImpl);\n            target.stage.on('touchcancel', this.onDragEndImpl);\n\n            this.isBound = true;\n        }\n\n        e.data.originalEvent.preventDefault();\n    };\n\n    private onDragMoveImpl = (e: PIXI.interaction.InteractionEvent): void =>\n    {\n        if (e.data.identifier !== this.id)\n        {\n            return;\n        }\n\n        const {\n            lastCursor,\n            dragOffset,\n            dragStart,\n            target,\n        } = this;\n\n        this.lastCursor.copyFrom(e.data.global);\n        this.dragOffset.set(lastCursor.x - dragStart.x, lastCursor.y - dragStart.y);\n\n        if (!this.isDragging)\n        {\n            this.movementX = Math.abs(dragOffset.x);\n            this.movementY = Math.abs(dragOffset.y);\n\n            if ((this.movementX === 0 && this.movementY === 0)\n                    || Math.max(this.movementX, this.movementY) < target.dragThreshold)\n            {\n                return; // threshold\n            }\n\n            if (target.dragRestrictAxis !== null)\n            {\n                this.cancel = false;\n\n                if (target.dragRestrictAxis === 'x' && this.movementY > this.movementX)\n                {\n                    this.cancel = true;\n                }\n                else if (target.dragRestrictAxis === 'y' && this.movementY <= this.movementX)\n                {\n                    this.cancel = true;\n                }\n\n                if (this.cancel)\n                {\n                    this.onDragEndImpl(e);\n\n                    return;\n                }\n            }\n\n            this.onDragStart(e);\n            this.isDragging = true;\n        }\n\n        this.onDragMove(e, dragOffset);\n    };\n\n    private onDragEndImpl = (e: PIXI.interaction.InteractionEvent): void =>\n    {\n        if (e.data.identifier !== this.id)\n        {\n            return;\n        }\n\n        const { target } = this;\n\n        if (this.isBound)\n        {\n            target.stage.removeListener('mousemove', this.onDragMoveImpl);\n            target.stage.removeListener('touchmove', this.onDragMoveImpl);\n            target.stage.removeListener('mouseup', this.onDragEndImpl);\n            target.stage.removeListener('mouseupoutside', this.onDragEndImpl);\n            target.stage.removeListener('touchend', this.onDragEndImpl);\n            target.stage.removeListener('touchendoutside', this.onDragEndImpl);\n            target.stage.removeListener('touchcancel', this.onDragEndImpl);\n\n            this.isDragging = false;\n            this.isBound = false;\n\n            this.onDragEnd(e);\n            this.onPress(e, false);\n        }\n    };\n}\n","import { ClickManager } from './ClickManager';\nimport { DragManager } from './DragManager';\nimport { EventManager } from './EventManager';\nimport { Widget } from '../Widget';\n\n/**\n * The event brokers allows you to access event managers without manually assigning\n * them to a widget. By default, the click (`PUXI.ClickManager`), dnd (`PUXI.DragManager`)\n * are defined. You can add event managers for all (new) widgets by adding an entry to\n * `EventBroker.MANAGER_MAP`.\n *\n * @memberof PUXI\n * @class\n */\nexport class EventBroker\n{\n    [key: string]: EventManager | Widget;\n\n    constructor(target: Widget)\n    {\n        this.target = target;\n\n        for (const mgr of Object.keys(EventBroker.MANAGER_MAP))\n        {\n            Object.defineProperty(\n                this,\n                mgr,\n                {\n                    get(): EventManager\n                    {\n                        if (!this[`_${mgr}`])\n                        {\n                            this[`_${mgr}`] = new EventBroker.MANAGER_MAP[mgr](this.target);\n                        }\n\n                        return this[`_${mgr}`];\n                    },\n                },\n            );\n        }\n    }\n\n  static MANAGER_MAP = {\n      click: ClickManager,\n      dnd: DragManager,\n  };\n}\n","import * as PIXI from 'pixi.js';\nimport { EventManager } from './EventManager';\nimport { Widget } from '../Widget';\n\n/**\n * Handles the `wheel` and `scroll` DOM events on widgets. It also registers\n * listeners for `mouseout` and `mouseover`.\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.EventManager\n */\nexport class ScrollManager extends EventManager\n{\n    private bound: boolean;\n    private delta: PIXI.Point;\n    private preventDefault: boolean;\n\n    constructor(target: Widget, preventDefault = true)\n    {\n        super(target);\n\n        this.bound = false;\n        this.delta = new PIXI.Point();\n        this.preventDefault = preventDefault;\n\n        this.startEvent();\n    }\n\n    /**\n     * @override\n     */\n    startEvent(): void\n    {\n        const { target, onHoverImpl, onMouseOutImpl } = this;\n\n        target.contentContainer.on('mouseover', onHoverImpl);\n        target.contentContainer.on('mouseout', onMouseOutImpl);\n    }\n\n    /**\n     * @override\n     */\n    stopEvent(): void\n    {\n        const { target, onMouseScrollImpl, onHoverImpl, onMouseOutImpl } = this;\n\n        if (this.bound)\n        {\n            document.removeEventListener('mousewheel', onMouseScrollImpl);\n            document.removeEventListener('DOMMouseScroll', onMouseScrollImpl);\n\n            this.bound = false;\n        }\n\n        target.contentContainer.removeListener('mouseover', onHoverImpl);\n        target.contentContainer.removeListener('mouseout', onMouseOutImpl);\n    }\n\n    private onMouseScrollImpl = (e: WheelEvent): void =>\n    {\n        const { target, preventDefault, delta } = this;\n\n        if (preventDefault)\n        {\n            event.preventDefault();\n        }\n\n        if (typeof e.deltaX !== 'undefined')\n        {\n            delta.set(e.deltaX, e.deltaY);\n        }\n        else // Firefox\n        {\n            delta.set(e.axis === 1 ? e.detail * 60 : 0,\n                e.axis === 2 ? e.detail * 60 : 0);\n        }\n\n        this.onMouseScroll.call(target, event, delta);\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private onHoverImpl = (e): void =>\n    {\n        const { onMouseScrollImpl } = this;\n\n        if (!this.bound)\n        {\n            document.addEventListener('mousewheel', onMouseScrollImpl, false);\n            document.addEventListener('DOMMouseScroll', onMouseScrollImpl, false);\n\n            this.bound = true;\n        }\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private onMouseOutImpl = (e): void =>\n    {\n        const { onMouseScrollImpl } = this;\n\n        if (this.bound)\n        {\n            document.removeEventListener('mousewheel', onMouseScrollImpl);\n            document.removeEventListener('DOMMouseScroll', onMouseScrollImpl);\n\n            this.bound = false;\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMouseScroll = function onMouseScroll(event, delta: PIXI.Point): void\n    {\n        // Default onMouseScroll.\n    };\n}\n","import { DragManager } from './event/DragManager';\nimport { DragDropController } from './event/DragDropController';\nimport * as PIXI from 'pixi.js';\nimport { Insets } from './layout-options/Insets';\nimport { LayoutOptions, FastLayoutOptions } from './layout-options';\nimport { MeasureMode, IMeasurable } from './IMeasurable';\nimport { Stage } from './Stage';\nimport { DropShadowFilter } from '@pixi/filter-drop-shadow';\nimport { EventBroker } from './event';\nimport { Style } from './Style';\nimport { Menu } from './Menu';\nimport { PopupMenu } from './PopupMenu';\n\nconst PADDING_PROPERTIES = ['paddingLeft', 'paddingTop', 'paddingRight', 'paddingBottom'];\n\nconst PADDING_AXIS_PROPERTIES = ['paddingHorizontal', 'paddingVertical'];\n\nexport const TEXT_STYLE_PROPERTIES = [\n    'fontFamily',\n    'fontSize',\n    'fontWeight',\n    'letterSpacing',\n];\n\n/**\n * A widget is a user interface control that renders content inside its prescribed\n * rectangle on the screen.\n *\n * @memberof PUXI\n * @class\n * @extends PIXI.utils.EventEmitter\n * @implements PUXI.IMeasurable\n */\nexport class Widget extends PIXI.utils.EventEmitter implements IMeasurable\n{\n    /**\n     * The minimum delay between two clicks to not consider them as a double-click.\n     */\n    public static CLICK_DELAY = 300;\n\n    public readonly insetContainer: PIXI.Container;\n    public readonly contentContainer: PIXI.Container;\n    public readonly widgetChildren: Widget[];\n    public readonly stage: Stage;\n\n    initialized: boolean;\n    protected dragInitialized: boolean;\n    protected dropInitialized: boolean;\n    protected isDragging: boolean;\n\n    private draggable: boolean;\n    private droppable: boolean;\n    \n    tint: number;\n    dirty: boolean;\n    _oldWidth: number;\n    _oldHeight: number;\n    pixelPerfect: boolean;\n\n    parent: Widget;\n\n    public layoutMeasure: Insets;\n    public layoutOptions: LayoutOptions;\n\n    protected blendMode: PIXI.BLEND_MODES;\n    protected background: PIXI.Container;\n    protected _measuredWidth: number;\n    protected _measuredHeight: number;\n\n    private _eventBroker: EventBroker;\n    private _paddingLeft: number;\n    private _paddingTop: number;\n    private _paddingRight: number;\n    private _paddingBottom: number;\n    private _width: number;\n    private _height: number;\n    private _elevation: number;\n    private _dropShadow: DropShadowFilter;\n    private _layoutDirty: boolean;\n\n    private singleClickTimeout: NodeJS.Timeout;\n    private style: Style;\n    private styleID: number;\n    private contextMenu: Menu;\n    private contextPopup: PopupMenu;\n\n    constructor()\n    {\n        super();\n\n        /**\n         * This container owns the background + content of this widget.\n         * @member {PIXI.Container}\n         * @readonly\n         */\n        this.insetContainer = new PIXI.Container();\n\n        /**\n         * This container holds the content of this widget. Subclasses should add\n         * renderable display-objects to this container.\n         * @member {PIXI.Container}\n         * @readonly\n         */\n        this.contentContainer = this.insetContainer.addChild(new PIXI.Container());\n\n        /**\n         * Children of this widget. Use `WidgetGroup` to position children.\n         * @member {PUXI.Widget[]}\n         * @readonly\n         */\n        this.widgetChildren = [];\n\n        /**\n         * Stage whose scene graph holds this widget. Once set, this cannot be changed.\n         * @member {PUXI.Stage}\n         * @readonly\n         */\n        this.stage = null;\n\n        /**\n         * Layout insets of this widget. In normal state, the widget should be in this\n         * rectangle inside the parent reference frame.\n         * @member {PUXI.Insets}\n         * @readonly\n         */\n        this.layoutMeasure = new Insets();\n\n        this.initialized = false;\n        this.dragInitialized = false;\n        this.dropInitialized = false;\n\n        this.dirty = true;\n        this._oldWidth = -1;\n        this._oldHeight = -1;\n        this.pixelPerfect = true;\n\n        this._paddingLeft = 0;\n        this._paddingTop = 0;\n        this._paddingRight = 0;\n        this._paddingBottom = 0;\n        this._elevation = 0;\n\n        this.tint = 0;\n        this.blendMode = PIXI.BLEND_MODES.NORMAL;\n\n        this.draggable = false;\n        this.droppable = false;\n\n        this.singleClickTimeout = null;\n        this.style = null;\n        this.styleID = -1;\n\n        // Use a separate callback function to allow this.on* methods to be reassigned.\n        this.insetContainer.on('pointerdown', (e: PIXI.InteractionEvent) => { this.onPointerPress(e); });\n        this.insetContainer.on('pointermove', (e: PIXI.InteractionEvent) => { this.onPointerMove(e); });\n        this.insetContainer.on('pointerup', (e: PIXI.InteractionEvent) => { this.onPointerRelease(e); });\n        this.insetContainer.on('pointerover', (e: PIXI.InteractionEvent) => { this.onPointerEnter(e); });\n        this.insetContainer.on('pointerout', (e: PIXI.InteractionEvent) => { this.onPointerExit(e); });\n        this.insetContainer.on('rightclick', (e: PIXI.InteractionEvent) => { this.onRightClick(e); });\n    }\n\n    /**\n     * Update method that is to be overriden. This is called before a `render()`\n     * pass on widgets that are dirty.\n     *\n     * @private\n     */\n    update(): any\n    {\n        if (this._layoutDirty)\n        {\n            // console.log('here');\n            setTimeout(() =>\n            {\n                if (this._layoutDirty)\n                {\n                    this.stage.measureAndLayout();\n                }\n            }, 0);\n        }\n\n        if (this.style && this.styleID !== this.style.dirtyID)\n        {\n            this.onStyleChange(this.style);\n            this.styleID = this.style.dirtyID;\n        }\n    }\n\n    /**\n     * The measured width that is used by the parent's layout manager to place this\n     * widget.\n     * @member {number}\n     */\n    get measuredWidth(): number\n    {\n        return this._measuredWidth;\n    }\n\n    /**\n     * The measured height that is used by the parent's layout manager to place this\n     * widget.\n     * @member {number}\n     */\n    get measuredHeight(): number\n    {\n        return this._measuredHeight;\n    }\n\n    /**\n     * Alias for `Widget.measuredWidth`.\n     *\n     * @returns {number} the measured width\n     */\n    getMeasuredWidth(): number\n    {\n        return this._measuredWidth;\n    }\n\n    /**\n     * Alias for `Widget.measuredHeight`.\n     *\n     * @returns {number} the measured height\n     */\n    getMeasuredHeight(): number\n    {\n        return this._measuredHeight;\n    }\n\n    /**\n     * Override this method to measure the dimensions for your widget. By default, it\n     * will use the natural width/height of this widget's content (`contentContainer`)\n     * plus any padding.\n     *\n     * @param {number} width - width of region provided by parent\n     * @param {number} height - height of region provided by parent\n     * @param {PUXI.MeasureMode} widthMode - mode in which provided width is to be used\n     * @param {PUXI.MeasureMode} heightMode - mode in which provided height is to be used\n     */\n    onMeasure(width: number, height: number, widthMode: MeasureMode, heightMode: MeasureMode): void\n    {\n        const naturalWidth = this.contentContainer.width + this.paddingHorizontal;\n        const naturalHeight = this.contentContainer.height + this.paddingVertical;\n\n        switch (widthMode)\n        {\n            case MeasureMode.EXACTLY:\n                this._measuredWidth = width;\n                break;\n            case MeasureMode.UNBOUNDED:\n                this._measuredWidth = naturalWidth;\n                break;\n            case MeasureMode.AT_MOST:\n                this._measuredWidth = Math.min(width, naturalWidth);\n                break;\n        }\n\n        switch (heightMode)\n        {\n            case MeasureMode.EXACTLY:\n                this._measuredHeight = height;\n                break;\n            case MeasureMode.UNBOUNDED:\n                this._measuredHeight = naturalHeight;\n                break;\n            case MeasureMode.AT_MOST:\n                this._measuredHeight = Math.min(height, naturalHeight);\n                break;\n        }\n    }\n\n    /**\n     * This method calls `Widget.onMeasure` and should not be overriden. It does internal\n     * bookkeeping.\n     *\n     * @param {number} width\n     * @param {number} height\n     * @param {PUXI.MeasureMode} widthMode\n     * @param {PUXI.MeasureMode} heightMode\n     */\n    measure(width: number, height: number, widthMode: MeasureMode, heightMode: MeasureMode): void\n    {\n        this.onMeasure(width, height, widthMode, heightMode);\n    }\n\n    /**\n     * This method should set the frame in which rendering will occur and lay out\n     * child widgets in that frame.\n     *\n     * @param l\n     * @param t\n     * @param r\n     * @param b\n     * @param dirty\n     * @protected\n     */\n    onLayout(l: number, t: number = l, r: number = l, b: number = t, dirty = true): void\n    {\n        this.layoutMeasure.left = l;\n        this.layoutMeasure.top = t;\n        this.layoutMeasure.right = r;\n        this.layoutMeasure.bottom = b;\n\n        this._width = r - l;\n        this._height = b - t;\n\n        if (this.background)\n        {\n            this.background.x = 0;\n            this.background.y = 0;\n            this.background.width = r - l;\n            this.background.height = b - t;\n        }\n\n        // Update parallel PIXI node too!\n        this.insetContainer.x = l;\n        this.insetContainer.y = t;\n        this.contentContainer.x = this._paddingLeft;\n        this.contentContainer.y = this._paddingTop;\n\n        // Don't set width/height on inset, content because that would scale\n        // the contents (we don't want that).\n\n        this._layoutDirty = false;\n    }\n\n    layout(l: number, t: number = l, r: number = l, b: number = t, dirty = true): void\n    {\n        this.onLayout(l, t, r, b, dirty);\n    }\n\n    /**\n     * Use this to specify how you want to layout this widget w.r.t its parent.\n     * The specific layout options class depends on which layout you are\n     * using in the parent widget.\n     *\n     * @param {PUXI.LayoutOptions} lopt\n     * @returns {Widget} this\n     */\n    setLayoutOptions(lopt: LayoutOptions): Widget\n    {\n        this.layoutOptions = lopt;\n\n        return this;\n    }\n\n    /**\n     * This is invoked when a style is applied on the widget. If you override it, you must pass through the superclass\n     * implementation.\n     *\n     * @param style\n     */\n    protected onStyleChange(style: Style): void\n    {\n        const styleData = style.getProperties(\n            'backgroundColor',\n            'background',\n            'elevation',\n            'padding',\n            'paddingHorizontal',\n            'paddingVertical',\n            'paddingLeft',\n            'paddingTop',\n            'paddingRight',\n            'paddingBottom',\n        );\n\n        // Set background of widget\n        if (styleData.background)\n        {\n            this.setBackground(styleData.background);\n        }\n        else if (typeof styleData.backgroundColor !== 'undefined')\n        {\n            this.setBackground(styleData.backgroundColor);\n        }\n\n        // Set elevation\n        if (typeof styleData.elevation !== 'undefined')\n        {\n            this.setElevation(styleData.elevation);\n        }\n\n        // Set _paddingLeft, _paddingTop, _paddingRight, _paddingBottom\n        PADDING_PROPERTIES.forEach((propName, i) =>\n        {\n            if (typeof styleData[propName] === 'number')\n            {\n                this[`_${propName}`] = styleData[propName];\n            }\n            else if (typeof styleData[PADDING_AXIS_PROPERTIES[i % 2]] === 'number')\n            {\n                this[`_${propName}`] = styleData[PADDING_AXIS_PROPERTIES[i % 2]];\n            }\n            else if (typeof styleData.padding === 'number')\n            {\n                this[`_${propName}`] = styleData.padding;\n            }\n        });\n\n        this.dirty = true;\n    }\n\n    /**\n     * Handles the pointer-entered event.\n     *\n     * If you override this method, you must call through to the superclass implementation.\n     *\n     * @param e - the triggering interaction event\n     */\n    onPointerEnter(e: PIXI.InteractionEvent): void\n    {\n        this.onHoverChange(e, true);\n    }\n\n    /**\n     * Handles the pointer-exited event.\n     *\n     * If you override this method, you must call through to the superclass implementation.\n     *\n     * @param e\n     */\n    onPointerExit(e: PIXI.InteractionEvent): void\n    {\n        this.onHoverChange(e, false);\n    }\n\n    /**\n     * Handles the pointer-down event. If you override this method, you must call through to the superclass\n     * implementation.\n     */\n    onPointerPress(e: PIXI.InteractionEvent): void\n    {\n        return;\n    }\n\n    /**\n     * Handles the pointer-move event. If you override this method, you must call through to the superclass\n     * implementation.\n     */\n    onPointerMove(e: PIXI.InteractionEvent): void\n    {\n        return;\n    }\n\n    onPointerRelease(e: PIXI.InteractionEvent): void\n    {\n        if (!this.singleClickTimeout)\n        {\n            // Invoke onClick after ~300ms only if it isn't a double-click.\n            this.singleClickTimeout = setTimeout(() =>\n            {\n                this.singleClickTimeout = null;\n            }, Widget.CLICK_DELAY);\n\n            this.onClick(e);\n        }\n        else\n        {\n            clearTimeout(this.singleClickTimeout);\n\n            this.singleClickTimeout = null;\n\n            // Invoke onDoubleClick after the onPointerPress handler.\n            setTimeout(() => { this.onDoubleClick(e); }, 0);\n        }\n\n        return;\n    }\n\n    /**\n     * Event handler for change in the hover state.\n     *\n     * @param e\n     * @param hover\n     */\n    onHoverChange(e: PIXI.InteractionEvent, hover: boolean): void\n    {\n        return;\n    }\n\n    onClick(e: PIXI.InteractionEvent): void\n    {\n        return;\n    }\n\n    onDoubleClick(e: PIXI.InteractionEvent): void\n    {\n        return;\n    }\n\n    onRightClick(e: PIXI.InteractionEvent): void\n    {\n        console.log('RIGHT_CLICK');\n        e.data.originalEvent.preventDefault();\n\n        if (this.contextMenu)\n        {\n            if (!this.contextPopup)\n            {\n                //  this.contextPopup = new PopupMenu(this.contextMenu);\n            }\n\n            const location = e.data.getLocalPosition(this.stage);\n\n            //  this.openPopupMenu(location.x, location.y);\n        }\n\n        return;\n    }\n\n    /**\n     * The event broker for this widget that holds all the event managers. This can\n     * be used to start/stop clicks, drags, scrolls and configure how those events\n     * are handled/interpreted.\n     * @member PUXI.EventBroker\n     */\n    get eventBroker(): EventBroker\n    {\n        if (!this._eventBroker)\n        {\n            this._eventBroker = new EventBroker(this);\n        }\n\n        return this._eventBroker;\n    }\n\n    /**\n     * Padding on left side.\n     * @member {number}\n     */\n    get paddingLeft(): number\n    {\n        return this._paddingLeft;\n    }\n    set paddingLeft(val: number)\n    {\n        this._paddingLeft = val;\n        this.dirty = true;\n    }\n\n    /**\n     * Padding on top side.\n     * @member {number}\n     */\n    get paddingTop(): number\n    {\n        return this._paddingTop;\n    }\n    set paddingTop(val: number)\n    {\n        this._paddingTop = val;\n        this.dirty = true;\n    }\n\n    /**\n     * Padding on right side.\n     * @member {number}\n     */\n    get paddingRight(): number\n    {\n        return this._paddingRight;\n    }\n    set paddingRight(val: number)\n    {\n        this._paddingRight = val;\n        this.dirty = true;\n    }\n\n    /**\n     * Padding on bottom side.\n     * @member {number}\n     */\n    get paddingBottom(): number\n    {\n        return this._paddingBottom;\n    }\n    set paddingBottom(val: number)\n    {\n        this._paddingBottom = val;\n        this.dirty = true;\n    }\n\n    /**\n     * Sum of left & right padding.\n     * @member {number}\n     * @readonly\n     */\n    get paddingHorizontal(): number\n    {\n        return this._paddingLeft + this._paddingRight;\n    }\n\n    /**\n     * Sum of top & bottom padding.\n     * @member {number}\n     * @readonly\n     */\n    get paddingVertical(): number\n    {\n        return this._paddingTop + this._paddingBottom;\n    }\n\n    /**\n     * Whether this widget is interactive in the PixiJS scene graph.\n     * @member {boolean}\n     */\n    get interactive(): boolean\n    {\n        return this.insetContainer.interactive;\n    }\n    set interactive(val: boolean)\n    {\n        this.insetContainer.interactive = true;\n        this.contentContainer.interactive = true;\n    }\n\n    /**\n     * Layout width of this widget.\n     * @member {number}\n     * @readonly\n     */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    /**\n     * Layout height of this widget.\n     * @member {number}\n     * @readonly\n     */\n    get height(): number\n    {\n        return this._height;\n    }\n\n    /**\n     * Layout width of this widget's content, which is the width minus horizontal padding.\n     * @member {number}\n     * @readonly\n     */\n    get contentWidth(): number\n    {\n        return this._width - this.paddingHorizontal;\n    }\n\n    /**\n     * Layout height of this widget's content, which is the height minus vertical padding.\n     * @member {number}\n     * @readonly\n     */\n    get contentHeight(): number\n    {\n        return this._height - this.paddingVertical;\n    }\n\n    /**\n     * Alpha of this widget & its contents.\n     * @member {number}\n     */\n    get alpha(): number\n    {\n        return this.insetContainer.alpha;\n    }\n    set alpha(val: number)\n    {\n        this.insetContainer.alpha = val;\n    }\n\n    /**\n     * Sets the padding values.\n     *\n     * To set all paddings to one value:\n     * ```\n     * widget.setPadding(8);\n     * ```\n     *\n     * To set horizontal & vertical padding separately:\n     * ```\n     * widget.setPadding(4, 12);\n     * ```\n     *\n     * @param {number}[l=0] - left padding\n     * @param {number}[t=l] - top padding (default is equal to left padding)\n     * @param {number}[r=l] - right padding (default is equal to right padding)\n     * @param {number}[b=t] - bottom padding (default is equal to top padding)\n     */\n    setPadding(l: number, t: number = l, r: number = l, b: number = t): Widget\n    {\n        this._paddingLeft = l;\n        this._paddingTop = t;\n        this._paddingRight = r;\n        this._paddingBottom = b;\n        this.dirty = true;\n\n        return this;\n    }\n\n    /**\n     * @returns {PIXI.Container} - the background display-object\n     */\n    getBackground(): PIXI.Container\n    {\n        return this.background;\n    }\n\n    /**\n     * The background of a widget is a `PIXI.DisplayObject` that is rendered before\n     * all of its children.\n     *\n     * @param {PIXI.Container | number | string} bg - the background display-object or\n     *     a color that will be used to generate a `PIXI.Graphics` as the background.\n     */\n    setBackground(bg: PIXI.Container | number | string): Widget\n    {\n        if (this.background)\n        {\n            this.insetContainer.removeChild(this.background);\n        }\n\n        if (typeof bg === 'string')\n        {\n            bg = PIXI.utils.string2hex(bg);\n        }\n        if (typeof bg === 'number')\n        {\n            bg = new PIXI.Graphics()\n                .beginFill(bg)\n                .drawRect(0, 0, 1, 1)\n                .endFill();\n        }\n\n        this.background = bg;\n\n        if (bg)\n        {\n            bg.width = this.width;\n            bg.height = this.height;\n            this.insetContainer.addChildAt(bg, 0);\n        }\n\n        if (bg && this._elevation && this._dropShadow)\n        {\n            if (!this.background.filters)\n            {\n                this.background.filters = [];\n            }\n\n            this.background.filters.push(this._dropShadow);\n        }\n\n        return this;\n    }\n\n    /**\n     * @returns {number} the alpha on the background display-object.\n     */\n    getBackgroundAlpha(): number\n    {\n        return this.background ? this.background.alpha : 1;\n    }\n\n    /**\n     * This can be used to set the alpha on the _background_ of this widget. This\n     * does not affect the widget's contents nor individual components of the\n     * background display-object.\n     *\n     * @param {number} val - background alpha\n     */\n    setBackgroundAlpha(val: number): Widget\n    {\n        if (!this.background)\n        {\n            this.setBackground(0xffffff);\n        }\n\n        this.background.alpha = val;\n\n        return this;\n    }\n\n    /**\n     * Set the context-menu to be shown on right-clicks.\n     *\n     * This feature is not released yet, i.e. does not work!\n     *\n     * @param menu\n     * @alpha\n     */\n    setContextMenu(menu: Menu): void\n    {\n        this.contextMenu = menu;\n    }\n\n    /**\n     * @return {number} the elevation set on this widget\n     */\n    getElevation(): number\n    {\n        return this._elevation;\n    }\n\n    /**\n     * This can be used add a drop-shadow that will appear to raise this widget by\n     * the given elevation against its parent.\n     *\n     * @param {number} val - elevation to use. 2px is good for most widgets.\n     */\n    setElevation(val: number): Widget\n    {\n        this._elevation = val;\n\n        if (val === 0 && this._dropShadow)\n        {\n            if (!this.background)\n            {\n                return this;\n            }\n\n            const i = this.background.filters.indexOf(this._dropShadow);\n\n            if (i > 0)\n            {\n                this.background.filters.splice(i, 1);\n            }\n        }\n        else if (val > 0)\n        {\n            if (!this._dropShadow)\n            {\n                if (this.background && !this.background.filters)\n                {\n                    this.background.filters = [];\n                }\n\n                this._dropShadow = new DropShadowFilter({ distance: val });\n\n                if (this.background)\n                {\n                    this.background.filters.push(this._dropShadow);\n                }\n            }\n\n            this._dropShadow.distance = val;\n        }\n\n        return this;\n    }\n\n    /**\n     * Set the style applied on this widget. To unset a style, simply pass {@code null}.\n     *\n     * @param style\n     */\n    setStyle(style?: Style): this\n    {\n        this.style = style;\n        this.styleID = -1;\n\n        return this;\n    }\n\n    /**\n     * Will trigger a full layout pass next animation frame.\n     */\n    requestLayout(): void\n    {\n        this._layoutDirty = true;\n    }\n\n    /**\n     * Adds the widgets as children of this one.\n     *\n     * @param {PUXI.Widget[]} widgets\n     * @returns {Widget} - this widget\n     */\n    addChild(...widgets: Widget[]): Widget\n    {\n        for (let i = 0; i < widgets.length; i++)\n        {\n            const widget = widgets[i];\n\n            if (widget.parent)\n            {\n                widget.parent.removeChild(widget);\n            }\n\n            widget.parent = this;\n            this.contentContainer.addChild(widget.insetContainer);\n            this.widgetChildren.push(widget);\n        }\n\n        return this;\n    }\n\n    /**\n     * Orphans the widgets that are children of this one.\n     *\n     * @param {PUXI.Widget[]} widgets\n     * @returns {Widget} - this widget\n     */\n    removeChild(...widgets: Widget[]): Widget\n    {\n        for (let i = 0; i < widgets.length; i++)\n        {\n            const widget = widgets[i];\n            const index = this.widgetChildren.indexOf(widget);\n\n            if (index !== -1)\n            {\n                widget.insetContainer.parent.removeChild(widget.insetContainer);\n                this.widgetChildren.splice(index, 1);\n                widget.parent = null;\n            }\n        }\n\n        return this;\n    }\n\n    private openPopupMenu(x: number, y: number): void\n    {\n        const stage = this.stage;\n        const lopt = this.contextPopup.layoutOptions as FastLayoutOptions;\n\n        lopt.x = x;\n        lopt.y = y;\n\n        this.stage.addChild(this.contextPopup);\n    }\n\n    private closePopupMenu(): void\n    {\n        this.stage.removeChild(this.contextPopup);\n    }\n\n    /**\n     * Makes this widget `draggable`.\n     */\n    makeDraggable(): Widget\n    {\n        this.draggable = true;\n\n        if (this.initialized)\n        {\n            this.initDraggable();\n        }\n\n        return this;\n    }\n\n    /**\n     * Makes this widget not `draggable`.\n     */\n    clearDraggable(): void\n    {\n        if (this.dragInitialized)\n        {\n            this.dragInitialized = false;\n            (this.eventBroker.dnd as DragManager).stopEvent();\n        }\n    }\n\n    /**\n     * Widget initialization related to the stage. This method should always call\n     * `super.initialize()`.\n     *\n     * This method expects `stage` to be set before calling it. This is handled\n     * by the `Stage` itself.\n     *\n     * This will set `initialized` to true. If it was already set to true, it _should\n     * do nothing_.\n     *\n     * @protected\n     */\n    initialize(): void\n    {\n        if (this.initialized)\n        {\n            return;\n        }\n\n        if (this.draggable)\n        {\n            this.initDraggable();\n        }\n        if (this.droppable)\n        {\n            this.initDroppable();\n        }\n\n        this.initialized = true;\n    }\n\n    private initDraggable(): void\n    {\n        if (this.dragInitialized)\n        {\n            return;\n        }\n\n        this.dragInitialized = true;\n\n        const realPosition = new PIXI.Point();\n        const dragPosition = new PIXI.Point();\n\n        const dnd: DragManager = this.eventBroker.dnd as DragManager;\n        const { insetContainer } = this;\n\n        dnd.onDragStart = (e: PIXI.InteractionEvent): void =>\n        {\n            const added = DragDropController.add(this, e);\n\n            if (!this.isDragging && added)\n            {\n                this.isDragging = true;\n                insetContainer.interactive = false;\n                realPosition.copyFrom(insetContainer.position);\n\n                this.emit('draggablestart', e);\n            }\n        };\n\n        dnd.onDragMove = (e: PIXI.InteractionEvent, offset: PIXI.Point): void =>\n        {\n            if (this.isDragging)\n            {\n                dragPosition.set(realPosition.x + offset.x, realPosition.y + offset.y);\n\n                insetContainer.x = dragPosition.x;\n                insetContainer.y = dragPosition.y;\n\n                this.emit('draggablemove', e);\n            }\n        };\n\n        dnd.onDragEnd = (e: PIXI.InteractionEvent): void =>\n        {\n            if (this.isDragging)\n            {\n                this.isDragging = false;\n                DragDropController.getItem(this);\n\n                // Return to container after 0ms if not picked up by a droppable\n                setTimeout((): void =>\n                {\n                    this.insetContainer.interactive = true;\n                    this.insetContainer.position.copyFrom(realPosition);\n\n                    this.emit('draggableend', e);\n                }, 0);\n            }\n        };\n    }\n\n    /**\n     * Makes this widget `droppable`.\n     */\n    makeDroppable(): Widget\n    {\n        this.droppable = true;\n\n        if (this.initialized)\n        {\n            this.initDroppable();\n        }\n\n        return this;\n    }\n\n    protected onDrop: (e: PIXI.interaction.InteractionEvent) => void;\n\n    /**\n     * Makes this widget not `droppable`.\n     */\n    clearDroppable(): void\n    {\n        if (this.dropInitialized)\n        {\n            this.dropInitialized = false;\n            this.contentContainer.removeListener('mouseup', this.onDrop);\n            this.contentContainer.removeListener('touchend', this.onDrop);\n        }\n    }\n\n    private initDroppable(): void\n    {\n        if (!this.dropInitialized)\n        {\n            this.dropInitialized = true;\n            const container = this.contentContainer;\n\n            this.contentContainer.interactive = true;\n\n            this.onDrop = (event): void =>\n            {\n                const item = DragDropController.getEventItem(event, this.dropGroup);\n\n                if (item && item.isDragging)\n                {\n                    item.isDragging = false;\n                    item.insetContainer.interactive = true;\n                    const parent = this.droppableReparent !== null ? this.droppableReparent : self;\n\n                    parent.container.toLocal(item.container.position, item.container.parent, item);\n                    if (parent.container != item.container.parent) { parent.addChild(item); }\n                }\n            };\n\n            container.on('mouseup', this.onDrop);\n            container.on('touchend', this.onDrop);\n        }\n    }\n\n    /**\n     * Creates a widget that holds the display-object as its content. If `content` is\n     * a `PUXI.Widget`, then it will be returned.\n     * @param {PIXI.Container | Widget} content\n     * @static\n     */\n    static fromContent(content: PIXI.Container | Widget): Widget\n    {\n        if (content instanceof Widget)\n        {\n            return content;\n        }\n\n        const widget = new Widget();\n\n        widget.contentContainer.addChild(content);\n\n        return widget;\n    }\n\n    /**\n     * Easy utility to resolve measured dimension.\n     * @param {number} natural - your widget's natural dimension\n     * @param {number} limit - width/height limit passed by parent\n     * @param {PUXI.MeasureMode} mode - measurement mode passed by parent\n     */\n    static resolveMeasuredDimen(natural: number, limit: number, mode: MeasureMode): number\n    {\n        if (mode === MeasureMode.EXACTLY)\n        {\n            return limit;\n        }\n        else if (mode === MeasureMode.AT_MOST)\n        {\n            return Math.min(limit, natural);\n        }\n\n        return natural;\n    }\n}\n","/**\n * Alignments supported by layout managers in PuxiJS core.\n *\n * @memberof PUXI\n * @enum\n */\nexport enum ALIGN\n{\n    LEFT = 0,\n    TOP = 0,\n    MIDDLE = 0xff1,\n    CENTER = 0xff1,\n    RIGHT = 0xffff1,\n    BOTTOM = 0xffff1,\n    NONE = 0xffffffff\n}\n","/**\n * This are the base constraints that you can apply on a `PUXI.Widget` under any\n * layout manager. It specifies the dimensions of a widget, while the position\n * of the widget is left to the parent to decide. If a dimension (width or height)\n * is set to a value between -1 and 1, then it is interpreted as a percentage\n * of the parent's dimension.\n *\n * The following example will render a widget at 50% of the parent's width and 10px height:\n *\n * ```js\n * const widget = new PUXI.Widget();\n * const parent = new PUXI.Widget();\n *\n * widget.layoutOptions = new PUXI.LayoutOptions(\n *      .5,\n *      10\n * );\n * parent.addChild(widget);\n * ```\n *\n * @memberof PUXI\n * @class\n */\nexport class LayoutOptions\n{\n    public static FILL_PARENT = 0xfffffff1;\n    public static WRAP_CONTENT = 0xfffffff2;\n    public static MAX_DIMEN = 0xfffffff0;\n\n    public static DEFAULT = new LayoutOptions();\n\n    public width: number;\n    public height: number;\n    public cache: any;\n\n    private _marginLeft: number;\n    private _marginTop: number;\n    private _marginRight: number;\n    private _marginBottom: number;\n\n    /**\n     * @param {number}[width = LayoutOptions.WRAP_CONTENT]\n     * @param {number}[height = LayoutOptions.WRAP_CONTENT]\n     */\n    constructor(width: number | string = LayoutOptions.WRAP_CONTENT, height: number | string = LayoutOptions.WRAP_CONTENT)\n    {\n        this.setWidth(width);\n        this.setHeight(height);\n\n        /**\n         * Used by the layout manager to cache calculations.\n         * @member {object}\n         */\n        this.cache = {};\n    }\n\n    /**\n     * Utility method to store width that converts strings to their number format.\n     *\n     * @param {number | string} val\n     * @example\n     * ```\n     * lopt.setWidth('68.7%');// 68.7% of parent's width\n     * lopt.setWidth('96px');// 96px\n     * lopt.setWidth(34);// 34px\n     * lopt.setWidth(.45);// 45% of parent's width\n     * ```\n     */\n    setWidth(val: number | string): void\n    {\n        /**\n         * Preferred height of the widget in pixels. If its value is between -1 and 1, it\n         * is interpreted as a percentage of the parent's height.\n         * @member {number}\n         * @default {PUXI.LayoutOptions.WRAP_CONTENT}\n         */\n        this.width = LayoutOptions.parseDimen(val);\n    }\n\n    /**\n     * Utility method to store height that converts strings to their number format.\n     *\n     * @param {number | string} val\n     * @example\n     * ```\n     * lopt.setHeight('68.7%');// 68.7% of parent's height\n     * lopt.setHeight('96px');// 96px\n     * lopt.setHeight(34);// 34px\n     * lopt.setHeight(.45);// 45% of parent's height\n     * ```\n     */\n    setHeight(val: number | string): void\n    {\n        /**\n         * Preferred width of the widget in pixels. If its value is between -1 and 1, it\n         * is interpreted as a percentage of the parent's width.\n         * @member {number}\n         * @default {PUXI.LayoutOptions.WRAP_CONTENT}\n         */\n        this.height = LayoutOptions.parseDimen(val);\n    }\n\n    /**\n     * @member {boolean} - whether the specified width is a constant\n     *      (not a percentage, `WRAP_CONTENT`, or `FILL_PARENT`)\n     */\n    get isWidthPredefined(): boolean\n    {\n        return this.width > 1 && this.width <= LayoutOptions.MAX_DIMEN;\n    }\n\n    /**\n     * @member {boolean} - whether the specified height is a constant\n     *      (not a percentage, `WRAP_CONTENT`, or `FILL_PARENT`)\n     */\n    get isHeightPredefined(): boolean\n    {\n        return this.height > 1 && this.height <= LayoutOptions.MAX_DIMEN;\n    }\n\n    /**\n     * The left margin in pixels of the widget.\n     * @member {number}\n     * @default 0\n     */\n    get marginLeft(): number\n    {\n        return this._marginLeft || 0;\n    }\n    set marginLeft(val: number)\n    {\n        this._marginLeft = val;\n    }\n\n    /**\n     * This top margin in pixels of the widget.\n     * @member {number}\n     * @default 0\n     */\n    get marginTop(): number\n    {\n        return this._marginTop || 0;\n    }\n    set marginTop(val: number)\n    {\n        this._marginTop = val;\n    }\n\n    /**\n     * The right margin in pixels of the widget.\n     * @member {number}\n     * @default 0\n     */\n    get marginRight(): number\n    {\n        return this._marginRight || 0;\n    }\n    set marginRight(val: number)\n    {\n        this._marginRight = val;\n    }\n\n    /**\n     * The bottom margin in pixels of the widget.\n     * @member {number}\n     * @default 0\n     */\n    get marginBottom(): number\n    {\n        return this._marginBottom || 0;\n    }\n    set marginBottom(val: number)\n    {\n        this._marginBottom = val;\n    }\n\n    /**\n     * @param left\n     * @param top\n     * @param right\n     * @param bottom\n     */\n    setMargin(left: number, top: number, right: number, bottom: number): void\n    {\n        this._marginLeft = left;\n        this._marginTop = top;\n        this._marginRight = right;\n        this._marginBottom = bottom;\n    }\n\n    static parseDimen(val: number | string): number\n    {\n        if (typeof val === 'string')\n        {\n            if (val.endsWith('%'))\n            {\n                val = parseFloat(val.replace('%', '')) / 100;\n            }\n            else if (val.endsWith('px'))\n            {\n                val = parseFloat(val.replace('px', ''));\n            }\n\n            if (typeof val === 'string' || isNaN(val))\n            {\n                throw new Error('Width could not be parsed!');\n            }\n        }\n\n        return val;\n    }\n}\n","import { LayoutOptions } from './LayoutOptions';\nimport * as PIXI from 'pixi.js';\n\nexport interface IFastLayoutParams\n{\n    width?: number | string;\n    height?: number | string;\n    x?: number;\n    y?: number;\n    anchor?: PIXI.Point;\n}\n\n/**\n * @memberof PUXI\n * @interface\n * @property {number} width\n * @property {number} height\n * @property {number} x\n * @property {number} y\n * @property {PIXI.Point} anchor\n */\n\n/**\n * `PUXI.FastLayoutOptions` is an extension to `PUXI.LayoutOptions` that also\n * defines the x & y coordinates. It is accepted by the stage and `PUXI.FastLayout`.\n *\n * If x or y is between -1 and 1, then that dimension will be interpreted as a\n * percentage of the parent's width or height.\n *\n * @memberof PUXI\n * @extends PUXI.LayoutOptions\n * @class\n */\nexport class FastLayoutOptions extends LayoutOptions\n{\n    static DEFAULT_ANCHOR = new PIXI.Point(0, 0);\n    static CENTER_ANCHOR = new PIXI.Point(0.5, 0.5);// fragile, shouldn't be modified\n\n    x: number;\n    y: number;\n    anchor: PIXI.Point;\n\n    constructor(options: IFastLayoutParams)\n    {\n        super(options.width, options.height);\n\n        /**\n         * X-coordinate of the widget in its parent's reference frame. If it is\n         * absolutely less than 1, then it will be interpreted as a percent of\n         * the parent's width.\n         * @member {number}\n         * @default 0\n         */\n        this.x = options.x || 0;\n\n        /**\n         * Y-coordinate of the widget in its parent's reference frame. If it is\n         * absolutely less than 1, then it will be interpreted as a percent of\n         * the parent's height.\n         * @member {number}\n         * @default 0\n         */\n        this.y = options.y || 0;\n\n        /**\n         * The anchor is a normalized point telling where the (x,y) position of the\n         * widget lies inside of it. By default, it is (0, 0), which means that the\n         * top-left corner of the widget will be at (x,y); however, setting it to\n         * (.5,.5) will make the _center of the widget_ be at (x,y) in the parent's\n         * reference frame.\n         * @member {PIXI.Point}\n         * @default PUXI.FastLayoutOptions.DEFAULT_ANCHOR\n         */\n        this.anchor = options.anchor || FastLayoutOptions.DEFAULT_ANCHOR.clone();\n    }\n}\n","import { LayoutOptions } from './LayoutOptions';\nimport { ALIGN } from './Align';\n\nexport interface IBorderLayoutParams\n{\n    width?: number;\n    height?: number;\n    region?: number;\n    horizontalAlign?: ALIGN;\n    verticalAlign?: ALIGN;\n}\n\n/**\n * @memberof PUXI\n * @interface IBorderLayoutParams\n * @property {number} width\n * @property {number} height\n * @property {number} region\n * @property {number} horizontalAlign\n * @property {number} verticalAlign\n */\n\n/**\n * `PUXI.BorderLayoutOptions` defines a simple layout with five regions - the center and\n * four regions along each border. The top and bottom regions span the full width of\n * the parent widget-group. The left and right regions span the height of the layout\n * minus the top and bottom region heights.\n *\n * ```\n * ------------------------------------------------\n * |                 TOP REGION                   |\n * ------------------------------------------------\n * |        |                            |        |\n * |  LEFT  |          CENTER            | RIGHT  |\n * | REGION |          REGION            | REGION |\n * |        |                            |        |\n * ------------------------------------------------\n * |                BOTTOM REGION                 |\n * ------------------------------------------------\n * ```\n *\n * The height of the layout is measured as the sum of the heights of the top, center, and bottom\n * regions. Similarly, the width of the layout is measured as the width of the left, center, and\n * right regions.\n *\n * As of now, border layout doesn't support percent widths and heights.\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.LayoutOptions\n */\nexport class BorderLayoutOptions extends LayoutOptions\n{\n    /**\n     * Positions a widget inside the left border of the layout.\n     * @static\n     * @member {number}\n     */\n    static REGION_LEFT = 0xeff1;\n\n    /**\n     * Positions a widget below the top border of the layout.\n     * @static\n     * @member {number}\n     */\n    static REGION_TOP = 0xeff2;\n\n    /**\n     * Positions a widget below the right border of the layout.\n     * @static\n     * @member {number}\n     */\n    static REGION_RIGHT = 0xeff3;\n\n    /**\n     * Positions a widget below the top border of the layout.\n     * @static\n     * @member {number}\n     */\n    static REGION_BOTTOM = 0xeff4;\n\n    /**\n     * Positions a widget in the center of the layout. The main content of the layout\n     * should be in the center.\n     * @static\n     * @member {number}\n     */\n    static REGION_CENTER = 0xeff5;\n\n    region: number;\n    horizontalAlign: number;\n    verticalAlign: number;\n\n    constructor(options: IBorderLayoutParams)\n    {\n        super(options.width, options.height);\n\n        /**\n         * The border along which the widget is to be placed. This can be one of `POS_LEFT`,\n         * `POS_TOP`, `POS_RIGHT`, `POS_BOTTOM`.\n         * @member {number}\n         * @default {PUXI.BorderLayoutOptions#REGION_CENTER}\n         */\n        this.region = options.region || BorderLayoutOptions.REGION_CENTER;\n\n        /**\n         * Alignment of the widget horizontally in its region.\n         * @member {PUXI.ALIGN}\n         * @default {PUXI.ALIGN.LEFT}\n         */\n        this.horizontalAlign = options.horizontalAlign || ALIGN.LEFT;\n\n        /**\n         * Alignment of the widget vertically in its region.\n         * @member {PUXI.ALIGN}\n         * @default {PUXI.ALIGN.TOP}\n         */\n        this.verticalAlign = options.verticalAlign || ALIGN.TOP;\n    }\n}\n","import { MeasureMode } from '../IMeasurable';\nimport { ILayoutManager } from './ILayoutManager';\nimport { LayoutOptions, FastLayoutOptions } from '../layout-options';\nimport { WidgetGroup } from '../WidgetGroup';\n\n/**\n * `PUXI.FastLayout` is used in conjunction with `PUXI.FastLayoutOptions`. It is the\n * default layout for most widget groups.\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.ILayoutManager\n * @example\n * ```\n * parent.useLayout(new PUXI.FastLayout())\n * ```\n */\nexport class FastLayout implements ILayoutManager\n{\n    private host: WidgetGroup;\n    private _measuredWidth: number;\n    private _measuredHeight: number;\n\n    onAttach(host: WidgetGroup): void\n    {\n        this.host = host;\n    }\n\n    onDetach(): void\n    {\n        this.host = null;\n    }\n\n    onLayout(): void\n    {\n        const parent = this.host;\n        const { contentWidth: width, contentHeight: height, widgetChildren: children } = parent;\n\n        for (let i = 0, j = children.length; i < j; i++)\n        {\n            const widget = children[i];\n            const lopt = (widget.layoutOptions || LayoutOptions.DEFAULT) as FastLayoutOptions;\n\n            let x = lopt.x ? lopt.x : 0;\n            let y = lopt.y ? lopt.y : 0;\n\n            if (Math.abs(x) < 1)\n            {\n                x *= width;\n            }\n            if (Math.abs(y) < 1)\n            {\n                y *= height;\n            }\n\n            const anchor = lopt.anchor || FastLayoutOptions.DEFAULT_ANCHOR;\n\n            const l = x - (anchor.x * widget.getMeasuredWidth());\n            const t = y - (anchor.y * widget.getMeasuredHeight());\n\n            widget.layout(l, t,\n                l + widget.getMeasuredWidth(),\n                t + widget.getMeasuredHeight());\n        }\n    }\n\n    onMeasure(maxWidth: number, maxHeight: number, widthMode: MeasureMode, heightMode: MeasureMode): void\n    {\n        // TODO: Passthrough optimization pass, if there is only one child with FILL_PARENT width or height\n        // then don't measure twice.\n\n        this._measuredWidth = maxWidth;\n        this._measuredHeight = maxHeight;\n\n        const children = this.host.widgetChildren;\n\n        // Measure children\n        for (let i = 0, j = children.length; i < j; i++)\n        {\n            const widget = children[i];\n            const lopt = (widget.layoutOptions || LayoutOptions.DEFAULT) as FastLayoutOptions;\n\n            const loptWidth = (Math.abs(lopt.width) < 1) ? lopt.width * maxWidth : lopt.width;\n            const loptHeight = (Math.abs(lopt.height) < 1) ? lopt.height * maxHeight : lopt.height;\n            const widthMeasureMode = this.getChildMeasureMode(lopt.width, widthMode);\n            const heightMeasureMode = this.getChildMeasureMode(lopt.height, heightMode);\n\n            widget.measure(loptWidth, loptHeight, widthMeasureMode, heightMeasureMode);\n        }\n\n        this._measuredWidth = this.measureWidthReach(maxWidth, widthMode);\n        this._measuredHeight = this.measureHeightReach(maxHeight, heightMode);\n\n        this.measureChildFillers();\n    }\n\n    private getChildMeasureMode(dimen: number, parentMeasureMode: MeasureMode): MeasureMode\n    {\n        if (dimen === LayoutOptions.WRAP_CONTENT)\n        {\n            // No MeasureMode.EXACTLY!\n            return parentMeasureMode === MeasureMode.UNBOUNDED ? MeasureMode.UNBOUNDED : MeasureMode.AT_MOST;\n        }\n\n        return parentMeasureMode;\n    }\n\n    private measureWidthReach(parentWidthLimit: number, widthMode: MeasureMode): number\n    {\n        if (widthMode === MeasureMode.EXACTLY)\n        {\n            return parentWidthLimit;\n        }\n\n        const children = this.host.widgetChildren;\n        let measuredWidth = 0;\n\n        for (let i = 0, j = children.length; i < j; i++)\n        {\n            const widget = children[i];\n            const childWidth = widget.getMeasuredWidth();\n            const lopt = (widget.layoutOptions || LayoutOptions.DEFAULT) as FastLayoutOptions;\n            const x = lopt.x ? lopt.x : 0;\n            const anchor = lopt.anchor ? lopt.anchor : FastLayoutOptions.DEFAULT_ANCHOR;\n\n            // If lopt.x is %, then (1 - lopt.x)% of parent width should be as large\n            // as (1 - anchor.x)% child's width.\n            const minr = (Math.abs(x) < 1 ? (1 - anchor.x) * childWidth / (1 - x) : x + childWidth);\n\n            measuredWidth = Math.max(measuredWidth, minr);\n        }\n\n        if (widthMode === MeasureMode.AT_MOST)\n        {\n            measuredWidth = Math.min(parentWidthLimit, measuredWidth);\n        }\n\n        return measuredWidth;\n    }\n\n    private measureHeightReach(parentHeightLimit: number, heightMode: MeasureMode): number\n    {\n        if (heightMode === MeasureMode.EXACTLY)\n        {\n            return parentHeightLimit;\n        }\n\n        const children = this.host.widgetChildren;\n        let measuredHeight = 0;\n\n        for (let i = 0, j = children.length; i < j; i++)\n        {\n            const widget = children[i];\n            const childHeight = widget.getMeasuredHeight();\n            const lopt = (widget.layoutOptions || LayoutOptions.DEFAULT) as FastLayoutOptions;\n            const y = lopt.y ? lopt.y : 0;\n            const anchor = lopt.anchor ? lopt.anchor : FastLayoutOptions.DEFAULT_ANCHOR;\n\n            const minb = (Math.abs(y) < 1 ? (1 - anchor.y) * childHeight / (1 - y) : y + childHeight);\n\n            measuredHeight = Math.max(measuredHeight, minb);\n        }\n\n        if (heightMode === MeasureMode.AT_MOST)\n        {\n            measuredHeight = Math.min(parentHeightLimit, measuredHeight);\n        }\n\n        return measuredHeight;\n    }\n\n    private measureChildFillers(): void\n    {\n        const children = this.host.widgetChildren;\n\n        for (let i = 0, j = children.length; i < j; i++)\n        {\n            const widget = children[i];\n            const lopt = (widget.layoutOptions || LayoutOptions.DEFAULT) as FastLayoutOptions;\n            let loptWidth = (Math.abs(lopt.width) < 1) ? lopt.width * this._measuredWidth : lopt.width;\n            let loptHeight = (Math.abs(lopt.height) < 1) ? lopt.height * this._measuredHeight : lopt.height;\n\n            if (loptWidth === LayoutOptions.WRAP_CONTENT)\n            {\n                loptWidth = widget.getMeasuredWidth();\n            }\n            if (loptHeight === LayoutOptions.WRAP_CONTENT)\n            {\n                loptHeight = widget.getMeasuredHeight();\n            }\n\n            if (lopt.width === LayoutOptions.FILL_PARENT || lopt.height === LayoutOptions.FILL_PARENT)\n            {\n                widget.measure(\n                    lopt.width === LayoutOptions.FILL_PARENT ? this._measuredWidth : loptWidth,\n                    lopt.height === LayoutOptions.FILL_PARENT ? this._measuredHeight : loptHeight,\n                    MeasureMode.EXACTLY,\n                    MeasureMode.EXACTLY,\n                );\n            }\n        }\n    }\n\n    getMeasuredWidth(): number\n    {\n        return this._measuredWidth;\n    }\n\n    getMeasuredHeight(): number\n    {\n        return this._measuredHeight;\n    }\n}\n","import { Widget } from './Widget';\nimport { ILayoutManager } from './layout-manager/ILayoutManager';\nimport { MeasureMode } from './IMeasurable';\nimport { FastLayout } from './layout-manager/FastLayout';\n\n/**\n * A widget group is a layout owner that can position its children according\n * to the layout given to it.\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.Widget\n * @example\n * ```\n * const group = new PUXI.InteractiveGroup();\n *\n * group.useLayout(new PUXI.AnchorLayout());\n *\n * group.addChild(new PUXI.Button({ text: \"Hey\" })\n *  .setLayoutOptions(\n *      new PUXI.AnchorLayoutOptions({\n *             anchorLeft: 100,\n *             anchorTop: 300,\n *             anchorRight: .4,\n *             anchorBottom: 500,\n *             horizontalAlign: PUXI.ALIGN.CENTER\n *      })\n *  )\n * )\n * ```\n */\nexport class WidgetGroup extends Widget\n{\n    public layoutMgr: ILayoutManager;// lazily initialized (via useLayout(), useDefaultLayout())\n\n    /**\n     * Will set the given layout-manager to be used for positioning child widgets.\n     *\n     * @param {PUXI.ILayoutManager} layoutMgr\n     */\n    useLayout(layoutMgr: ILayoutManager): WidgetGroup\n    {\n        if (this.layoutMgr)\n        {\n            this.layoutMgr.onDetach();\n        }\n\n        this.layoutMgr = layoutMgr;\n\n        if (layoutMgr)\n        {\n            this.layoutMgr.onAttach(this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the widget-recommended layout manager. By default (if not overriden by widget\n     * group class), this is a fast-layout.\n     */\n    useDefaultLayout(): void\n    {\n        this.useLayout(new FastLayout());\n    }\n\n    onMeasure(width: number, height: number, widthMode: MeasureMode, heightMode: MeasureMode): void\n    {\n        super.onMeasure(width, height, widthMode, heightMode);\n\n        if (this.widgetChildren.length === 0)\n        {\n            return;\n        }\n        if (!this.layoutMgr)\n        {\n            this.useDefaultLayout();\n        }\n\n        this.layoutMgr.onMeasure(width - this.paddingHorizontal, height - this.paddingVertical, widthMode, heightMode);\n\n        this._measuredWidth = Math.max(this.measuredWidth, this.layoutMgr.getMeasuredWidth());\n        this._measuredHeight = Math.max(this.measuredHeight, this.layoutMgr.getMeasuredHeight());\n    }\n\n    onLayout(l: number, t: number, r: number, b: number, dirty = true): void\n    {\n        super.onLayout(l, t, r, b, dirty);\n\n        if (this.widgetChildren.length === 0)\n        {\n            return;\n        }\n        if (!this.layoutMgr)\n        {\n            this.useDefaultLayout();\n        }\n\n        this.layoutMgr.onLayout();// layoutMgr is attached to this\n    }\n}\n","import { WidgetGroup } from './WidgetGroup';\nimport * as PIXI from 'pixi.js';\n\n/**\n * An interactive container.\n *\n * @class\n * @extends PUXI.WidgetGroup\n * @memberof PUXI\n */\nexport class InteractiveGroup extends WidgetGroup\n{\n    private hitArea: PIXI.Rectangle;\n\n    constructor()\n    {\n        super();\n        this.hitArea = new PIXI.Rectangle();\n        this.insetContainer.hitArea = this.hitArea;\n    }\n\n    update(): void\n    {\n        super.update();\n    }\n\n    layout(l: number, t: number, r: number, b: number, dirty: boolean): void\n    {\n        super.layout(l, t, r, b, dirty);\n\n        this.hitArea.width = this.width;\n        this.hitArea.height = this.height;\n    }\n}\n\n","import * as PIXI from 'pixi.js';\nimport { TabGroup } from './ctl/FocusController';\nimport { InteractiveGroup } from './InteractiveGroup';\n\n/**\n * @namespace PUXI\n * @interface\n * @property {PIXI.Container}[background]\n * @property {number}[tabIndex]\n * @property {PUXI.TabGroup}[tabGroup]\n */\nexport interface IFocusableOptions\n{\n    background?: PIXI.Container;\n    tabIndex?: number;\n    tabGroup?: any;\n}\n\n/**\n * Represents a view that can gain or loose focus. It is primarily subclassed by\n * input/form widgets.\n *\n * Generally, it is a good idea not use layouts on these types of widgets.\n *\n * @class\n * @extends PUXI.Widget\n * @memberof PUXI\n */\nexport abstract class FocusableWidget extends InteractiveGroup\n{\n    _isFocused: boolean;\n    _isMousePressed: boolean;\n\n    tabIndex: number;\n    tabGroup: TabGroup;\n\n    /**\n     * @param {PUXI.IInputBaseOptions} options\n     * @param {PIXI.Container}[options.background]\n     * @param {number}[options.tabIndex]\n     * @param {any}[options.tabGroup]\n     */\n    constructor(options: IFocusableOptions = {})\n    {\n        super();\n\n        if (options.background)\n        {\n            super.setBackground(options.background);\n        }\n\n        // Prevents double focusing/blurring.\n        this._isFocused = false;\n\n        // Used to lose focus when mouse-down outside widget.\n        this._isMousePressed = false;\n\n        this.interactive = true;\n\n        /**\n         * @member {number}\n         * @readonly\n         */\n        this.tabIndex = options.tabIndex;\n\n        /**\n         * The name of the tab group in which this widget's focus will move on\n         * pressing tab.\n         * @member {PUXI.TabGroup}\n         * @readonly\n         */\n        this.tabGroup = options.tabGroup;\n\n        this.insetContainer.on('pointerdown', () =>\n        {\n            this.focus();\n            this._isMousePressed = true;\n        });\n\n        this.insetContainer.on('pointerup', () => { this._isMousePressed = false; });\n        this.insetContainer.on('pointerupoutside', () => { this._isMousePressed = false; });\n    }\n\n    /**\n     * Brings this widget into focus.\n     */\n    focus(): void\n    {\n        if (this.isFocused)\n        {\n            return;\n        }\n\n        this.stage.focusController.notifyFocus(this);\n\n        this._isFocused = true;\n        this.bindEvents();\n\n        this.emit('focusChanged', true);\n        this.emit('focus');\n    }\n\n    /**\n     * Brings this widget out of focus.\n     */\n    blur(): void\n    {\n        if (!this._isFocused)\n        {\n            return;\n        }\n\n        this.stage.focusController.notifyBlur();\n\n        this._isFocused = false;\n        this.clearEvents();\n\n        this.emit('focusChanged', false);\n        this.emit('blur');\n    }\n\n    /**\n     * Whether this widget is in focus.\n     * @member {boolean}\n     * @readonly\n     */\n    get isFocused(): boolean\n    {\n        return this._isFocused;\n    }\n\n    private bindEvents = (): void =>\n    {\n        this.stage.on('pointerdown', this.onDocumentPointerDownImpl);\n        document.addEventListener('keydown', this.onKeyDownImpl);\n    };\n\n    private clearEvents = (): void =>\n    {\n        this.stage.off('pointerdown', this.onDocumentPointerDownImpl);\n        document.removeEventListener('keydown', this.onKeyDownImpl);\n    };\n\n    protected onKeyDownImpl = (e: any): void =>\n    {\n        const focusCtl = this.stage.focusController;\n\n        if (e.which === 9 && focusCtl.useTab)\n        {\n            focusCtl.onTab();\n            e.preventDefault();\n        }\n        else if (e.which === 38 && focusCtl.useBack)\n        {\n            focusCtl.onBack();\n            e.preventDefault();\n        }\n        else if (e.which === 40 && focusCtl.useForward)\n        {\n            focusCtl.onForward();\n            e.preventDefault();\n        }\n\n        this.emit('keydown');\n    };\n\n    private onDocumentPointerDownImpl = (): void =>\n    {\n        if (!this._isMousePressed)\n        {\n            this.blur();\n        }\n    };\n\n    initialize(): void\n    {\n        super.initialize();\n        this.stage.focusController.in(this, this.tabIndex, this.tabGroup);\n    }\n\n    /**\n     * Fired when the widget comes into focus.\n     * @event focus\n     */\n\n    /**\n     * Fired when the widget goes out of focus.\n     * @event blur\n     */\n\n    /**\n     * Fired when the widgets comes into or goes out of focus.\n     * @event focusChanged\n     * @param {boolean} isFocused - whether the widget is in focus.\n     */\n}\n","import { Widget, TEXT_STYLE_PROPERTIES } from './Widget';\nimport * as PIXI from 'pixi.js';\nimport { Style } from './Style';\n\n/**\n * A static text widget. It cannot retain children.\n *\n * @memberof PUXI\n * @public\n */\nexport class TextWidget extends Widget\n{\n    public textDisplay: PIXI.Text;\n\n    /**\n     * @param {string} text - text content\n     * @param {PIXI.TextStyle} textStyle - styled used for text\n     */\n    constructor(text: string, textStyle?: PIXI.TextStyle)\n    {\n        super();\n\n        this.textDisplay = new PIXI.Text(text, textStyle);\n        this.contentContainer.addChild(this.textDisplay);\n    }\n\n    update(): void\n    {\n        super.update();\n\n        const fill = this.textDisplay.style.fill\n        if (!this.tint && typeof(fill) == \"string\" && fill.startsWith(\"#\")) {\n            this.tint = parseInt(fill.slice(1), 16)\n        }\n\n        if (this.tint !== null)\n        {\n            this.textDisplay.tint = this.tint;\n            this.textDisplay.style.fill = this.tint;\n        }\n\n        if (this.blendMode !== null)\n        {\n            this.textDisplay.blendMode = this.blendMode;\n        }\n    }\n\n    /**\n     * @deprecated\n     */\n    get value(): string\n    {\n        return this.textDisplay.text;\n    }\n    set value(val: string)\n    {\n        this.textDisplay.text = val;\n    }\n\n    get text(): string\n    {\n        return this.value;\n    }\n    set text(val: string)\n    {\n        this.value = val;\n    }\n\n    /**\n     * Get the text style. You can set properties directly on the style.\n     */\n    getTextStyle(): PIXI.TextStyle\n    {\n        return this.textDisplay.style;\n    }\n\n    /**\n     * Set the text style directly\n     *\n     * @param textStyle\n     * @example\n     * textWidget.setTextStyle({\n     *     fontFamily: 'Roboto',\n     *     fontSize: 14\n     * })\n     */\n    setTextStyle(textStyle: PIXI.TextStyle): this\n    {\n        this.textDisplay.style = textStyle;\n\n        return this;\n    }\n\n    protected onStyleChange(style: Style): void\n    {\n        super.onStyleChange(style);\n\n        const styleData = style.getProperties(...TEXT_STYLE_PROPERTIES);\n        const textStyle = this.textDisplay.style;\n\n        TEXT_STYLE_PROPERTIES.forEach((propName: string) =>\n        {\n            if (styleData[propName] !== undefined)\n            {\n                textStyle[propName] = styleData[propName];\n            }\n        });\n    }\n}\n","import { ClickManager } from './event/ClickManager';\nimport { FocusableWidget, IFocusableOptions } from './FocusableWidget';\nimport { TextWidget } from './TextWidget';\nimport * as PIXI from 'pixi.js';\nimport { LayoutOptions, FastLayoutOptions } from './layout-options';\nimport { Style } from './Style';\n\n/**\n * @memberof PUXI\n * @interface\n * @extends PUXI.IFocusableOptions\n * @property {PUXI.TextWidget | string} text\n */\nexport interface IButtonOptions extends IFocusableOptions\n{\n    background?: PIXI.Container;\n    text?: TextWidget | string;\n    tabIndex?: number;\n    tabGroup?: any;\n}\n\n/**\n * Button that can be clicked.\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.FocusableWidget\n */\nexport class Button extends FocusableWidget\n{\n    isHover: boolean;\n\n    protected textWidget: TextWidget;\n\n    click: () => void;\n    /**\n     * @param [options.background}] {(PIXI.UI.SliceSprite|PIXI.UI.Sprite)} will be used as background for Button\n     * @param [options.text=null] {PIXI.UI.Text} optional text\n     * @param [options.tabIndex=0] {Number} input tab index\n     * @param [options.tabGroup=0] {Number|String} input tab group\n     * @param [options.width=options.background.width] {Number|String} width\n     * @param [options.height=options.background.height] {Number|String} height\n     */\n    constructor(options: IButtonOptions)\n    {\n        super(options);\n\n        this.isHover = false;\n\n        if (typeof options.text === 'string')\n        {\n            options.text = new TextWidget(options.text, new PIXI.TextStyle());\n        }\n\n        this.textWidget = options.text.setLayoutOptions(\n            new FastLayoutOptions({\n                width: LayoutOptions.WRAP_CONTENT,\n                height: LayoutOptions.WRAP_CONTENT,\n                x: 0.5,\n                y: 0.5,\n                anchor: FastLayoutOptions.CENTER_ANCHOR,\n            }),\n        ) as TextWidget;\n\n        if (this.textWidget)\n        {\n            this.addChild(this.textWidget);\n        }\n\n        this.contentContainer.buttonMode = true;\n    }\n\n    onClick(e: PIXI.InteractionEvent): void\n    {\n        super.onClick(e);\n\n        this.emit('click', e);\n    }\n\n    onDoubleClick(e: PIXI.InteractionEvent): void\n    {\n        super.onDoubleClick(e);\n\n        this.emit('doubleclick', e);\n    }\n\n    update(): void\n    {\n        super.update();\n        // No update needed\n    }\n\n    initialize(): void\n    {\n        super.initialize();\n\n        this.insetContainer.interactiveChildren = false;\n        // lazy to make sure all children is initialized (trying to get the bedst hitArea possible)\n    }\n\n    /**\n     * Label for this button.\n     * @member {string}\n     */\n    get value(): string\n    {\n        if (this.textWidget)\n        {\n            return this.textWidget.text;\n        }\n\n        return '';\n    }\n    set value(val: string)\n    {\n        if (this.textWidget)\n        {\n            this.textWidget.text = val;\n        }\n    }\n\n    get text(): any\n    {\n        return this.textWidget;\n    }\n    set text(val: any)\n    {\n        this.value = val;\n    }\n\n    onStyleChange(style: Style): void\n    {\n        // eslint-disable-next-line\n        // @ts-ignore\n        this.textWidget.onStyleChange(style);\n    }\n}\n\n/*\n * Features:\n * Button, radio button (checkgroups)\n *\n * Methods:\n * blur()\n * focus()\n *\n * Properties:\n * checked: get/set Button checked\n * value: get/set Button value\n *\n * Events:\n * \"hover\"          param: [bool]isHover (hover/leave)\n * \"press\"          param: [bool]isPressed (pointerdown/pointerup)\n * \"click\"\n * \"blur\"\n * \"focus\"\n * \"focusChanged\"   param: [bool]isFocussed\n *\n */\n","class EaseBase\n{\n    getPosition(p)\n    {\n        return p;\n    }\n}\n\nexport { EaseBase };\n","import { EaseBase } from './EaseBase';\n\nfunction ExponentialEase(power, easeIn, easeOut)\n{\n    const pow = power;\n    const t = easeIn && easeOut ? 3 : easeOut ? 1 : 2;\n\n    this.getPosition = function (p)\n    {\n        let r = (t === 1) ? 1 - p : (t === 2) ? p : (p < 0.5) ? p * 2 : (1 - p) * 2;\n\n        if (pow === 1)\n        {\n            r *= r;\n        }\n        else if (pow === 2)\n        {\n            r *= r * r;\n        }\n        else if (pow === 3)\n        {\n            r *= r * r * r;\n        }\n        else if (pow === 4)\n        {\n            r *= r * r * r * r;\n        }\n\n        return (t === 1) ? 1 - r : (t === 2) ? r : (p < 0.5) ? r / 2 : 1 - (r / 2);\n    };\n}\n\nExponentialEase.prototype = Object.create(EaseBase.prototype);\nExponentialEase.prototype.constructor = ExponentialEase;\n\nexport { ExponentialEase };\n\n","import { EaseBase } from './EaseBase';\nimport { ExponentialEase } from './ExponentialEase';\n\nconst Ease = {};\n\nconst HALF_PI = Math.PI * 0.5;\n\nexport function create(fn)\n{\n    const e = Object.create(EaseBase.prototype);\n\n    e.getPosition = fn;\n\n    return e;\n}\n\nconst Linear = new EaseBase();\n\n// Liear\nEase.Linear = Linear;\n\n// Exponetial Eases\nexport function wrapEase(easeInFunction, easeOutFunction, easeInOutFunction)\n{\n    return {\n        easeIn: easeInFunction,\n        easeOut: easeOutFunction,\n        easeInOut: easeInOutFunction,\n    };\n}\n\nEase.Power0 = {\n    easeNone: Linear,\n};\n\nEase.Power1 = Ease.Quad = wrapEase(\n    new ExponentialEase(1, 1, 0),\n    new ExponentialEase(1, 0, 1),\n    new ExponentialEase(1, 1, 1));\n\nEase.Power2 = Ease.Cubic = wrapEase(\n    new ExponentialEase(2, 1, 0),\n    new ExponentialEase(2, 0, 1),\n    new ExponentialEase(2, 1, 1));\n\nEase.Power3 = Ease.Quart = wrapEase(\n    new ExponentialEase(3, 1, 0),\n    new ExponentialEase(3, 0, 1),\n    new ExponentialEase(3, 1, 1));\n\nEase.Power4 = Ease.Quint = wrapEase(\n    new ExponentialEase(4, 1, 0),\n    new ExponentialEase(4, 0, 1),\n    new ExponentialEase(4, 1, 1));\n\n// Bounce\nEase.Bounce = {\n    BounceIn: create(function (p)\n    {\n        if ((p = 1 - p) < 1 / 2.75)\n        {\n            return 1 - (7.5625 * p * p);\n        }\n        else if (p < 2 / 2.75)\n        {\n            return 1 - (7.5625 * (p -= 1.5 / 2.75) * p + 0.75);\n        }\n        else if (p < 2.5 / 2.75)\n        {\n            return 1 - (7.5625 * (p -= 2.25 / 2.75) * p + 0.9375);\n        }\n\n        return 1 - (7.5625 * (p -= 2.625 / 2.75) * p + 0.984375);\n    }),\n    BounceOut: create(function (p)\n    {\n        if (p < 1 / 2.75)\n        {\n            return 7.5625 * p * p;\n        }\n        else if (p < 2 / 2.75)\n        {\n            return 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;\n        }\n        else if (p < 2.5 / 2.75)\n        {\n            return 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;\n        }\n\n        return 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;\n    }),\n    BounceInOut: create(function (p)\n    {\n        const invert = (p < 0.5);\n\n        if (invert)\n        {\n            p = 1 - (p * 2);\n        }\n        else\n        {\n            p = (p * 2) - 1;\n        }\n        if (p < 1 / 2.75)\n        {\n            p = 7.5625 * p * p;\n        }\n        else if (p < 2 / 2.75)\n        {\n            p = 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;\n        }\n        else if (p < 2.5 / 2.75)\n        {\n            p = 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;\n        }\n        else\n        {\n            p = 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;\n        }\n\n        return invert ? (1 - p) * 0.5 : p * 0.5 + 0.5;\n    }),\n};\n\n// Circ\nEase.Circ = {\n    CircIn: create(function (p)\n    {\n        return -(Math.sqrt(1 - (p * p)) - 1);\n    }),\n    CircOut: create(function (p)\n    {\n        return Math.sqrt(1 - (p = p - 1) * p);\n    }),\n    CircInOut: create(function (p)\n    {\n        return ((p *= 2) < 1) ? -0.5 * (Math.sqrt(1 - p * p) - 1) : 0.5 * (Math.sqrt(1 - (p -= 2) * p) + 1);\n    }),\n};\n\n// Expo\nEase.Expo = {\n    ExpoIn: create(function (p)\n    {\n        return Math.pow(2, 10 * (p - 1)) - 0.001;\n    }),\n    ExpoOut: create(function (p)\n    {\n        return 1 - Math.pow(2, -10 * p);\n    }),\n    ExpoInOut: create(function (p)\n    {\n        return ((p *= 2) < 1) ? 0.5 * Math.pow(2, 10 * (p - 1)) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n    }),\n};\n\n// Sine\nEase.Sine = {\n    SineIn: create(function (p)\n    {\n        return -Math.cos(p * HALF_PI) + 1;\n    }),\n    SineOut: create(function (p)\n    {\n        return Math.sin(p * HALF_PI);\n    }),\n    SineInOut: create(function (p)\n    {\n        return -0.5 * (Math.cos(Math.PI * p) - 1);\n    }),\n};\n\nexport { Ease };\n","export const Helpers = {\n    Lerp(start: number, stop: number, amt: number): number\n    {\n        if (amt > 1) amt = 1;\n        else if (amt < 0) amt = 0;\n\n        return start + (stop - start) * amt;\n    },\n    Round(number: number, decimals: number): number\n    {\n        const pow = Math.pow(10, decimals);\n\n        return Math.round(number * pow) / pow;\n    },\n    componentToHex(c: any): string\n    {\n        const hex = c.toString(16);\n\n        return hex.length == 1 ? `0${hex}` : hex;\n    },\n    rgbToHex(r: number, g: number, b: number): string\n    {\n        return `#${this.componentToHex(r)}${this.componentToHex(g)}${this.componentToHex(b)}`;\n    },\n    rgbToNumber(r: number, g: number, b: number): number\n    {\n        return r * 65536 + g * 256 + b;\n    },\n    numberToRgb(c: number): any\n    {\n        return {\n            r: Math.floor(c / (256 * 256)),\n            g: Math.floor(c / 256) % 256,\n            b: c % 256,\n        };\n    },\n    hexToRgb(hex: any): any\n    {\n        if (hex === null)\n        {\n            hex = 0xffffff;\n        }\n        if (!isNaN(hex))\n        {\n            return this.numberToRgb(hex);\n        }\n\n        // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n        const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n\n        hex = hex.replace(shorthandRegex, function (m, r, g, b)\n        {\n            return r + r + g + g + b + b;\n        });\n\n        const result = (/^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i).exec(hex);\n\n        return result ? {\n            r: parseInt(result[1], 16),\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16),\n        } : null;\n    },\n};\n","import { Widget } from './Widget';\nimport * as PIXI from 'pixi.js';\n\n/**\n * An UI sprite object\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.Widget\n */\nexport class Sprite extends Widget\n{\n    private spriteDisplay: PIXI.Sprite;\n\n    constructor(texture: PIXI.Texture)\n    {\n        super();\n\n        this.spriteDisplay = new PIXI.Sprite(texture);\n        this.contentContainer.addChild(this.spriteDisplay);\n    }\n\n    update(): void\n    {\n        if (this.tint !== null)\n        {\n            this.spriteDisplay.tint = this.tint;\n        }\n\n        if (this.blendMode !== null)\n        {\n            this.spriteDisplay.blendMode = this.blendMode;\n        }\n    }\n\n    static fromImage(imageUrl): Sprite\n    {\n        return new Sprite(new PIXI.Texture(new PIXI.BaseTexture(imageUrl)));\n    }\n}\n\nexport type ImageWidget = Sprite;\nexport const ImageWidget = Sprite;\n","import { ILayoutManager } from './ILayoutManager';\nimport { WidgetGroup } from '../WidgetGroup';\nimport { Widget } from '../Widget';\nimport { LayoutOptions, ALIGN } from '../layout-options';\nimport { BorderLayoutOptions } from '../layout-options/BorderLayoutOptions';\nimport { MeasureMode } from '../IMeasurable';\n\nconst {\n    REGION_LEFT,\n    REGION_TOP,\n    REGION_RIGHT,\n    REGION_BOTTOM,\n    REGION_CENTER,\n} = BorderLayoutOptions;\n\nconst {\n    FILL_PARENT,\n} = LayoutOptions;\n\nconst {\n    EXACTLY,\n    AT_MOST,\n} = MeasureMode;\n\n/**\n * `PUXI.BorderLayout` is used in conjunction with `PUXI.BorderLayoutOptions`.\n *\n * This layout guarantees that the \"center\" region will always be in the center of\n * the widget-group.\n *\n * WARNING: This layout may have some bugs in edge cases that haven't been reported.\n *\n * @memberof PUXI\n * @class\n * @implements PUXI.ILayoutManager\n */\nexport class BorderLayout implements ILayoutManager\n{\n    protected host: WidgetGroup;\n\n    protected leftWidgets: Widget[];\n    protected topWidgets: Widget[];\n    protected rightWidgets: Widget[];\n    protected bottomWidgets: Widget[];\n    protected centerWidgets: Widget[];\n\n    protected measuredLeftWidth: number;\n    protected measuredRightWidth: number;\n    protected measuredCenterWidth: number;\n    protected measuredWidth: number;\n\n    protected measuredTopHeight: number;\n    protected measuredBottomHeight: number;\n    protected measuredCenterHeight: number;\n    protected measuredHeight: number;\n\n    constructor()\n    {\n        this.leftWidgets = [];\n        this.topWidgets = [];\n        this.rightWidgets = [];\n        this.bottomWidgets = [];\n        this.centerWidgets = [];\n    }\n\n    onAttach(host: WidgetGroup): void\n    {\n        this.host = host;\n    }\n\n    onDetach(): void\n    {\n        this.host = null;\n        this.clearMeasureCache();\n        this.clearRegions();\n    }\n\n    onLayout(): void\n    {\n        this.layoutChildren(\n            this.leftWidgets,\n            0,\n            this.measuredTopHeight,\n            this.measuredLeftWidth,\n            this.measuredCenterHeight);\n        this.layoutChildren(this.topWidgets, 0, 0, this.measuredWidth, this.measuredTopHeight);\n        this.layoutChildren(\n            this.rightWidgets,\n            this.measuredWidth - this.measuredRightWidth,\n            this.measuredTopHeight,\n            this.measuredRightWidth,\n            this.measuredCenterHeight,\n        );\n        this.layoutChildren(\n            this.bottomWidgets,\n            0,\n            this.measuredTopHeight + this.measuredCenterHeight,\n            this.measuredWidth,\n            this.measuredBottomHeight,\n        );\n        this.layoutChildren(\n            this.centerWidgets,\n            this.measuredLeftWidth,\n            this.measuredTopHeight,\n            this.measuredCenterWidth,\n            this.measuredCenterHeight,\n        );\n    }\n\n    layoutChildren(\n        widgets: Widget[],\n        regionX: number,\n        regionY: number,\n        regionWidth: number,\n        regionHeight: number,\n    ): void\n    {\n        for (let i = 0, j = widgets.length; i < j; i++)\n        {\n            const widget = widgets[i];\n\n            let x = 0;\n            let y = 0;\n\n            switch ((widget.layoutOptions as BorderLayoutOptions)?.horizontalAlign)\n            {\n                case ALIGN.CENTER: x = (regionWidth - widget.getMeasuredWidth()) / 2; break;\n                case ALIGN.RIGHT: x = regionWidth - widget.getMeasuredWidth(); break;\n                default: x = 0; break;\n            }\n\n            switch ((widget.layoutOptions as BorderLayoutOptions)?.verticalAlign)\n            {\n                case ALIGN.CENTER: y = (regionHeight - widget.getMeasuredHeight()) / 2; break;\n                case ALIGN.BOTTOM: y = regionHeight - widget.getMeasuredHeight(); break;\n                default: y = 0; break;\n            }\n\n            x += regionX;\n            y += regionY;\n\n            widget.layout(x, y, x + widget.getMeasuredWidth(), y + widget.getMeasuredHeight(), true);\n        }\n    }\n\n    /**\n     * @param {number} maxWidth\n     * @param {number} maxHeight\n     * @param {PUXI.MeasureMode} widthMode\n     * @param {PUXI.MeasureMode} heightMode\n     * @override\n     */\n    onMeasure(maxWidth: number, maxHeight: number, widthMode: MeasureMode, heightMode: MeasureMode): void\n    {\n        this.indexRegions();\n        this.clearMeasureCache();\n\n        // Children can be aligned inside region if smaller\n        const childWidthMode = widthMode === MeasureMode.EXACTLY ? MeasureMode.AT_MOST : widthMode;\n        const childHeightMode = heightMode === MeasureMode.EXACTLY ? MeasureMode.AT_MOST : widthMode;\n\n        // Measure top, bottom, and center. The max. of each row's width will be our \"reference\".\n        let [tw, th, , thmin] = this.measureChildren(// eslint-disable-line prefer-const\n            this.topWidgets,\n            maxWidth,\n            maxHeight,\n            childWidthMode, childHeightMode,\n        );\n        let [bw, bh,, bhmin] = this.measureChildren(// eslint-disable-line prefer-const\n            this.bottomWidgets,\n            maxWidth,\n            maxHeight,\n            childWidthMode, childHeightMode,\n        );\n        let [cw, ch, cwmin, chmin] = this.measureChildren(// eslint-disable-line prefer-const\n            this.centerWidgets,\n            maxWidth,\n            maxHeight,\n            childWidthMode,\n            heightMode);\n\n        // Measure left & right regions. Their heights will equal center's height.\n        let [lw, , lwmin] = this.measureChildren(// eslint-disable-line prefer-const\n            this.leftWidgets,\n            maxWidth,\n            ch,\n            childWidthMode, MeasureMode.AT_MOST);\n        let [rw, , rwmin] = this.measureChildren(// eslint-disable-line prefer-const\n            this.rightWidgets,\n            maxWidth,\n            ch,\n            childWidthMode, MeasureMode.AT_MOST);\n\n        // Check if total width/height is greater than our limit. If so, then downscale\n        // each row's height or each column's (in middle row) width.\n\n        const middleRowWidth = lw + rw + cw;\n        const netWidth = Math.max(tw, bw, middleRowWidth);\n        const netHeight = th + bh + ch;\n\n        // Resolve our limits.\n        if (widthMode === MeasureMode.EXACTLY)\n        {\n            this.measuredWidth = maxWidth;\n        }\n        else if (widthMode === MeasureMode.AT_MOST)\n        {\n            this.measuredWidth = Math.min(netWidth, maxWidth);\n        }\n        else\n        {\n            this.measuredWidth = netWidth;\n        }\n\n        if (heightMode === MeasureMode.EXACTLY)\n        {\n            this.measuredHeight = maxHeight;\n        }\n        else if (heightMode === MeasureMode.AT_MOST)\n        {\n            this.measuredHeight = Math.min(netHeight, maxHeight);\n        }\n        else\n        {\n            this.measuredHeight = netHeight;\n        }\n\n        tw = this.measuredWidth;\n        bw = this.measuredWidth;\n\n        if (netHeight > this.measuredHeight)\n        {\n            const hmin = (thmin + chmin + bhmin);\n\n            // Redistribute heights minus min-heights.\n            if (hmin < this.measuredHeight)\n            {\n                const downscale = (this.measuredHeight - hmin) / (netHeight - hmin);\n\n                th = thmin + ((th - thmin) * downscale);\n                bh = bhmin + ((bh - bhmin) * downscale);\n                ch = chmin + ((ch - chmin) * downscale);\n            }\n            // Redistribute full heights.\n            else\n            {\n                const downscale = this.measuredHeight / netHeight;\n\n                th *= downscale;\n                bh *= downscale;\n                ch *= downscale;\n            }\n        }\n\n        if (netWidth > this.measuredWidth)\n        {\n            const wmin = lwmin + cwmin + rwmin;\n\n            // Redistribute widths minus min. widths\n            if (wmin < this.measuredWidth)\n            {\n                const downscale = (this.measuredWidth - wmin) / (netWidth - wmin);\n\n                lw = lwmin + ((lw - lwmin) * downscale);\n                cw = cwmin + ((cw - cwmin) * downscale);\n                rw = rwmin + ((rw - rwmin) * downscale);\n            }\n            // Redistribute full widths\n            else\n            {\n                const downscale = this.measuredWidth / netWidth;\n\n                lw *= downscale;\n                cw *= downscale;\n                rw *= downscale;\n            }\n        }\n\n        // Useful to know!\n        this.measuredLeftWidth = lw;\n        this.measuredRightWidth = rw;\n        this.measuredCenterWidth = cw;\n        this.measuredTopHeight = th;\n        this.measuredBottomHeight = bh;\n        this.measuredCenterHeight = ch;\n\n        this.fitChildren(this.leftWidgets, this.measuredLeftWidth, this.measuredCenterHeight);\n        this.fitChildren(this.topWidgets, this.measuredWidth, this.measuredTopHeight);\n        this.fitChildren(this.rightWidgets, this.measuredRightWidth, this.measuredCenterHeight);\n        this.fitChildren(this.bottomWidgets, this.measuredWidth, this.measuredBottomHeight);\n        this.fitChildren(this.centerWidgets, this.measuredCenterWidth, this.measuredCenterHeight);\n    }\n\n    /**\n     * This measures the list of widgets given the constraints. The max width and\n     * height amongst the children is returned.\n     *\n     * @param {PUXI.Widget[]} list\n     * @param {number} maxWidth\n     * @param {number} maxHeight\n     * @param {PUXI.MeasureMode} widthMode\n     * @param {PUXI.MeasureMode} heightMode\n     * @returns {number[]} - [width, height, widthFixedLowerBound, heightFixedLowerBound] -\n     *    the max. width and height amongst children. Also, the minimum required width/height\n     *    for the region (as defined in layout-options).\n     */\n    protected measureChildren(\n        list: Widget[],\n        maxWidth: number,\n        maxHeight: number,\n        widthMode: MeasureMode,\n        heightMode: MeasureMode,\n    ): number[]\n    {\n        let width = 0;\n        let height = 0;\n        let widthFixedLowerBound = 0;\n        let heightFixedLowerBound = 0;\n\n        for (let i = 0, j = list.length; i < j; i++)\n        {\n            const widget = list[i];\n            const lopt = widget.layoutOptions || LayoutOptions.DEFAULT;\n\n            let w = maxWidth;\n            let h = maxHeight;\n            let wmd = widthMode;\n            let hmd = heightMode;\n\n            if (lopt.width <= LayoutOptions.MAX_DIMEN)\n            {\n                w = lopt.width;\n                wmd = EXACTLY;\n\n                widthFixedLowerBound = Math.max(widthFixedLowerBound, w);\n            }\n            if (lopt.height <= LayoutOptions.MAX_DIMEN)\n            {\n                h = lopt.height;\n                hmd = EXACTLY;\n\n                heightFixedLowerBound = Math.max(heightFixedLowerBound, h);\n            }\n\n            widget.measure(w, h, wmd, hmd);\n\n            width = Math.max(width, widget.getMeasuredWidth());\n            height = Math.max(height, widget.getMeasuredHeight());\n        }\n\n        return [width, height, widthFixedLowerBound, heightFixedLowerBound];\n    }\n\n    /**\n     * Ensures all widgets in the list measured their dimensions below the region\n     * width & height. Widgets that are too large are remeasured in the those\n     * limits (using `MeasureMode.AT_MOST`).\n     *\n     * This will handle widgets that have \"FILL_PARENT\" width or height.\n     *\n     * @param {PUXI.Widget[]} list\n     * @param {number} measuredRegionWidth\n     * @param {number} measuredRegionHeight\n     */\n    protected fitChildren(\n        list: Widget[],\n        measuredRegionWidth: number,\n        measuredRegionHeight: number,\n    ): void\n    {\n        for (let i = 0, j = list.length; i < j; i++)\n        {\n            const widget = list[i];\n\n            if (widget.getMeasuredWidth() <= measuredRegionWidth\n                && widget.getMeasuredHeight() <= measuredRegionHeight\n                && widget.getMeasuredWidth() > 0\n                && widget.getMeasuredHeight() > 0\n                && widget.layoutOptions?.width !== FILL_PARENT\n                && widget.layoutOptions?.height !== FILL_PARENT)\n            {\n                continue;\n            }\n\n            if (measuredRegionWidth > 0 && measuredRegionHeight > 0)\n            {\n                const wm = widget.layoutOptions?.width === FILL_PARENT ? EXACTLY : AT_MOST;\n                const hm = widget.layoutOptions?.height === FILL_PARENT ? EXACTLY : AT_MOST;\n\n                widget.measure(measuredRegionWidth, measuredRegionHeight, wm, hm);\n            }\n        }\n    }\n\n    /**\n     * Indexes the list of left, top, right, bottom, and center widget lists.\n     */\n    protected indexRegions(): void\n    {\n        this.clearRegions();\n        const { widgetChildren: children } = this.host;\n\n        for (let i = 0, j = children.length; i < j; i++)\n        {\n            const widget = children[i];\n            const lopt = (widget.layoutOptions || LayoutOptions.DEFAULT) as BorderLayoutOptions;\n\n            const region = lopt.region || REGION_CENTER;\n\n            switch (region)\n            {\n                case REGION_LEFT: this.leftWidgets.push(widget); break;\n                case REGION_TOP: this.topWidgets.push(widget); break;\n                case REGION_RIGHT: this.rightWidgets.push(widget); break;\n                case REGION_BOTTOM: this.bottomWidgets.push(widget); break;\n                default: this.centerWidgets.push(widget);\n            }\n        }\n    }\n\n    /**\n     * Clears the left, top, right, bottom, and center widget lists.\n     */\n    protected clearRegions(): void\n    {\n        this.leftWidgets.length = 0;\n        this.topWidgets.length = 0;\n        this.rightWidgets.length = 0;\n        this.bottomWidgets.length = 0;\n    }\n\n    /**\n     * Zeros the measured dimensions.\n     */\n    protected clearMeasureCache(): void\n    {\n        this.measuredLeftWidth = 0;\n        this.measuredRightWidth = 0;\n        this.measuredCenterWidth = 0;\n        this.measuredTopHeight = 0;\n        this.measuredBottomHeight = 0;\n        this.measuredCenterHeight = 0;\n    }\n\n    getMeasuredWidth(): number\n    {\n        return this.measuredWidth;\n    }\n\n    getMeasuredHeight(): number\n    {\n        return this.measuredHeight;\n    }\n}\n","import { ILayoutManager } from './ILayoutManager';\nimport { WidgetGroup } from '../WidgetGroup';\nimport { MeasureMode } from '../IMeasurable';\nimport { LayoutOptions } from '../layout-options';\n\ntype Gravity = 'left' | 'center' | 'right' | 'top' | 'middle' | 'bottom';\n\nexport class LinearLayout implements ILayoutManager\n{\n    private host: WidgetGroup;\n    private orientation: 'vertical' | 'horizontal';\n    private gravity: Gravity;\n    private measuredWidth: number;\n    private measuredHeight: number;\n\n    constructor(orientation: 'vertical' | 'horizontal' = 'vertical', gravity: Gravity = 'center')\n    {\n        this.orientation = orientation;\n        this.gravity = gravity;\n    }\n\n    onAttach(host: WidgetGroup): void\n    {\n        this.host = host;\n    }\n\n    onDetach(): void\n    {\n        this.host = null;\n    }\n\n    onLayout(): void\n    {\n        let position = 0;\n        const children = this.host.widgetChildren;\n        const breadth = this.orientation === 'vertical'\n            ? this.measuredWidth\n            : this.measuredHeight;\n\n        for (let i = 0, j = children.length; i < j; i++)\n        {\n            const widget = children[i];\n\n            // along axis\n            const u = this.orientation === 'vertical'\n                ? widget.getMeasuredWidth()\n                : widget.getMeasuredHeight();\n            const v = this.orientation === 'vertical'\n                ? widget.getMeasuredHeight()\n                : widget.getMeasuredWidth();\n\n            let p = 0;\n\n            if (u < breadth)\n            {\n                switch (this.gravity)\n                {\n                    case 'center':\n                    case 'middle':\n                        p = (breadth - u) / 2;\n                        break;\n                    case 'right':\n                    case 'bottom':\n                        p = breadth - u;\n                        break;\n                }\n            }\n\n            if (this.orientation === 'vertical')\n            {\n                widget.layout(p, position, p + u, position + v);\n            }\n            else\n            {\n                widget.layout(position, p, position + v, p + u);\n            }\n\n            position += v;\n        }\n    }\n\n    onMeasure(widthLimit: number, heightLimit: number, widthMode: MeasureMode, heightMode: MeasureMode): void\n    {\n        const children = this.host.widgetChildren;\n        const baseWidthMode = widthMode === MeasureMode.EXACTLY ? MeasureMode.AT_MOST : widthMode;\n        const baseHeightMode = heightMode === MeasureMode.EXACTLY ? MeasureMode.AT_MOST : heightMode;\n\n        let length = 0;\n        let breadth = 0;\n\n        for (let i = 0, j = children.length; i < j; i++)\n        {\n            const widget = children[i];\n            const lopt = (widget.layoutOptions || LayoutOptions.DEFAULT);\n\n            const widgetWidthLimit = lopt.isWidthPredefined ? lopt.width : widthLimit;\n            const widgetHeightLimit = lopt.isHeightPredefined ? lopt.height : heightLimit;\n            const widgetWidthMode = lopt.isWidthPredefined ? MeasureMode.EXACTLY : baseWidthMode;\n            const widgetHeightMode = lopt.isHeightPredefined ? MeasureMode.EXACTLY : baseHeightMode;\n\n            widget.measure(widgetWidthLimit, widgetHeightLimit, widgetWidthMode, widgetHeightMode);\n\n            if (this.orientation === 'vertical')\n            {\n                breadth = Math.max(breadth, widget.getMeasuredWidth());\n                length += widget.getMeasuredHeight();\n            }\n            else\n            {\n                breadth = Math.max(breadth, widget.getMeasuredHeight());\n                length += widget.getMeasuredWidth();\n            }\n        }\n\n        if (this.orientation === 'vertical')\n        {\n            this.measuredWidth = breadth;\n            this.measuredHeight = length;\n        }\n        else\n        {\n            this.measuredWidth = length;\n            this.measuredHeight = breadth;\n        }\n    }\n\n    getMeasuredWidth(): number\n    {\n        return this.measuredWidth;\n    }\n\n    getMeasuredHeight(): number\n    {\n        return this.measuredHeight;\n    }\n}\n","import { Widget } from './Widget';\nimport { DragManager } from './event/DragManager';\nimport { Tween } from './Tween';\nimport { Ease } from './Ease/Ease';\nimport { Helpers } from './Helpers';\nimport { Sprite } from './Sprite';\nimport * as PIXI from 'pixi.js';\nimport { MeasureMode } from './IMeasurable';\n\nexport interface ISliderOptions\n{\n    track?: PIXI.Container | Widget;\n    handle?: PIXI.Container | Widget;\n    fill?: Sprite;\n    orientation?: number;\n    value?: number;\n    minValue?: number;\n    maxValue?: number;\n    decimals?: number;\n    onValueChange?: () => void;\n    onValueChanging?: () => void;\n}\n\n/**\n * @memberof PUXI\n * @interface ISliderOptions\n * @property {PIXI.Container}[track]\n * @property {PIXI.Container}[handle]\n */\n\n/**\n * These options are used to configure a `PUXI.Slider`.\n *\n * @memberof PUXI\n * @interface ISliderOptions\n * @property {PIXI.Container}[track]\n * @property {PIXI.Container}[fill]\n * @property {boolean}[vertical]\n * @property {number}[value]\n * @property {number}[minValue]\n * @property {number}[maxValue]\n * @property {number}[decimals]\n * @property {Function}[onValueChange]\n * @property {Function}[onValueChanging]\n */\n\n/**\n * A slider is a form of input to set a variable to a value in a continuous\n * range. It cannot have its own children.\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.Widget\n */\nexport class Slider extends Widget\n{\n    protected _disabled: boolean;\n\n    track: Widget;\n    handle: Widget;\n    fill: Sprite;\n\n    public readonly orientation: number;\n\n    protected percentValue: number;\n    protected _minValue: number;\n    protected _maxValue: number;\n\n    private _localCursor: PIXI.Point;\n\n    decimals: number;\n    vertical: boolean;\n\n    _lastChange: number;\n    _lastChanging: number;\n\n    onValueChange: (n: number) => void;\n    onValueChanging: (n: number) => void;\n\n    /**\n     * @param options {Object} Slider settings\n     * @param options.track {(PIXI.UI.SliceSprite|PIXI.UI.Sprite)}  Any type of UIOBject, will be used for the slider track\n     * @param options.handle {(PIXI.UI.SliceSprite|PIXI.UI.Sprite)} will be used as slider handle\n     * @param [options.fill=null] {(PIXI.UI.SliceSprite|PIXI.UI.Sprite)} will be used for slider fill\n     * @param [options.vertical=false] {boolean} Direction of the slider\n     * @param [options.value=0] {number} value of the slider\n     * @param [options.minValue=0] {number} minimum value\n     * @param [options.maxValue=100] {number} max value\n     * @param [options.decimals=0] {boolean} the decimal precision (use negative to round tens and hundreds)\n     * @param [options.onValueChange=null] {callback} Callback when the value has changed\n     * @param [options.onValueChanging=null] {callback} Callback while the value is changing\n     */\n    constructor(options: ISliderOptions)\n    {\n        super();\n\n        /**\n         * The value expressed as a percentage from min. to max. This will always\n         * be between 0 and 1.\n         *\n         * The actual value is: `this.minValue + this.percentValue * (this.maxValue - this.minValue`).\n         *\n         * @member {number}\n         */\n        this.percentValue = 0;\n        this._disabled = false;\n\n        this.fill = options.fill || null;\n        this.percentValue = this._minValue;\n        this._minValue = options.minValue || 0;\n        this._maxValue = options.maxValue || 100;\n        this.decimals = options.decimals || 0;\n        this.orientation = options.orientation || Slider.HORIZONTAL;\n        this.onValueChange = options.onValueChange || null;\n        this.onValueChanging = options.onValueChanging || null;\n        this.value = options.value || 50;\n\n        // set options\n        this.track = Widget.fromContent(options.track\n            || (this.orientation === Slider.HORIZONTAL\n                ? Slider.DEFAULT_HORIZONTAL_TRACK.clone()\n                : Slider.DEFAULT_VERTICAL_TRACK.clone()));\n        this.handle = Widget.fromContent(options.handle || Slider.DEFAULT_HANDLE.clone());\n\n        this.addChild(this.track, this.handle);// initialize(), update() usage\n\n        this._localCursor = new PIXI.Point();\n        this.handle.contentContainer.buttonMode = true;\n    }\n\n    initialize(): void\n    {\n        super.initialize();\n\n        let startValue = 0;\n        let trackSize;\n\n        const triggerValueChange = (): void =>\n        {\n            this.emit('change', this.value);\n\n            if (this._lastChange != this.value)\n            {\n                this._lastChange = this.value;\n\n                if (typeof this.onValueChange === 'function')\n                {\n                    this.onValueChange(this.value);\n                }\n            }\n        };\n\n        const triggerValueChanging = (): void =>\n        {\n            this.emit('changing', this.value);\n\n            if (this._lastChanging != this.value)\n            {\n                this._lastChanging = this.value;\n\n                if (typeof this.onValueChanging === 'function')\n                {\n                    this.onValueChanging(this.value);\n                }\n            }\n        };\n\n        const updatePositionToMouse = (mousePosition, soft): void =>\n        {\n            this.percentValue = this.getValueAtPhysicalPosition(mousePosition);\n            this.layoutHandle();\n            triggerValueChanging();\n        };\n\n        // Handles dragging\n        const handleDrag: DragManager = this.handle.eventBroker.dnd as DragManager;\n\n        handleDrag.onPress = (event: PIXI.interaction.InteractionEvent): void =>\n        {\n            event.stopPropagation();\n        };\n\n        handleDrag.onDragStart = (): void =>\n        {\n            startValue = this.percentValue;\n            trackSize = this.orientation === Slider.HORIZONTAL\n                ? this.track.width\n                : this.track.height;\n        };\n\n        handleDrag.onDragMove = (event, offset: PIXI.Point): void =>\n        {\n            this.percentValue = Math.max(0, Math.min(\n                1,\n                startValue + ((this.orientation === Slider.HORIZONTAL ? offset.x : offset.y) / trackSize\n                )));\n\n            triggerValueChanging();\n            this.layoutHandle();\n        };\n\n        handleDrag.onDragEnd = (): void =>\n        {\n            triggerValueChange();\n            this.layoutHandle();\n        };\n\n        // Bar pressing/dragging\n        const trackDrag: DragManager = this.track.eventBroker.dnd as DragManager;\n\n        trackDrag.onPress = (event, isPressed): void =>\n        {\n            if (isPressed)\n            {\n                updatePositionToMouse(event.data.global, true);\n            }\n\n            event.stopPropagation();\n        };\n\n        trackDrag.onDragMove = (event: PIXI.interaction.InteractionEvent): void =>\n        {\n            updatePositionToMouse(event.data.global, false);\n        };\n\n        trackDrag.onDragEnd = (): void =>\n        {\n            triggerValueChange();\n        };\n\n        this.layoutHandle();\n    }\n\n    get value(): number\n    {\n        return Helpers.Round(Helpers.Lerp(this._minValue, this._maxValue, this.percentValue), this.decimals);\n    }\n    set value(val: number)\n    {\n        if (val === this.value)\n        {\n            return;\n        }\n        if (isNaN(val))\n        {\n            throw new Error('Cannot use NaN as a value');\n        }\n\n        this.percentValue = (Math.max(this._minValue, Math.min(this._maxValue, val)) - this._minValue) / (this._maxValue - this._minValue);\n\n        if (typeof this.onValueChange === 'function')\n        {\n            this.onValueChange(this.value);\n        }\n        if (typeof this.onValueChanging === 'function')\n        {\n            this.onValueChanging(this.value);\n        }\n\n        if (this.handle && this.initialized)\n        {\n            this.layoutHandle();\n        }\n    }\n\n    get minValue(): number\n    {\n        return this._minValue;\n    }\n    set minValue(val: number)\n    {\n        this._minValue = val;\n        this.update();\n    }\n\n    get maxValue(): number\n    {\n        return this._maxValue;\n    }\n    set maxValue(val: number)\n    {\n        this._maxValue = val;\n        this.update();\n    }\n\n    get disabled(): boolean\n    {\n        return this._disabled;\n    }\n    set disabled(val: boolean)\n    {\n        if (val !== this._disabled)\n        {\n            this._disabled = val;\n            this.handle.contentContainer.buttonMode = !val;\n            this.handle.contentContainer.interactive = !val;\n            this.track.contentContainer.interactive = !val;\n        }\n    }\n\n    /**\n     * @protected\n     * @returns the amount of the freedom that handle has in physical units, i.e. pixels. This\n     *      is the width of the track minus the handle's size.\n     */\n    protected getPhysicalRange(): number\n    {\n        return this.orientation === Slider.HORIZONTAL\n            ? this.contentWidth - this.handle.getMeasuredWidth()\n            : this.contentHeight - this.handle.getMeasuredHeight();\n    }\n\n    /**\n     * @protected\n     * @param {PIXI.Point} cursor\n     * @returns the value of the slider if the handle's center were (globally)\n     *      positioned at the given point.\n     */\n    protected getValueAtPhysicalPosition(cursor: PIXI.Point): number\n    {\n        // Transform position\n        const localCursor = this.contentContainer.toLocal(cursor, null, this._localCursor, true);\n\n        let offset: number;\n        let range: number;\n\n        if (this.orientation === Slider.HORIZONTAL)\n        {\n            const handleWidth = this.handle.getMeasuredWidth();\n\n            offset = localCursor.x - this.paddingLeft - (handleWidth / 4);\n            range = this.contentWidth - handleWidth;\n        }\n        else\n        {\n            const handleHeight = this.handle.getMeasuredHeight();\n\n            offset = localCursor.y - this.paddingTop - (handleHeight / 4);\n            range = this.contentHeight - handleHeight;\n        }\n\n        return offset / range;\n    }\n\n    /**\n     * Re-positions the handle. This should be called after `_value` has been changed.\n     */\n    protected layoutHandle(): void\n    {\n        const handle = this.handle;\n\n        const handleWidth = handle.getMeasuredWidth();\n        const handleHeight = handle.getMeasuredHeight();\n        let width = this.width - this.paddingHorizontal;\n        let height = this.height - this.paddingVertical;\n\n        let handleX: number;\n        let handleY: number;\n\n        if (this.orientation === Slider.HORIZONTAL)\n        {\n            width -= handleWidth;\n\n            handleY = (height - handleHeight) / 2;\n            handleX = (width * this.percentValue);\n        }\n        else\n        {\n            height -= handleHeight;\n\n            handleX = (width - handleWidth) / 2;\n            handleY = (height * this.percentValue);\n        }\n\n        handle.layout(handleX, handleY, handleX + handleWidth, handleY + handleHeight);\n    }\n\n    /**\n     * Slider measures itself using the track's natural dimensions in its non-oriented\n     * direction. The oriented direction will be the equal the range's size times\n     * the track's resolution.\n     *\n     * @param width\n     * @param height\n     * @param widthMode\n     * @param heightMode\n     */\n    onMeasure(width: number, height: number, widthMode: number, heightMode: number): void\n    {\n        const naturalWidth = ((this.orientation === Slider.HORIZONTAL)\n            ? this._maxValue - this._minValue\n            : Math.max(this.handle.contentContainer.width, this.track.contentContainer.width))\n                + this.paddingHorizontal;\n        const naturalHeight = ((this.orientation === Slider.VERTICAL)\n            ? this._maxValue - this._minValue\n            : Math.max(this.handle.contentContainer.height, this.track.contentContainer.height))\n                + this.paddingVertical;\n\n        switch (widthMode)\n        {\n            case MeasureMode.EXACTLY:\n                this._measuredWidth = width;\n                break;\n            case MeasureMode.UNBOUNDED:\n                this._measuredWidth = naturalWidth;\n                break;\n            case MeasureMode.AT_MOST:\n                this._measuredWidth = Math.min(width, naturalWidth);\n                break;\n        }\n\n        switch (heightMode)\n        {\n            case MeasureMode.EXACTLY:\n                this._measuredHeight = height;\n                break;\n            case MeasureMode.UNBOUNDED:\n                this._measuredHeight = naturalHeight;\n                break;\n            case MeasureMode.AT_MOST:\n                this._measuredHeight = Math.min(height, naturalHeight);\n                break;\n        }\n    }\n\n    /**\n     * `Slider` lays the track to fill all of its width and height. The handle is aligned\n     * in the middle in the non-oriented direction.\n     *\n     * @param l\n     * @param t\n     * @param r\n     * @param b\n     * @param dirty\n     * @override\n     */\n    onLayout(l: number, t: number, r: number, b: number, dirty: boolean): void\n    {\n        super.onLayout(l, t, r, b, dirty);\n        const { handle, track } = this;\n\n        track.layout(0, 0, this.width - this.paddingHorizontal, this.height - this.paddingVertical);\n\n        // Layout doesn't scale the widget\n        // TODO: Create a Track widget, this won't work for custom tracks that don't wanna\n        // scale (and it looks ugly.)\n        track.insetContainer.width = track.width;\n        track.insetContainer.height = track.height;\n\n        handle.measure(this.width, this.height, MeasureMode.AT_MOST, MeasureMode.AT_MOST);\n\n        this.layoutHandle();\n    }\n\n    /**\n     * The default track for horizontally oriented sliders.\n     * @static\n     */\n    static DEFAULT_HORIZONTAL_TRACK: PIXI.Graphics = new PIXI.Graphics()\n        .beginFill(0xffffff, 1)\n        .drawRect(0, 0, 16, 16) // natural width & height = 16\n        .endFill()\n        .lineStyle(1, 0x000000, 0.7, 1, true) // draw line in middle\n        .moveTo(1, 8)\n        .lineTo(15, 8);\n\n    /**\n     * The default track for vertically oriented sliders.\n     * @static\n     */\n    static DEFAULT_VERTICAL_TRACK: PIXI.Graphics = new PIXI.Graphics()\n        .beginFill(0xffffff, 1)\n        .drawRect(0, 0, 16, 16) // natural width & height = 16\n        .endFill()\n        .lineStyle(1, 0x000000, 0.7, 1, true) // draw line in middle\n        .moveTo(8, 1)\n        .lineTo(8, 15);\n\n    /**\n     * @static\n     */\n    static DEFAULT_HANDLE: PIXI.Graphics = new PIXI.Graphics()\n        .beginFill(0x000000)\n        .drawCircle(16, 16, 8)\n        .endFill()\n        .beginFill(0x000000, 0.5)\n        .drawCircle(16, 16, 16)\n        .endFill();\n    /**\n     * Horizontal orientation\n     * @static\n     */\n    static HORIZONTAL = 0xff5;\n\n    /**\n     * Vertical orientation\n     * @static\n     */\n    static VERTICAL = 0xffe;\n}\n","﻿import { Helpers } from './Helpers';\nconst _tweenItemCache = [];\nconst _callbackItemCache = [];\nconst _tweenObjects = {};\nconst _activeTweenObjects = {};\nlet _currentId = 1;\n\nclass TweenObject<T>\n{\n    public object: T;\n    public tweens: Record<string, T>;\n    public active: boolean;\n    public onUpdate: () => void;\n\n    constructor(object: T)\n    {\n        this.object = object;\n        this.tweens = {};\n        this.active = false;\n        this.onUpdate = null;\n    }\n}\n\nclass CallbackItem\n{\n    key: string;\n    obj: any;\n    parent: any;\n    time: number;\n    callback: Function;\n    currentTime: number;\n\n    private _ready: boolean;\n\n    constructor()\n    {\n        this._ready = false;\n        this.obj = null;\n        this.parent = null;\n        this.key = '';\n        this.time = 0;\n        this.callback = null;\n        this.currentTime = 0;\n    }\n\n    remove(): void\n    {\n        this._ready = true;\n        delete this.parent.tweens[this.key];\n        if (!Object.keys(this.parent.tweens).length)\n        {\n            this.parent.active = false;\n            this.parent.onUpdate = null;\n            delete _activeTweenObjects[this.obj._tweenObjectId];\n        }\n    }\n\n    set(obj, callback, time): void\n    {\n        this.obj = obj.object;\n\n        if (!this.obj._currentCallbackID)\n        { this.obj._currentCallbackID = 1; }\n        else\n        { this.obj._currentCallbackID++; }\n\n        this.time = time;\n        this.parent = obj;\n        this.callback = callback;\n        this._ready = false;\n        this.key = `cb_${this.obj._currentCallbackID}`;\n        this.currentTime = 0;\n        if (!this.parent.active)\n        {\n            this.parent.active = true;\n            _activeTweenObjects[this.obj._tweenObjectId] = this.parent;\n        }\n    }\n\n    update(delta: number): void\n    {\n        this.currentTime += delta;\n        if (this.currentTime >= this.time)\n        {\n            this.remove();\n            this.callback.call(this.parent);\n        }\n    }\n}\n\nclass TweenItem\n{\n    key: string;\n    parent: any;\n    obj: any;\n\n    from: any;\n    to: any;\n    time: number;\n    ease: any;\n    currentTime: number;\n    t: number;\n    isColor: boolean;\n    currentColor: any;\n    surfix: any;\n\n    _ready: boolean;\n\n    constructor()\n    {\n        this._ready = false;\n        this.parent = null;\n        this.obj = null;\n        this.key = '';\n        this.from = 0;\n        this.to = 0;\n        this.time = 0;\n        this.ease = 0;\n        this.currentTime = 0;\n        this.t = 0;\n        this.isColor = false;\n    }\n\n    remove(): void\n    {\n        this._ready = true;\n        delete this.parent.tweens[this.key];\n        if (!Object.keys(this.parent.tweens).length)\n        {\n            this.parent.active = false;\n            delete _activeTweenObjects[this.obj._tweenObjectId];\n        }\n    }\n\n    set(obj: any, key: string, from: any, to: any, time: number, ease: any): void\n    {\n        this.isColor = isNaN(from) && from[0] === '#' || isNaN(to) && to[0] === '#';\n        this.parent = obj;\n        this.obj = obj.object;\n        this.key = key;\n        this.surfix = getSurfix(to);\n\n        if (this.isColor)\n        {\n            this.to = Helpers.hexToRgb(to);\n            this.from = Helpers.hexToRgb(from);\n            this.currentColor = { r: this.from.r, g: this.from.g, b: this.from.b };\n        }\n        else\n        {\n            this.to = getToValue(to);\n            this.from = getFromValue(from, to, this.obj, key);\n        }\n\n        this.time = time;\n        this.currentTime = 0;\n        this.ease = ease;\n        this._ready = false;\n\n        if (!this.parent.active)\n        {\n            this.parent.active = true;\n            _activeTweenObjects[this.obj._tweenObjectId] = this.parent;\n        }\n    }\n\n    update(delta: number): void\n    {\n        this.currentTime += delta;\n        this.t = Math.min(this.currentTime, this.time) / this.time;\n        if (this.ease)\n        { this.t = this.ease.getPosition(this.t); }\n\n        if (this.isColor)\n        {\n            this.currentColor.r = Math.round(Helpers.Lerp(this.from.r, this.to.r, this.t));\n            this.currentColor.g = Math.round(Helpers.Lerp(this.from.g, this.to.g, this.t));\n            this.currentColor.b = Math.round(Helpers.Lerp(this.from.b, this.to.b, this.t));\n            this.obj[this.key] = Helpers.rgbToNumber(this.currentColor.r, this.currentColor.g, this.currentColor.b);\n        }\n        else\n        {\n            const val = Helpers.Lerp(this.from, this.to, this.t);\n\n            this.obj[this.key] = this.surfix ? val + this.surfix : val;\n        }\n\n        if (this.currentTime >= this.time)\n        {\n            this.remove();\n        }\n    }\n}\n\nconst widthKeys = ['width', 'minWidth', 'maxWidth', 'anchorLeft', 'anchorRight', 'left', 'right', 'x'];\nconst heightKeys = ['height', 'minHeight', 'maxHeight', 'anchorTop', 'anchorBottom', 'top', 'bottom', 'y'];\n\nfunction getFromValue(from, to, obj, key): number\n{\n    // both number\n    if (!isNaN(from) && !isNaN(to))\n    { return from; }\n\n    // both percentage\n    if (isNaN(from) && isNaN(to) && from.indexOf('%') !== -1 && to.indexOf('%') !== -1)\n    { return parseFloat(from.replace('%', '')); }\n\n    // convert from to px\n    if (isNaN(from) && !isNaN(to) && from.indexOf('%') !== -1)\n    {\n        if (widthKeys.indexOf(key) !== -1)\n        { return obj.parent._width * (parseFloat(from.replace('%', '')) * 0.01); }\n        else if (heightKeys.indexOf(key) !== -1)\n        { return obj.parent._height * (parseFloat(from.replace('%', '')) * 0.01); }\n\n        return 0;\n    }\n\n    // convert from to percentage\n    if (!isNaN(from) && isNaN(to) && to.indexOf('%') !== -1)\n    {\n        if (widthKeys.indexOf(key) !== -1)\n        { return from / obj.parent._width * 100; }\n        else if (heightKeys.indexOf(key) !== -1)\n        { return from / obj.parent._height * 100; }\n\n        return 0;\n    }\n\n    return 0;\n}\n\nfunction getSurfix(to: number | string): any\n{\n    if (isNaN(to) && to.indexOf('%') !== -1)\n    { return '%'; }\n}\n\nfunction getToValue(to: number | string): any\n{\n    if (!isNaN(to))\n    { return to; }\n    if (isNaN(to) && to.indexOf('%') !== -1)\n    { return parseFloat(to.replace('%', '')); }\n}\n\nfunction getObject(obj: any): any\n{\n    if (!obj._tweenObjectId)\n    {\n        obj._tweenObjectId = _currentId;\n        _currentId++;\n    }\n    let object = _tweenObjects[obj._tweenObjectId];\n\n    if (!object)\n    {\n        object = _tweenObjects[obj._tweenObjectId] = new TweenObject(obj);\n    }\n\n    return object;\n}\n\nfunction getTweenItem(): TweenItem\n{\n    for (let i = 0; i < _tweenItemCache.length; i++)\n    {\n        if (_tweenItemCache[i]._ready)\n        { return _tweenItemCache[i]; }\n    }\n\n    const tween = new TweenItem();\n\n    _tweenItemCache.push(tween);\n\n    return tween;\n}\n\nfunction getCallbackItem(): CallbackItem\n{\n    for (let i = 0; i < _callbackItemCache.length; i++)\n    {\n        if (_callbackItemCache[i]._ready)\n        { return _callbackItemCache[i]; }\n    }\n\n    const cb = new CallbackItem();\n\n    _callbackItemCache.push(cb);\n\n    return cb;\n}\n\nexport const Tween = {\n    to(obj, time, params, ease?)\n    {\n        const object = getObject(obj);\n        let onUpdate = null;\n\n        for (const key in params)\n        {\n            if (key === 'onComplete')\n            {\n                const cb = getCallbackItem();\n\n                cb.set(object, params[key], time);\n                object.tweens[cb.key] = cb;\n                continue;\n            }\n\n            if (key === 'onUpdate')\n            {\n                onUpdate = params[key];\n                continue;\n            }\n\n            if (time)\n            {\n                const match = params[key] === obj[key];\n\n                if (typeof obj[key] === 'undefined') continue;\n\n                if (match)\n                {\n                    if (object.tweens[key]) object.tweens[key].remove();\n                }\n                else\n                {\n                    if (!object.tweens[key])\n                    { object.tweens[key] = getTweenItem(); }\n                    object.tweens[key].set(object, key, obj[key], params[key], time, ease);\n                }\n            }\n        }\n\n        if (time)\n        { object.onUpdate = onUpdate; }\n        else this.set(obj, params);\n    },\n    from(obj, time, params, ease)\n    {\n        const object = getObject(obj);\n        let onUpdate = null;\n\n        for (const key in params)\n        {\n            if (key === 'onComplete')\n            {\n                const cb = getCallbackItem();\n\n                cb.set(object, params[key], time);\n                object.tweens[cb.key] = cb;\n                continue;\n            }\n\n            if (key === 'onUpdate')\n            {\n                onUpdate = params[key];\n                continue;\n            }\n\n            if (time)\n            {\n                const match = params[key] == obj[key];\n\n                if (typeof obj[key] === 'undefined') continue;\n\n                if (match)\n                {\n                    if (object.tweens[key]) object.tweens[key].remove();\n                }\n                else\n                {\n                    if (!object.tweens[key])\n                    { object.tweens[key] = getTweenItem(); }\n                    object.tweens[key].set(object, key, params[key], obj[key], time, ease);\n                }\n            }\n        }\n\n        if (time)\n        { object.onUpdate = onUpdate; }\n        else this.set(obj, params);\n    },\n    fromTo(obj, time, paramsFrom, paramsTo, ease)\n    {\n        const object = getObject(obj);\n        let onUpdate = null;\n\n        for (const key in paramsTo)\n        {\n            if (key === 'onComplete')\n            {\n                const cb = getCallbackItem();\n\n                cb.set(object, paramsTo[key], time);\n                object.tweens[cb.key] = cb;\n                continue;\n            }\n\n            if (key === 'onUpdate')\n            {\n                onUpdate = paramsTo[key];\n                continue;\n            }\n\n            if (time)\n            {\n                const match = paramsFrom[key] == paramsTo[key];\n\n                if (typeof obj[key] === 'undefined' || typeof paramsFrom[key] === 'undefined') continue;\n\n                if (match)\n                {\n                    if (object.tweens[key]) object.tweens[key].remove();\n                    obj[key] = paramsTo[key];\n                }\n                else\n                {\n                    if (!object.tweens[key])\n                    {\n                        object.tweens[key] = getTweenItem();\n                    }\n                    object.tweens[key].set(object, key, paramsFrom[key], paramsTo[key], time, ease);\n                }\n            }\n        }\n\n        if (time)\n        { object.onUpdate = onUpdate; }\n        else this.set(obj, paramsTo);\n    },\n    set(obj, params)\n    {\n        const object = getObject(obj);\n\n        for (const key in params)\n        {\n            if (typeof obj[key] === 'undefined') continue;\n            if (object.tweens[key]) object.tweens[key].remove();\n            obj[key] = params[key];\n        }\n    },\n    _update(delta)\n    {\n        for (const id in _activeTweenObjects)\n        {\n            const object = _activeTweenObjects[id];\n\n            for (const key in object.tweens)\n            {\n                object.tweens[key].update(delta);\n            }\n            if (object.onUpdate)\n            {\n                object.onUpdate.call(object.object, delta);\n            }\n        }\n    },\n};\n","import { Slider, ISliderOptions } from './Slider';\nimport { Tween } from './Tween';\nimport { Sprite } from './Sprite';\nimport { ScrollWidget } from './ScrollWidget';\nimport * as PIXI from 'pixi.js';\n\ninterface IScrollBarOptions extends ISliderOptions\n{\n    track?: Sprite;\n    handle?: Sprite;\n    scrollingContainer: ScrollWidget;\n    orientation: number;\n    autohide?: boolean;\n}\n\n/**\n * @memberof PUXI\n * @interface IScrollBarOptions\n * @property {PUXI.Sprite} track\n * @property {PUXI.Sprite} handle\n */\n\n/**\n * An UI scrollbar to control a ScrollingContainer\n *\n * @class\n * @extends PUXI.Slider\n * @memberof PUXI\n * @param options {Object} ScrollBar settings\n * @param options.track {(PIXI.UI.SliceSprite|PIXI.UI.Sprite)}  Any type of UIOBject, will be used for the scrollbar track\n * @param options.handle {(PIXI.UI.SliceSprite|PIXI.UI.Sprite)} will be used as scrollbar handle\n * @param options.scrollingContainer {PIXI.UI.ScrollingContainer} The container to control\n * @param [options.vertical=false] {boolean} Direction of the scrollbar\n * @param [options.autohide=false] {boolean} Hides the scrollbar when not needed\n */\nexport class ScrollBar extends Slider\n{\n    scrollingContainer: ScrollWidget;\n    autohide: boolean;\n    _hidden: boolean;\n\n    constructor(options: IScrollBarOptions)\n    {\n        super({\n            track: options.track || ScrollBar.DEFAULT_TRACK.clone(),\n            handle: options.handle || ScrollBar.DEFAULT_HANDLE.clone(),\n            fill: null,\n            orientation: options.orientation,\n            minValue: 0,\n            maxValue: 1,\n        });\n\n        this.scrollingContainer = options.scrollingContainer;\n        this.autohide = options.autohide;\n        this._hidden = false;\n    }\n\n    initialize(): void\n    {\n        super.initialize();\n        this.decimals = 3; // up decimals to trigger ValueChanging more often\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this.on('changing', (): void =>\n        {\n            this.scrollingContainer.forcePctPosition(\n                this.orientation === Slider.HORIZONTAL ? 'x' : 'y',\n                this.percentValue);\n        });\n\n        this.on('change', (): void =>\n        {\n            this.scrollingContainer.setScrollPosition();\n        });\n    }\n\n    toggleHidden(hidden: boolean): void\n    {\n        if (this.autohide)\n        {\n            if (hidden && !this._hidden)\n            {\n                Tween.to(this, 0.2, { alpha: 0 });\n                this._hidden = true;\n            }\n            else if (!hidden && this._hidden)\n            {\n                Tween.to(this, 0.2, { alpha: 1 });\n                this._hidden = false;\n            }\n        }\n    }\n\n    /**\n     * @static\n     */\n    static DEFAULT_TRACK = new PIXI.Graphics()\n        .beginFill(0xffffff)\n        .drawRect(0, 0, 8, 8)\n        .endFill();\n\n    /**\n     * @static\n     */\n    static DEFAULT_HANDLE: PIXI.Graphics = new PIXI.Graphics()\n        .beginFill(0x000000)\n        .drawCircle(8, 8, 4)\n        .endFill()\n        .beginFill(0x000000, 0.5)\n        .drawCircle(8, 8, 8)\n        .endFill();\n}\n\n","import { InteractiveGroup } from './InteractiveGroup';\nimport { Helpers }  from './Helpers';\nimport { DragManager } from './event/DragManager';\nimport { ScrollManager } from './event/ScrollManager';\nimport * as PIXI from 'pixi.js';\nimport { Widget } from './Widget';\nimport { WidgetGroup } from './WidgetGroup';\nimport { BorderLayout } from './layout-manager';\nimport { ScrollBar } from './ScrollBar';\nimport { ALIGN, BorderLayoutOptions, LayoutOptions } from './layout-options';\nimport { Slider } from './Slider';\n\n/**\n * @namespace PUXI\n * @interface\n */\ninterface IScrollingContainerOptions\n{\n    scrollX?: boolean;\n    scrollY?: boolean;\n    dragScrolling?: boolean;\n    softness?: number;\n    radius?: number;\n    expandMask?: number;\n    overflowY?: number;\n    overflowX?: number;\n    scrollBars?: boolean;\n}\n\n/**\n * `ScrollWidget` masks its contents to its layout bounds and translates\n * its children when scrolling. It uses the anchor layout.\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.InteractiveGroup\n */\nexport class ScrollWidget extends InteractiveGroup\n{\n    private mask: PIXI.Graphics;\n    public readonly innerContainer: WidgetGroup;\n    private innerBounds: PIXI.Rectangle;\n\n    scrollX: boolean;\n    scrollY: boolean;\n    dragScrolling: boolean;\n    softness: number;\n    radius: number;\n    expandMask: number;\n    overflowY: number;\n    overflowX: number;\n\n    animating: boolean;\n    scrolling: boolean;\n\n    protected scrollBars: ScrollBar[];\n    protected scrollPosition: PIXI.Point;\n    protected scrollVelocity: PIXI.Point;\n    protected targetPosition: PIXI.Point;\n    protected lastPosition: PIXI.Point;\n    protected stop: boolean;\n\n    private boundCached: number;\n    private lastWidth: number;\n    private lastHeight: number;\n\n    /**\n     * @param {PUXI.IScrollingContainerOptions} options\n     * @param [options.scrollX=false] {Boolean} Enable horizontal scrolling\n     * @param [options.scrollY=false] {Boolean} Enable vertical scrolling\n     * @param [options.dragScrolling=true] {Boolean} Enable mousedrag scrolling\n     * @param [options.softness=0.5] {Number} (0-1) softness of scrolling\n     * @param [options.width=0] {Number|String} container width\n     * @param [options.height=0] {Number} container height\n     * @param [options.radius=0] {Number} corner radius of clipping mask\n     * @param [options.expandMask=0] {Number} mask expand (px)\n     * @param [options.overflowY=0] {Number} how much can be scrolled past content dimensions\n     * @param [options.overflowX=0] {Number} how much can be scrolled past content dimensions\n     */\n    constructor(options: IScrollingContainerOptions = {})\n    {\n        super();\n\n        this.mask = new PIXI.Graphics();\n        this.innerContainer = new InteractiveGroup();\n        this.innerBounds = new PIXI.Rectangle();\n        super.addChild(this.innerContainer);\n        this.contentContainer.addChild(this.mask);\n        this.contentContainer.mask = this.mask;\n\n        this.scrollX = options.scrollX !== undefined ? options.scrollX : false;\n        this.scrollY = options.scrollY !== undefined ? options.scrollY : false;\n        this.dragScrolling = options.dragScrolling !== undefined ? options.dragScrolling : true;\n        this.softness = options.softness !== undefined ? Math.max(Math.min(options.softness || 0, 1), 0) : 0.5;\n        this.radius = options.radius || 0;\n        this.expandMask = options.expandMask || 0;\n        this.overflowY = options.overflowY || 0;\n        this.overflowX = options.overflowX || 0;\n\n        this.scrollVelocity = new PIXI.Point();\n\n        /**\n         * Widget's position in a scroll.\n         * @member {PIXI.Point}\n         * @private\n         */\n        this.scrollPosition = new PIXI.Point();\n\n        /**\n         * Position that the cursor is at, i.e. our scroll \"target\".\n         * @member {PIXI.Point}\n         * @private\n         */\n        this.targetPosition = new PIXI.Point();\n        this.lastPosition = new PIXI.Point();\n\n        this.useLayout(new BorderLayout());\n\n        this.animating = false;\n        this.scrolling = false;\n        this.scrollBars = [];\n\n        if (options.scrollBars && this.scrollX)\n        {\n            const horizontalScrollBar: ScrollBar = new ScrollBar({\n                orientation: ScrollBar.HORIZONTAL,\n                scrollingContainer: this,\n                minValue: 0,\n                maxValue: 1,\n            })\n                .setLayoutOptions(\n                    new BorderLayoutOptions({\n                        width: LayoutOptions.FILL_PARENT,\n                        height: LayoutOptions.WRAP_CONTENT,\n                        region: BorderLayoutOptions.REGION_BOTTOM,\n                        horizontalAlign: ALIGN.CENTER,\n                        verticalAlign: ALIGN.BOTTOM,\n                    }),\n                )\n                .setBackground(0xff)\n                .setBackgroundAlpha(0.8) as ScrollBar;\n\n            super.addChild(horizontalScrollBar);\n            this.scrollBars.push(horizontalScrollBar);\n        }\n        if (options.scrollBars && this.scrollY)\n        {\n            const verticalScrollBar: ScrollBar = new ScrollBar({\n                orientation: ScrollBar.VERTICAL,\n                scrollingContainer: this,\n                minValue: 0,\n                maxValue: 1,\n            })\n                .setLayoutOptions(\n                    new BorderLayoutOptions({\n                        width: LayoutOptions.WRAP_CONTENT,\n                        height: LayoutOptions.FILL_PARENT,\n                        region: BorderLayoutOptions.REGION_RIGHT,\n                        horizontalAlign: ALIGN.RIGHT,\n                        verticalAlign: ALIGN.CENTER,\n                    }),\n                )\n                .setBackground(0xff)\n                .setBackgroundAlpha(0.8) as ScrollBar;\n\n            super.addChild(verticalScrollBar);\n            this.scrollBars.push(verticalScrollBar);\n        }\n\n        this.boundCached = 0;\n    }\n\n    /**\n     * Updates the mask and scroll position before rendering.\n     *\n     * @override\n     */\n    update(): void\n    {\n        super.update();\n\n        if (this.lastWidth !== this.width || this.lastHeight !== this.height)\n        {\n            const of = this.expandMask;\n\n            this.mask.clear();\n            this.mask.lineStyle(0);\n            this.mask.beginFill(0xFFFFFF, 1);\n\n            if (this.radius === 0)\n            {\n                this.mask.drawRect(-of, -of, this.width + of, this.height + of);\n            }\n            else\n            {\n                this.mask.drawRoundedRect(-of, -of, this.width + of, this.height + of, this.radius);\n            }\n\n            this.mask.endFill();\n\n            this.lastWidth = this.width;\n            this.lastHeight = this.height;\n        }\n    }\n\n    /**\n     * Adds this scrollbar. It is expected that the given scrollbar has been\n     * given proper border-layout options.\n     *\n     * @todo This only works for TOP, LEFT scrollbars as BOTTOM, RIGHT are occupied.\n     * @param {PUXI.ScrollBar} scrollBar\n     */\n    addScrollBar(scrollBar: ScrollBar): ScrollWidget\n    {\n        super.addChild(scrollBar);\n        this.scrollBars.push(scrollBar);\n\n        return this;\n    }\n\n    /**\n     * @param {PUXI.Widget[]} newChildren\n     * @returns {ScrollWidget} this widget\n     */\n    addChild(...newChildren: Widget[]): Widget\n    {\n        for (let i = 0; i < newChildren.length; i++)\n        {\n            this.innerContainer.addChild(newChildren[i]);\n        }\n\n        this.getInnerBounds(true); // make sure bounds is updated instantly when a child is added\n\n        return this;\n    }\n\n    /**\n     * Updates the scroll bar values, and should be called when scrolled.\n     */\n    updateScrollBars(): void\n    {\n        for (let i = 0, j = this.scrollBars.length; i < j; i++)\n        {\n            const scrollBar = this.scrollBars[i];\n\n            if (scrollBar.orientation === Slider.HORIZONTAL)\n            {\n                const x = this.getPercentPosition('x');\n\n                scrollBar.value = x;\n            }\n            else if (scrollBar.orientation === Slider.VERTICAL)\n            {\n                const y = this.getPercentPosition('y');\n\n                scrollBar.value = y;\n            }\n        }\n    }\n\n    getInnerBounds(force?: boolean): PIXI.Rectangle\n    {\n        // this is a temporary fix, because we cant rely on innercontainer height if the children is positioned > 0 y.\n        if (force || performance.now() - this.boundCached > 1000)\n        {\n            this.innerContainer.insetContainer.getLocalBounds(this.innerBounds);\n\n            this.innerBounds.height = this.innerBounds.y + this.innerContainer.height || 0;\n            this.innerBounds.width = this.innerBounds.x + this.innerContainer.width || 0;\n            this.boundCached = performance.now();\n        }\n\n        return this.innerBounds;\n    }\n\n    /**\n     * @override\n     */\n    initialize(): void\n    {\n        super.initialize();\n\n        if (this.scrollX || this.scrollY)\n        {\n            this.initScrolling();\n        }\n    }\n\n    private initScrolling(): void\n    {\n        const container = this.innerContainer.insetContainer;\n        const realPosition = new PIXI.Point();\n        const {\n            scrollPosition,\n            targetPosition,\n        } = this;\n\n        // Drag scroll\n        if (this.dragScrolling)\n        {\n            const drag: DragManager = this.eventBroker.dnd as DragManager;\n\n            drag.onDragStart = (e): void =>\n            {\n                if (!this.scrolling)\n                {\n                    realPosition.copyFrom(container.position);\n                    scrollPosition.copyFrom(container.position);\n                    this.scrolling = true;\n                    this.setScrollPosition();\n\n                    this.emit('scrollstart', e);\n                }\n            };\n\n            drag.onDragMove = (_, offset): void =>\n            {\n                if (this.scrollX)\n                {\n                    targetPosition.x = realPosition.x + offset.x;\n                }\n                if (this.scrollY)\n                {\n                    targetPosition.y = realPosition.y + offset.y;\n                }\n\n                this.setScrollPosition();\n            };\n\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            drag.onDragEnd = (e): void =>\n            {\n                if (this.scrolling)\n                {\n                    this.scrolling = false;\n                    this.emit('scrollend', e);\n                }\n            };\n        }\n\n        // Mouse scroll\n        const scrollSpeed = new PIXI.Point();\n        const scroll = new ScrollManager(this, true);\n\n        scroll.onMouseScroll = (e, delta: PIXI.Point): void =>\n        {\n            scrollSpeed.set(-delta.x * 0.2, -delta.y * 0.2);\n            this.setScrollPosition(scrollSpeed);\n        };\n\n        this.updateScrollBars();\n    }\n\n    /**\n     * @param {string} direction - `'x'` or `'y'`\n     * @returns {number} a value between 0 and 1 indicating how scrolling\n     *      has occured in that direction (called percent position).\n     */\n    getPercentPosition(direction: 'x' | 'y'): number\n    {\n        const bounds = this.getInnerBounds();\n        const container = this.innerContainer.insetContainer;\n\n        if (direction === 'x')\n        {\n            return container.x / (this.width - bounds.width);\n        }\n        else if (direction === 'y')\n        {\n            return container.y / (this.height - bounds.height);\n        }\n\n        return 0;\n    }\n\n    forcePctPosition = (direction: string, pct: number): void =>\n    {\n        const bounds = this.getInnerBounds();\n        const container = this.innerContainer.insetContainer;\n\n        if (this.scrollX && direction === 'x')\n        {\n            container.position[direction] = -((bounds.width - this.width) * pct);\n        }\n        if (this.scrollY && direction === 'y')\n        {\n            container.position[direction] = -((bounds.height - this.height) * pct);\n        }\n\n        this.scrollPosition[direction] = this.targetPosition[direction] = container.position[direction];\n    };\n\n    focusPosition = (pos: PIXI.Point): void =>\n    {\n        const bounds = this.getInnerBounds();\n        const container = this.innerContainer.insetContainer;\n\n        let dif;\n\n        if (this.scrollX)\n        {\n            const x = Math.max(0, (Math.min(bounds.width, pos.x)));\n\n            if (x + container.x > this.width)\n            {\n                dif = x - this.width;\n                container.x = -dif;\n            }\n            else if (x + container.x < 0)\n            {\n                dif = x + container.x;\n                container.x -= dif;\n            }\n        }\n        if (this.scrollY)\n        {\n            const y = Math.max(0, (Math.min(bounds.height, pos.y)));\n\n            if (y + container.y > this.height)\n            {\n                dif = y - this.height;\n                container.y = -dif;\n            }\n            else if (y + container.y < 0)\n            {\n                dif = y + container.y;\n                container.y -= dif;\n            }\n        }\n\n        this.lastPosition.copyFrom(container.position);\n        this.targetPosition.copyFrom(container.position);\n        this.scrollPosition.copyFrom(container.position);\n\n        this.updateScrollBars();\n    };\n\n    /**\n     * @param {PIXI.Point}[velocity]\n     */\n    setScrollPosition = (velocity?: PIXI.Point): void =>\n    {\n        if (velocity)\n        {\n            this.scrollVelocity.copyFrom(velocity);\n        }\n\n        const container = this.innerContainer.insetContainer;\n\n        if (!this.animating)\n        {\n            this.animating = true;\n            this.lastPosition.copyFrom(container.position);\n            this.targetPosition.copyFrom(container.position);\n\n            PIXI.Ticker.shared.add(this.updateScrollPosition);\n        }\n    };\n\n    /**\n     * @param {number} delta\n     * @protected\n     */\n    protected updateScrollPosition = (delta: number): void =>\n    {\n        this.stop = true;\n\n        if (this.scrollX)\n        {\n            this.updateDirection('x', delta);\n        }\n        if (this.scrollY)\n        {\n            this.updateDirection('y', delta);\n        }\n\n        if (this.stop)\n        {\n            PIXI.Ticker.shared.remove(this.updateScrollPosition);\n            this.animating = false;\n        }\n\n        this.updateScrollBars();\n    };\n\n    /**\n     * @param {'x' | 'y'} direction\n     * @param {number} delta\n     * @protected\n     */\n    protected updateDirection = (direction: string, delta: number): void =>\n    {\n        const bounds = this.getInnerBounds();\n        const {\n            scrollPosition,\n            scrollVelocity,\n            targetPosition,\n            lastPosition,\n        } = this;\n        const container = this.innerContainer.insetContainer;\n\n        let min;\n\n        if (direction === 'y')\n        {\n            min = Math.round(Math.min(0, this.height - bounds.height));\n        }\n        else\n        {\n            min = Math.round(Math.min(0, this.width - bounds.width));\n        }\n\n        if (!this.scrolling && Math.round(scrollVelocity[direction]) !== 0)\n        {\n            targetPosition[direction] += scrollVelocity[direction];\n            scrollVelocity[direction] = Helpers.Lerp(\n                scrollVelocity[direction],\n                0,\n                (5 + 2.5 / Math.max(this.softness, 0.01)) * delta);\n\n            if (targetPosition[direction] > 0)\n            {\n                targetPosition[direction] = 0;\n            }\n            else if (targetPosition[direction] < min)\n            {\n                targetPosition[direction] = min;\n            }\n        }\n\n        if (!this.scrolling\n            && Math.round(scrollVelocity[direction]) === 0\n            && (container[direction] > 0\n            || container[direction] < min))\n        {\n            const target = this.scrollPosition[direction] > 0 ? 0 : min;\n\n            scrollPosition[direction] = Helpers.Lerp(\n                scrollPosition[direction],\n                target,\n                (40 - (30 * this.softness)) * delta);\n            this.stop = false;\n        }\n        else if (this.scrolling || Math.round(scrollVelocity[direction]) !== 0)\n        {\n            if (this.scrolling)\n            {\n                scrollVelocity[direction] = this.scrollPosition[direction] - lastPosition[direction];\n                lastPosition.copyFrom(scrollPosition);\n            }\n            if (targetPosition[direction] > 0)\n            {\n                scrollVelocity[direction] = 0;\n                scrollPosition[direction] = 100 * this.softness * (1 - Math.exp(targetPosition[direction] / -200));\n            }\n            else if (targetPosition[direction] < min)\n            {\n                scrollVelocity[direction] = 0;\n                scrollPosition[direction] = min - (100 * this.softness * (1 - Math.exp((min - targetPosition[direction]) / -200)));\n            }\n            else\n            {\n                scrollPosition[direction] = targetPosition[direction];\n            }\n\n            this.stop = false;\n        }\n\n        container.position[direction] = Math.round(scrollPosition[direction]);\n    };\n\n    /**\n     * This is fired when the user starts scrolling.\n     * @event scrollstart\n     */\n\n    /**\n     * This is fired when the user stops scrolling.\n     * @event scrollend\n     */\n}\n","import { Stage } from '../Stage';\nimport { Widget } from '../Widget';\nimport * as PIXI from 'pixi.js';\n\nexport abstract class Controller<T> extends PIXI.utils.EventEmitter\n{\n    stage: Stage;\n\n    constructor(stage: Stage)\n    {\n        super();\n        this.stage = stage;\n    }\n\n    abstract in(widget: T): any;\n\n    abstract out(widget: T): any;\n}\n\n/**\n * A controller handles a stage-level state that can be held by wigets. For example,\n * `PUXI.FocusController` handles which widget is focused.\n *\n * @memberof PUXI\n * @class Controller\n */\n\n/**\n * Enables the widget to enter the controller's state.\n *\n * @memberof PUXI.Controller#\n * @method in\n * @param {PUXI.Widget} widget\n */\n\n/**\n * Disables the widget from the controller's state.\n *\n * @memberof PUXI.Controller#\n * @method out\n * @param {PUXI.Widget} widget\n */\n","import { Widget } from './Widget';\nimport * as PIXI from 'pixi.js';\nimport { MeasureMode } from './IMeasurable';\nimport { LayoutOptions, FastLayoutOptions } from './layout-options';\nimport { FocusController, Controller, CheckBoxGroupController } from './ctl';\n\n/**\n * The stage is the root node in the PUXI scene graph. It does not provide a\n * sophisticated layout model; however, it will accept constraints defined by\n * `PUXI.FastLayoutOptions` or `PUXI.LayoutOptions` in its children.\n *\n * The stage is not a `PUXI.Widget` and its dimensions are always fixed.\n *\n * @memberof PUXI\n * @class\n * @extends PIXI.Container\n */\nexport class Stage extends PIXI.Container\n{\n    __width: number;\n    __height: number;\n    minWidth: number;\n    minHeight: number;\n    initialized: boolean;\n    widgetChildren: Widget[];\n\n    stage: any;\n\n    private _checkBoxGroupCtl: CheckBoxGroupController;\n    private _focusCtl: FocusController;\n\n    protected background: PIXI.Container;\n\n    /**\n     * @param {number} width - width of the stage\n     * @param {number} height - height of the stage\n     */\n    constructor(width: number, height: number)\n    {\n        super();\n\n        this.__width = width;\n        this.__height = height;\n        this.minWidth = 0;\n        this.minHeight = 0;\n\n        this.widgetChildren = [];\n        this.interactive = true;\n        this.stage = this;\n        this.hitArea = new PIXI.Rectangle(0, 0, 0, 0);\n        this.initialized = true;\n        this.resize(width, height);\n\n        this._checkBoxGroupCtl = new Stage.CHECK_BOX_GROUP_CONTROLLER(this);\n        this._focusCtl = new Stage.FOCUS_CONTROLLER(this);\n    }\n\n    public measureAndLayout(): void\n    {\n        if (this.background)\n        {\n            this.background.width = this.width;\n            this.background.height = this.height;\n        }\n\n        for (let i = 0, j = this.widgetChildren.length; i < j; i++)\n        {\n            const widget = this.widgetChildren[i];\n            const lopt = (widget.layoutOptions || LayoutOptions.DEFAULT) as FastLayoutOptions;\n\n            const widthMeasureMode = lopt.width < LayoutOptions.MAX_DIMEN\n                ? MeasureMode.EXACTLY\n                : MeasureMode.AT_MOST;\n            const heightMeasureMode = lopt.height < LayoutOptions.MAX_DIMEN\n                ? MeasureMode.EXACTLY\n                : MeasureMode.AT_MOST;\n            const loptWidth = (Math.abs(lopt.width) < 1) ? lopt.width * this.width : lopt.width;\n            const loptHeight = (Math.abs(lopt.height) < 1) ? lopt.height * this.height : lopt.height;\n\n            widget.measure(\n                widthMeasureMode === MeasureMode.EXACTLY ? loptWidth : this.width,\n                heightMeasureMode === MeasureMode.EXACTLY ? loptHeight : this.height,\n                widthMeasureMode,\n                heightMeasureMode);\n\n            let x = lopt.x ? lopt.x : 0;\n            let y = lopt.y ? lopt.y : 0;\n\n            if (Math.abs(x) < 1)\n            {\n                x *= this.width;\n            }\n            if (Math.abs(y) < 1)\n            {\n                y *= this.height;\n            }\n\n            const anchor = lopt.anchor || FastLayoutOptions.DEFAULT_ANCHOR;\n            const l = x - (anchor.x * widget.getMeasuredWidth());\n            const t = y - (anchor.y * widget.getMeasuredHeight());\n\n            widget.layout(l, t,\n                l + widget.getMeasuredWidth(),\n                t + widget.getMeasuredHeight(),\n                true);\n        }\n    }\n\n    getBackground(): PIXI.Container\n    {\n        return this.background;\n    }\n\n    setBackground(bg: PIXI.Container): void\n    {\n        if (this.background)\n        {\n            super.removeChild(this.background);\n        }\n\n        this.background = bg;\n\n        if (bg)\n        {\n            super.addChildAt(bg, 0);\n\n            this.background.width = this.width;\n            this.background.height = this.height;\n        }\n    }\n\n    private update(widgets: Widget[]): void\n    {\n        this.emit('preupdate', this);\n\n        for (let i = 0, j = widgets.length; i < j; i++)\n        {\n            const widget = widgets[i];\n\n            widget.stage = this;\n\n            if (!widget.initialized)\n            {\n                widget.initialize();\n            }\n\n            this.update(widget.widgetChildren);\n            widget.update();\n        }\n\n        this.emit('postupdate', this);\n    }\n\n    render(renderer: PIXI.Renderer): void\n    {\n        this.update(this.widgetChildren);\n        super.render(renderer);\n    }\n\n    addChild(UIObject: Widget): void\n    {\n        const argumentLenght = arguments.length;\n\n        if (argumentLenght > 1)\n        {\n            for (let i = 0; i < argumentLenght; i++)\n            {\n                this.addChild(arguments[i]);\n            }\n        }\n        else\n        {\n            if (UIObject.parent)\n            {\n                UIObject.parent.removeChild(UIObject);\n            }\n\n            UIObject.parent = this;\n            this.widgetChildren.push(UIObject);\n            super.addChild(UIObject.insetContainer);\n            // UIObject.updatesettings(true);\n        }\n\n        this.measureAndLayout();\n    }\n\n    removeChild(UIObject: Widget): void\n    {\n        const argumentLenght = arguments.length;\n\n        if (argumentLenght > 1)\n        {\n            for (let i = 0; i < argumentLenght; i++)\n            {\n                this.removeChild(arguments[i]);\n            }\n        }\n        else\n        {\n            super.removeChild(UIObject.insetContainer);\n\n            const index = this.widgetChildren.indexOf(UIObject);\n\n            if (index !== -1)\n            {\n                this.children.splice(index, 1);\n                UIObject.parent = null;\n            }\n        }\n\n        this.measureAndLayout();\n    }\n\n    resize(width?: number, height?: number): void\n    {\n        this.width = width;\n        this.height = height;\n\n        if (this.hitArea)\n        {\n            (this.hitArea as PIXI.Rectangle).width = this.__width;\n            (this.hitArea as PIXI.Rectangle).height = this.__height;\n        }\n\n        this.measureAndLayout();\n    }\n\n    get width(): number\n    {\n        return this.__width;\n    }\n    set width(val: number)\n    {\n        if (!isNaN(val))\n        {\n            this.__width = val;\n            this.resize();\n        }\n    }\n\n    get height(): number\n    {\n        return this.__height;\n    }\n    set height(val: number)\n    {\n        if (!isNaN(val))\n        {\n            this.__height = val;\n            this.resize();\n        }\n    }\n\n    /**\n     * The check box group controller for check boxes in this stage.\n     *\n     * @member {PUXI.CheckBoxGroupController}\n     */\n    get checkBoxGroupController(): CheckBoxGroupController\n    {\n        return this._checkBoxGroupCtl;\n    }\n\n    /**\n     * The focus controller for widgets in this stage. You can use this to bring a\n     * widget into focus.\n     *\n     * @member {PUXI.FocusController}\n     */\n    get focusController(): FocusController\n    {\n        return this._focusCtl;\n    }\n\n    /**\n     * Use this to override which class is used for the check box group controller. It\n     * should extend from `PUXI.CheckBoxGroupController`.\n     *\n     * @static\n     */\n    static CHECK_BOX_GROUP_CONTROLLER: typeof CheckBoxGroupController = CheckBoxGroupController;\n\n    /**\n     * Use this to override which class is used for the focus controller. It should\n     * extend from `PUXI.FocusController`.\n     *\n     * @static\n     */\n    static FOCUS_CONTROLLER: typeof FocusController = FocusController;\n}\n","import { Controller } from './Controller';\nimport { CheckBox } from '../CheckBox';\nimport { Stage } from '../Stage';\n\nexport type CheckGroup = string;\n\n/**\n * @memberof PUXI\n * @typedef {string} CheckGroup\n */\n\ninterface CBGroup\n{\n    checks: Array<CheckBox>;\n    selected: CheckBox;\n}\n\n/**\n * Check boxes use this controller to deselect other checkboxes in the group when\n * they are selected.\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.Controller\n */\nexport class CheckBoxGroupController extends Controller<CheckBox>\n{\n    protected checkGroups: Map<CheckGroup, CBGroup>;\n\n    constructor(stage: Stage)\n    {\n        super(stage);\n        this.checkGroups = new Map<CheckGroup, CBGroup>();\n    }\n\n    /**\n     * @param {PUXI.CheckBox} widget\n     * @param {PUXI.CheckGroup} checkGroup\n     * @override\n     */\n    in(widget: CheckBox, checkGroup?: CheckGroup): void\n    {\n        if (!checkGroup)\n        {\n            throw new Error('Default check groups don\\'t exist!');\n        }\n\n        const group = this.checkGroups.get(checkGroup) || this.initGroup(checkGroup);\n\n        group.checks.push(widget);\n        widget.checkGroup = checkGroup;\n    }\n\n    /**\n     * @override\n     */\n    out(widget: CheckBox): void\n    {\n        const group = this.checkGroups.get(widget.checkGroup);\n        const i = group.checks.indexOf(widget);\n\n        if (i > 0)\n        {\n            group.checks.splice(i, 1);\n        }\n\n        widget.checkGroup = null;\n    }\n\n    /**\n     * Called when a checkbox is selected. Do not call from outside.\n     *\n     * @param {CheckBox} widget\n     */\n    notifyCheck(widget: CheckBox): void\n    {\n        const group = this.checkGroups.get(widget.checkGroup);\n\n        if (!group)\n        {\n            return;\n        }\n\n        const { checks } = group;\n\n        for (let i = 0, j = checks.length; i < j; i++)\n        {\n            if (checks[i] !== widget)\n            {\n                checks[i].checked = false;\n            }\n        }\n\n        group.selected = widget;\n    }\n\n    /**\n     * @param {PUXI.CheckGroup} group\n     * @returns {CheckBox} the selected checkbox in the group\n     */\n    getSelected(group: CheckGroup): CheckBox\n    {\n        return this.checkGroups.get(group)?.selected;\n    }\n\n    /**\n     * Ensures that the check group exists in `this.checkGroups`.\n     *\n     * @param {PUXI.CheckGroup} id\n     * @protected\n     */\n    protected initGroup(id: CheckGroup): CBGroup\n    {\n        const cgroup: CBGroup = {\n            checks: [],\n            selected: null,\n        };\n\n        this.checkGroups.set(id, cgroup);\n\n        return cgroup;\n    }\n}\n","import { Controller } from './Controller';\nimport { Stage } from '../Stage';\nimport { FocusableWidget } from '../FocusableWidget';\n\nexport type TabGroup = string;\n\n/**\n * Pressing tab on a focused widget will make the next widget its tab group\n * focused. If no tab group is specified for a focusable widget, then it\n * has the `'default'` tab group.\n *\n * @memberof PUXI\n * @typedef {string} TabGroup\n */\n\n/**\n * @memberof PUXI\n * @class\n * @extends PUXI.Controller\n */\nexport class FocusController extends Controller<FocusableWidget>\n{\n    stage: Stage;\n\n    protected tabGroups: Map<TabGroup, FocusableWidget[]>;\n    protected currentItem: FocusableWidget;\n\n    useTab: boolean;\n    useForward: boolean;\n    useBack: boolean;\n\n    constructor(stage: Stage)\n    {\n        super(stage);\n\n        /**\n         * Map of tab-group names to the widgets in those groups.\n         * @member {Map<PUXI.TabGroup, PUXI.FocusableWidget[]>}\n         * @protected\n         */\n        this.tabGroups = new Map<TabGroup, FocusableWidget[]>();\n\n        /**\n         * Whether to enable tab-based focus movement.\n         * @member {boolean}\n         */\n        this.useTab = true;\n\n        /**\n         * Whether to enable forward arrow key focus movement.\n         * @member {boolean}\n         */\n        this.useForward = true;\n\n        /**\n         * Whether to enable back arrow key focus movement.\n         * @member {boolean}\n         */\n        this.useBack = true;\n    }\n\n    /**\n     * Adds the (focusable) widget to the tab group so that pressing tab repeatedly\n     * will eventually bring it into focus.\n     *\n     * @param {PUXI.FocusableWidget} widget - the widget to add\n     * @param {number}[tabIndex=0] - unique index for the widget in tab group used for ordering\n     * @param {PUXI.TabGroup}[tabGroup='default'] - tab group name\n     */\n    in(widget: FocusableWidget, tabIndex = 0, tabGroup = 'default'): void\n    {\n        let widgets = this.tabGroups.get(tabGroup);\n\n        if (!widgets)\n        {\n            widgets = [];\n            this.tabGroups.set(tabGroup, widgets);\n        }\n\n        const i = widgets.indexOf(widget);\n\n        // Push widget into tab group list if not present already.\n        if (i === -1)\n        {\n            widget.tabIndex = tabIndex !== undefined ? tabIndex : -1;\n            widget.tabGroup = tabGroup;\n\n            widgets.push(widget);\n            widgets.sort((a, b) => a.tabIndex - b.tabIndex);\n        }\n    }\n\n    /**\n     * @param {PUXI.FocusableWidget} widget\n     * @override\n     */\n    out(widget: FocusableWidget): void\n    {\n        const widgets = this.tabGroups.get(widget.tabGroup);\n\n        if (!widgets)\n        {\n            return;\n        }\n\n        const i = widgets.indexOf(widget);\n\n        if (i !== -1)\n        {\n            // Widgets should already be sorted & so deleting should not unsort it.\n            widgets.splice(i, 1);\n        }\n    }\n\n    /**\n     * Called when a widget comes into focus. Do not call this yourself.\n     *\n     * @param {FocusableWidget} widget\n     */\n    notifyFocus(widget: FocusableWidget): void\n    {\n        const lastItem = this.currentItem;\n\n        if (lastItem)\n        {\n            lastItem.blur();\n            this.emit('blur', lastItem);\n        }\n\n        this.currentItem = widget;\n\n        this.emit('focus', widget);\n        this.emit('focusChanged', widget, lastItem);\n    }\n\n    /**\n     * Clears the currently focused item without blurring it. It is called\n     * when a widget goes out of focus.\n     */\n    notifyBlur(): void\n    {\n        this.emit('blur', this.currentItem);\n        this.emit('focusChanged', null, this.currentItem);\n\n        this.currentItem = null;\n    }\n\n    /**\n     * Brings the widget into focus.\n     *\n     * @param {FocusableWidget} item\n     */\n    focus(item: FocusableWidget): void\n    {\n        const lastItem = this.currentItem;\n\n        if (lastItem)\n        {\n            lastItem.blur();\n            this.emit('blur', lastItem);\n        }\n\n        item.focus();\n\n        this.emit('focus', item);\n        this.emit('focusChanged', item, lastItem);\n    }\n\n    /**\n     * Blurs the currently focused widget out of focus.\n     */\n    blur(): void\n    {\n        if (this.currentItem)\n        {\n            this.currentItem.blur();\n\n            this.emit('blur', this.currentItem);\n            this.emit('focusChanged', null, this.currentItem);\n\n            this.currentItem = null;\n        }\n    }\n\n    /**\n     * Called when tab is pressed on a focusable widget.\n     */\n    onTab(): void\n    {\n        const { tabGroups, currentItem } = this;\n\n        if (currentItem)\n        {\n            const tabGroup = tabGroups.get(currentItem.tabGroup);\n\n            let i = tabGroup.indexOf(currentItem) + 1;\n\n            if (i >= tabGroup.length)\n            {\n                i = 0;\n            }\n\n            this.focus(tabGroup[i]);\n        }\n    }\n\n    /**\n     * Focuses the next item without wrapping, i.e. it does not go to the first\n     * item if the current one is the last item. This is called when the user\n     * presses the forward arrow key.\n     */\n    onForward(): void\n    {\n        if (!this.useForward)\n        {\n            return;\n        }\n\n        const { currentItem, tabGroups } = this;\n\n        if (currentItem)\n        {\n            const tabGroup = tabGroups.get(currentItem.tabGroup);\n\n            let i = tabGroup.indexOf(currentItem) + 1;\n\n            if (i >= tabGroup.length)\n            {\n                i = tabGroup.length - 1;\n            }\n\n            this.focus(tabGroup[i]);\n        }\n    }\n\n    /**\n     * Focuses the last item without wrapping, i.e. it does not go to the last\n     * item if the current item is the first one. This is called when the user\n     * presses the back arrow button.\n     */\n    onBack(): void\n    {\n        const { currentItem, tabGroups } = this;\n\n        if (currentItem)\n        {\n            const tabGroup = tabGroups.get(currentItem.tabGroup);\n            let i = tabGroup.indexOf(currentItem) - 1;\n\n            if (i < 0) i = 0;\n\n            this.focus(tabGroup[i]);\n        }\n    }\n\n    /**\n     * Fired when a widget gains focus.\n     * @event focus\n     * @param {PUXI.FocusableWidget} widget - the widget that gained focus.\n     */\n\n    /**\n     * Fired when a widget looses focus.\n     * @event blur\n     * @param {PUXI.FocusableWidget} widget - the widget that lost focus.\n     */\n\n    /**\n     * Fired when a new widget comes into focus or one looses focus.\n     * @event focusChanged\n     * @param {PUXI.FocusableWidget}[newFocus] - the widget that came into focus. It may\n     *      be null if only a blur occured.\n     * @param {PUXI.FocusableWidget}[oldFocus] - the widget that lost focus. It may be\n     *      null if a widget gained focused for the first time.\n     */\n}\n","import * as PIXI from 'pixi.js';\n\nexport type StyleData = {\n    [id: string]: any;\n    backgroundColor?: string | number;\n    background?: PIXI.Container;\n    fontFamily?: string;\n    fontSize?: number;\n    paddingLeft?: number;\n    paddingTop?: number;\n    paddingRight?: number;\n    paddingBottom?: number;\n    padding?: number;\n\n//    [':hover']?: StyleData;\n//    [':focus']?: StyleData;\n};\n\n/**\n * A StyleSheet provides a mechansim to style widgets in a shared fashion.\n */\nexport class Style extends PIXI.utils.EventEmitter\n{\n    public dirtyID: number;\n\n    private data: StyleData;\n    private extends: Style[];\n\n    private computedData: StyleData;\n    private computedDirty: boolean;\n\n    constructor(data: StyleData = {})\n    {\n        super();\n\n        this.dirtyID = 0;\n\n        this.data = data;\n        this.extends = [];\n\n        this.computedData = data;\n        this.computedDirty = false;\n    }\n\n    /**\n     * @param prop\n     */\n    getProperty(prop: string): any\n    {\n        if (this.computedDirty)\n        {\n            this.compute();\n        }\n\n        return this.computedData[prop];\n    }\n\n    /**\n     * @param props\n     * @example\n     * style.getProperties('paddingLeft', 'paddingRight')\n     */\n    getProperties(...props: string[]): Record<string, any>\n    {\n        if (this.computedDirty)\n        {\n            this.compute();\n        }\n\n        const result = { };\n\n        for (let i = 0, j = props.length; i < j; i++)\n        {\n            result[props[i]] = this.computedData[props[i]];\n        }\n\n        return result;\n    }\n\n    /**\n     * @param prop\n     * @param value\n     */\n    setProperty(prop: string, value: any): void\n    {\n        // Ensure computedData is up-to-date to ensure child styles get the correct information.\n        if (this.computedDirty)\n        {\n            this.compute();\n        }\n\n        this.data[prop] = value;\n        this.computedData[prop] = value;\n        this.emit('setProperty', prop, value, this);\n\n        ++this.dirtyID;\n    }\n\n    /**\n     * Extend the given style so that properties not set on this style are derived from it. If multiple styles\n     * are extended, the ones extended later have a higher priority.\n     *\n     * @param style\n     */\n    extend(style: Style): void\n    {\n        this.extends.push(style);\n        this.computedDirty = true;\n\n        ++this.dirtyID;\n\n        // Recompute the set-property for this style\n        style.on('setProperty', this.onParentSetProperty);\n    }\n\n    /**\n     * Recomputes the style data\n     */\n    private compute(): void\n    {\n        const superStyles = this.extends;\n\n        this.computedData = {};\n\n        for (let i = 0, j = superStyles.length; i < j; i++)\n        {\n            Object.assign(this.computedData, superStyles[i].computedData);\n        }\n\n        this.computedDirty = false;\n    }\n\n    private onParentSetProperty = (propertyName: string, value: any, style: Style): void =>\n    {\n        const superStyles = this.extends;\n        const superIndex = superStyles.indexOf(style);\n\n        if (superIndex === -1)\n        {\n            throw new Error('onParentSetProperty triggered when by a non-super style.');\n        }\n\n        const thisValue = this.computedData[propertyName];\n\n        for (let i = superIndex, j = superStyles.length; i < j; i++)\n        {\n            const superStyle = superStyles[i];\n\n            if (superStyle.computedData[propertyName])\n            {\n                this.computedData[propertyName] = superStyle.computedData[propertyName];\n            }\n        }\n\n        if (this.data[propertyName])\n        {\n            this.computedData[propertyName] = this.data[propertyName];\n        }\n\n        if (thisValue !== this.computedData[propertyName])\n        {\n            this.emit('setProperty', propertyName, this.computedData[propertyName], this);\n        }\n    };\n\n    /**\n     * @param data\n     * @example\n     * Style.create({\n     *     backgroundColor: 0xabcdef,\n     *     padding: 8\n     * })\n     */\n    static create(data: StyleData): Style\n    {\n        return new Style(data);\n    }\n}\n","import { Style, StyleData } from './Style';\n\nexport class StyleSheet\n{\n    [id: string]: Style;\n\n    static create(sheetData: { [id: string]: StyleData }): StyleSheet\n    {\n        const sheet = new StyleSheet();\n\n        for (const key in sheetData)\n        {\n            sheet[key] = Style.create(sheetData[key]);\n        }\n\n        return sheet;\n    }\n}\n","import { FocusableWidget, IFocusableOptions } from './FocusableWidget';\nimport { ScrollWidget } from './ScrollWidget';\nimport * as PIXI from 'pixi.js';\nimport { LayoutOptions } from './layout-options';\nimport { DragManager } from './event/DragManager';\n\n/**\n * @memberof PUXI\n * @interface\n */\ninterface ITextInputOptions extends IFocusableOptions\n{\n    multiLine?: boolean;\n    style?: PIXI.TextStyle;\n    background?: PIXI.Container;\n    selectedColor?: string | number[];\n    selectedBackgroundColor?: string;\n    width?: number;\n    height?: number;\n    padding?: number;\n    paddingTop?: number;\n    paddingBottom?: number;\n    paddingLeft?: number;\n    paddingRight?: number;\n    tabIndex?: number;\n    tabGroup?: number;\n    maxLength?: number;\n    caretWidth?: number;\n    lineHeight?: number;\n    value?: string;\n}\n\n// Dummy <input> element created for mobile keyboards\nlet mockDOMInput: any;\n\nfunction initMockDOMInput(): void\n{\n    // create temp input (for mobile keyboard)\n    if (typeof mockDOMInput === 'undefined')\n    {\n        mockDOMInput = document.createElement('INPUT');\n        mockDOMInput.setAttribute('type', 'text');\n        mockDOMInput.setAttribute('id', '_pui_tempInput');\n        mockDOMInput.setAttribute('style', 'position:fixed; left:-10px; top:-10px; width:0px; height: 0px;');\n        document.body.appendChild(mockDOMInput);\n    }\n}\n\n/**\n * An UI text object\n *\n * @class\n * @extends PIXI.UI.InputBase\n * @memberof PIXI.UI\n */\nexport class TextInput extends FocusableWidget\n{\n    private options: ITextInputOptions;\n\n    private _dirtyText: boolean;\n    private _value: string;\n    private _lastValue: string;\n\n    private _lastWidth: number;\n    private _lastHeight: number;\n\n    private selection: PIXI.Graphics;\n    private textContainer: ScrollWidget;\n\n    public maxLength: number;\n\n    private chars: any[];\n    private multiLine: boolean;\n    private color: string;\n    private selectedColor: string;\n    private selectedBackgroundColor: string;\n    private tempText: PIXI.Text;\n    private textHeight: number;\n    private lineHeight: number;\n\n    private caret: PIXI.Graphics;\n    private caretInterval: NodeJS.Timeout;\n    private si: number; // startIndex\n    private sie: boolean; // startIndexEnd\n    private ei: number; // endIndex\n    private eie: boolean; // endIndexEnd\n    private sp: PIXI.Point; // startposition\n    private ds: PIXI.Point; // dragStart\n    private de: PIXI.Point; // dragend\n    private rdd: boolean; // Reverse drag direction\n    private vrdd: boolean; // vertical Reverse drag direction\n\n    private selectionStart: number;\n    private selectionEnd: number;\n    private hasSelection: boolean;\n    private t: number; // timestamp\n    private cc: number; // click counter\n    private textLengthPX: number;\n    private textHeightPX: number;\n    private lineIndexMax: number;\n\n    private ctrlDown: boolean;\n    private shiftDown: boolean;\n    private shiftKey: number;\n    private ctrlKey: number;\n    private cmdKey: number;\n\n    private _sp: PIXI.Point;\n\n    /**\n     * @param {PUXI.ITextInputOptions} options\n     * @param {string} options.value Text content\n     * @param {boolean} [options.multiLine=false] Multiline input\n     * @param options.style {PIXI.TextStyle} Style used for the Text\n     * @param options.background {(PIXI.UI.SliceSprite|PIXI.UI.Sprite)} will be used as background for input\n     * @param [options.selectedColor='#ffffff'] {String|Array} Fill color of selected text\n     * @param [options.selectedBackgroundColor='#318cfa'] {String} BackgroundColor of selected text\n     * @param [options.width=150] {Number} width of input\n     * @param [options.height=20] {Number} height of input\n     * @param [options.padding=3] {Number} input padding\n     * @param [options.paddingTop=0] {Number} input padding\n     * @param [options.paddingBottom=0] {Number} input padding\n     * @param [options.paddingLeft=0] {Number} input padding\n     * @param [options.paddingRight=0] {Number} input padding\n     * @param [options.tabIndex=0] {Number} input tab index\n     * @param [options.tabGroup=0] {Number|String} input tab group\n     * @param [options.maxLength=0] {Number} 0 = unlimited\n     * @param [options.caretWidth=1] {Number} width of the caret\n     * @param [options.lineHeight=0] {Number} 0 = inherit from text\n     */\n    constructor(options: ITextInputOptions)\n    {\n        super(options);\n        initMockDOMInput();\n\n        this.options = options;\n\n        this._dirtyText = true;\n        this.maxLength = options.maxLength || 0;\n        this._value = this._lastValue = options.value || '';\n\n        if (this.maxLength)\n        {\n            this._value = this._value.slice(0, this.maxLength);\n        }\n\n        this.chars = [];\n        this.multiLine = options.multiLine !== undefined ? options.multiLine : false;\n        this.color = options.style && options.style.fill ? options.style.fill : '#000000';\n        this.selectedColor = options.selectedColor || '#ffffff';\n        this.selectedBackgroundColor = options.selectedBackgroundColor || '#318cfa';\n        this.tempText = new PIXI.Text('1', options.style);\n        this.textHeight = this.tempText.height;\n        this.lineHeight = options.lineHeight || this.textHeight || this._height;\n\n        this.tempText.destroy();\n\n        // set cursor\n        // this.container.cursor = \"text\";\n\n        // selection graphics\n        this.selection = new PIXI.Graphics();\n        this.selection.visible = false;\n        this.selection._startIndex = 0;\n        this.selection._endIndex = 0;\n\n        // caret graphics\n        this.caret = new PIXI.Graphics();\n        this.caret.visible = false;\n        this.caret._index = 0;\n        this.caret.lineStyle(options.caretWidth || 1, '#ffffff', 1);\n        this.caret.moveTo(0, 0);\n        this.caret.lineTo(0, this.textHeight);\n\n        // var padding\n        const paddingLeft = options.paddingLeft !== undefined ? options.paddingLeft : options.padding;\n        const paddingRight = options.paddingRight !== undefined ? options.paddingRight : options.padding;\n        const paddingBottom = options.paddingBottom !== undefined ? options.paddingBottom : options.padding;\n        const paddingTop = options.paddingTop !== undefined ? options.paddingTop : options.padding;\n\n        // insert text container (scrolling container)\n        this.textContainer = new ScrollWidget({\n            scrollX: !this.multiLine,\n            scrollY: this.multiLine,\n            dragScrolling: this.multiLine,\n            expandMask: 2,\n            softness: 0.2,\n            overflowX: 40,\n            overflowY: 40,\n        }).setPadding(\n            paddingLeft || 3,\n            paddingTop || 3,\n            paddingRight || 3,\n            paddingBottom || 3,\n        ).setLayoutOptions(\n            new LayoutOptions(\n                LayoutOptions.FILL_PARENT,\n                LayoutOptions.FILL_PARENT,\n            ),\n        ) as ScrollWidget;\n\n        this.addChild(this.textContainer);\n\n        if (this.multiLine)\n        {\n            this._useNext = this._usePrev = false;\n            this.textContainer.dragRestrictAxis = 'y';\n            this.textContainer.dragThreshold = 5;\n            this.dragRestrictAxis = 'x';\n            this.dragThreshold = 5;\n        }\n\n        // selection Vars\n        this.sp = new PIXI.Point(); // startposition\n        this._sp = new PIXI.Point();\n        this.ds = new PIXI.Point(); // dragStart\n        this.de = new PIXI.Point(); // dragend\n        this.rdd = false; // Reverse drag direction\n        this.vrdd = false; // vertical Reverse drag direction\n        this.selectionStart = -1;\n        this.selectionEnd = -1;\n        this.hasSelection = false;\n        this.t = performance.now(); // timestamp\n        this.cc = 0; // click counter\n        this.textLengthPX = 0;\n        this.textHeightPX = 0;\n        this.lineIndexMax = 0;\n        this.ctrlDown = false;\n        this.shiftDown = false;\n        this.shiftKey = 16;\n        this.ctrlKey = 17;\n        this.cmdKey = 91;\n\n        this.setupDrag();\n    }\n\n    setupDrag(): void\n    {\n        const event = new DragManager(this);\n\n        event.onPress = (e, mouseDown): void =>\n        {\n            if (mouseDown)\n            {\n                const timeSinceLast = performance.now() - this.t;\n\n                this.t = performance.now();\n                if (timeSinceLast < 250)\n                {\n                    this.cc++;\n                    if (this.cc > 1)\n                    {\n                        this.select();\n                    }\n                    else\n                    {\n                        this.innerContainer.toLocal(this.sp, undefined, this.ds, true);\n                        this.updateClosestIndex(this.ds, true);\n                        const c = this.chars[this.si];\n\n                        if (c)\n                        {\n                            if (c.wordIndex != -1)\n                            {\n                                this.selectWord(c.wordIndex);\n                            }\n                            else\n                            {\n                                this.selectRange(this.si, this.si);\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    this.cc = 0;\n                    this.sp.copyFrom(e.data.global);\n                    this.innerContainer.toLocal(this.sp, undefined, this.ds, true);\n\n                    if (this.chars.length)\n                    {\n                        this.updateClosestIndex(this.ds, true);\n                        this.setCaretIndex(this.sie ? this.si + 1 : this.si);\n                    }\n                }\n            }\n            e.data.originalEvent.preventDefault();\n        };\n\n        event.onDragMove = (e, offset: PIXI.Point): void =>\n        {\n            if (!this.chars.length || !this._isFocused)\n            {\n                return;\n            }\n\n            this.de.x = this.sp.x + offset.x;\n            this.de.y = this.sp.y + offset.y;\n            this.innerContainer.toLocal(this.de, undefined, this.de, true);\n            this.updateClosestIndex(this.de, false);\n\n            if (this.si < this.ei)\n            {\n                this.selectRange(this.sie ? this.si + 1 : this.si, this.eie ? this.ei : this.ei - 1);\n                this.caret._index = this.eie ? this.ei : this.ei - 1;\n            }\n            else if (this.si > this.ei)\n            {\n                this.selectRange(this.ei, this.sie ? this.si : this.si - 1);\n                this.caret._index = this.ei;\n            }\n            else if (this.sie === this.eie)\n            {\n                this.setCaretIndex(this.sie ? this.si + 1 : this.si);\n            }\n            else\n            {\n                this.selectRange(this.si, this.ei);\n                this.caret._index = this.ei;\n            }\n\n            this.caret._forward = this.si <= this.ei;\n            this.caret._down = offset.y > 0;\n\n            this.scrollToPosition(this.de);\n        };\n    }\n\n    private get innerContainer(): PIXI.Container\n    {\n        return this.textContainer.innerContainer.insetContainer;\n    }\n\n    update(): void\n    {\n        if (this.width !== this._lastWidth)\n        {\n            this._lastWidth = this._width;\n\n            if (this.multiLine)\n            {\n                this.updateText();\n\n                if (this.caret.visible)\n                {\n                    this.setCaretIndex(this.caret._index);\n                }\n                if (this.hasSelection)\n                {\n                    this.updateSelectionGraphics();\n                }\n            }\n        }\n\n        // update text\n        if (this._dirtyText)\n        {\n            this.updateText();\n            this._dirtyText = false;\n        }\n    }\n\n    updateText(): void\n    {\n        this.textLengthPX = 0;\n        this.textHeightPX = 0;\n        this.lineIndexMax = 0;\n\n        let lineIndex = 0;\n        const length = this._value.length;\n        let x = 0;\n        let y = (this.lineHeight - this.textHeight) * 0.5;\n        let i = 0;\n\n        // destroy excess chars\n        if (this.chars.length > length)\n        {\n            for (i = this.chars.length - 1; i >= length; i--)\n            {\n                this.innerContainer.removeChild(this.chars[i]);\n                this.chars[i].destroy();\n            }\n\n            this.chars.splice(length, this.chars.length - length);\n        }\n\n        // update and add chars\n        let whitespace = false;\n        let newline = false;\n        let wordIndex = 0;\n        let lastWordIndex = -1;\n        let wrap = false;\n\n        for (i = 0; i < this._value.length; i++)\n        {\n            if (whitespace || newline)\n            {\n                lastWordIndex = i;\n                wordIndex++;\n            }\n\n            let c = this._value[i];\n\n            whitespace = c === ' ';\n            newline = c === '\\n';\n\n            if (newline)\n            { // newline \"hack\". webgl render errors if \\n is passed to text\n                c = '';\n            }\n\n            let charText = this.chars[i];\n\n            if (!charText)\n            {\n                charText = new PIXI.Text(c, this.options.style);\n                this.innerContainer.addChild(charText);\n                this.chars.push(charText);\n            }\n            else\n            {\n                charText.text = c;\n            }\n\n            charText.scale.x = newline ? 0 : 1;\n            charText.wrapped = wrap;\n            wrap = false;\n\n            if (newline || (this.multiLine && x + charText.width >= this._width - this.paddingLeft - this.paddingRight))\n            {\n                lineIndex++;\n                x = 0;\n                y += this.lineHeight;\n\n                if (lastWordIndex !== -1 && !newline)\n                {\n                    i = lastWordIndex - 1;\n                    lastWordIndex = -1;\n                    wrap = true;\n                    continue;\n                }\n            }\n\n            charText.lineIndex = lineIndex;\n            charText.x = x;\n            charText.y = y;\n            charText.wordIndex = whitespace || newline ? -1 : wordIndex;\n            x += charText.width;\n\n            if (x > this.textLengthPX)\n            {\n                this.textLengthPX = x;\n            }\n            if (y > this.textHeightPX)\n            {\n                this.textHeightPX = y;\n            }\n        }\n\n        this.lineIndexMax = lineIndex;\n\n        // put caret on top\n        this.innerContainer.addChild(this.caret);\n\n        // recache\n        if (this.innerContainer.cacheAsBitmap)\n        {\n            this.innerContainer.cacheAsBitmap = false;\n            this.innerContainer.cacheAsBitmap = true;\n        }\n\n        this.textContainer.update();\n    }\n\n    updateClosestIndex(point: PIXI.Point, start: boolean): void\n    {\n        let currentDistX = 99999;\n        let currentIndex = -1;\n        let atEnd = false;\n\n        let closestLineIndex = 0;\n\n        if (this.lineIndexMax > 0)\n        {\n            closestLineIndex = Math.max(0, Math.min(\n                this.lineIndexMax,\n                Math.floor(point.y / this.lineHeight)));\n        }\n\n        for (let i = 0; i < this.chars.length; i++)\n        {\n            const char = this.chars[i];\n\n            if (char.lineIndex !== closestLineIndex)\n            {\n                continue;\n            }\n\n            const distX = Math.abs(point.x - (char.x + (char.width * 0.5)));\n\n            if (distX < currentDistX)\n            {\n                currentDistX = distX;\n                currentIndex = i;\n                atEnd = point.x > char.x + (char.width * 0.5);\n            }\n        }\n\n        if (start)\n        {\n            this.si = currentIndex;\n            this.sie = atEnd;\n        }\n        else\n        {\n            this.ei = currentIndex;\n            this.eie = atEnd;\n        }\n    }\n\n    deleteSelection(): boolean\n    {\n        if (this.hasSelection)\n        {\n            this.value = this.value.slice(0, this.selectionStart) + this.value.slice(this.selectionEnd + 1);\n            this.setCaretIndex(this.selectionStart);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    updateSelectionColors(): void\n    {\n        // Color charecters\n        for (let i = 0; i < this.chars.length; i++)\n        {\n            if (i >= this.selectionStart && i <= this.selectionEnd)\n            {\n                this.chars[i].style.fill = this.selectedColor;\n            }\n            else\n            {\n                this.chars[i].style.fill = this.color;\n            }\n        }\n    }\n\n    scrollToPosition(pos: PIXI.Point): void\n    {\n        this._sp.x = pos.x;\n        this._sp.y = pos.y;\n\n        if (this.multiLine && this._sp.y >= this.lineHeight)\n        {\n            this._sp.y += this.lineHeight;\n        }\n\n        this.textContainer.focusPosition(this._sp);\n    }\n\n    resetScrollPosition(): void\n    {\n        this._sp.set(0, 0);\n        this.textContainer.focusPosition(this._sp);\n    }\n\n    hideCaret(): void\n    {\n        this.caret.visible = false;\n        clearInterval(this.caretInterval);\n    }\n\n    showCaret(): void\n    {\n        this.clearSelection();\n        clearInterval(this.caretInterval);\n\n        this.caret.alpha = 1;\n        this.caret.visible = true;\n\n        this.caretInterval = setInterval(() =>\n        {\n            this.caret.alpha = this.caret.alpha === 0 ? 1 : 0;\n        }, 500);\n    }\n\n    insertTextAtCaret(c: string): void\n    {\n        if (!this.multiLine && c.indexOf('\\n') !== -1)\n        {\n            c = c.replace(/\\n/g, '');\n        }\n\n        if (this.hasSelection)\n        {\n            this.deleteSelection();\n        }\n\n        if (!this.maxLength || this.chars.length < this.maxLength)\n        {\n            if (this.caret._atEnd)\n            {\n                this.valueEvent += c;\n                this.setCaretIndex(this.chars.length);\n            }\n            else\n            {\n                const index = Math.min(this.chars.length - 1, this.caret._index);\n\n                this.valueEvent = this.value.slice(0, index) + c + this.value.slice(index);\n                this.setCaretIndex(index + c.length);\n            }\n        }\n    }\n\n    onKeyDown = (e): void =>\n    {\n        if (e.which === this.ctrlKey || e.which === this.cmdKey)\n        {\n            this.ctrlDown = true;\n        }\n        if (e.which === this.shiftKey)\n        {\n            this.shiftDown = true;\n        }\n\n        // FocusableWidget.onKeyDownImpl should've been called before this.\n\n        if (e.defaultPrevented)\n        {\n            return;\n        }\n\n        if (e.which === 13)\n        { // enter\n            this.insertTextAtCaret('\\n');\n            e.preventDefault();\n\n            return;\n        }\n\n        if (this.ctrlDown)\n        {\n            // Handle Ctrl+<?> commands\n\n            if (e.which === 65)\n            {\n                // Ctrl+A (Select all)\n                this.select();\n                e.preventDefault();\n\n                return;\n            }\n            else if (e.which === 90)\n            {\n                // Ctrl+Z (Undo)\n                if (this.value != this._lastValue)\n                {\n                    this.valueEvent = this._lastValue;\n                }\n\n                this.setCaretIndex(this._lastValue.length + 1);\n                e.preventDefault();\n\n                return;\n            }\n        }\n        if (e.which === 8)\n        {\n            // Handle backspace\n            if (!this.deleteSelection())\n            {\n                if (this.caret._index > 0 || (this.chars.length === 1 && this.caret._atEnd))\n                {\n                    if (this.caret._atEnd)\n                    {\n                        this.valueEvent = this.value.slice(0, this.chars.length - 1);\n                        this.setCaretIndex(this.caret._index);\n                    }\n                    else\n                    {\n                        this.valueEvent = this.value.slice(0, this.caret._index - 1) + this.value.slice(this.caret._index);\n                        this.setCaretIndex(this.caret._index - 1);\n                    }\n                }\n            }\n\n            e.preventDefault();\n\n            return;\n        }\n\n        if (e.which === 46)\n        {\n            // Delete selection\n            if (!this.deleteSelection())\n            {\n                if (!this.caret._atEnd)\n                {\n                    this.valueEvent = this.value.slice(0, this.caret._index) + this.value.slice(this.caret._index + 1);\n                    this.setCaretIndex(this.caret._index);\n                }\n            }\n\n            e.preventDefault();\n\n            return;\n        }\n        else if (e.which === 37 || e.which === 39)\n        {\n            this.rdd = e.which === 37;\n\n            if (this.shiftDown)\n            {\n                if (this.hasSelection)\n                {\n                    const caretAtStart = this.selectionStart === this.caret._index;\n\n                    if (caretAtStart)\n                    {\n                        if (this.selectionStart === this.selectionEnd && this.rdd === this.caret._forward)\n                        {\n                            this.setCaretIndex(this.caret._forward ? this.caret._index : this.caret._index + 1);\n                        }\n                        else\n                        {\n                            const startindex = this.rdd ? this.caret._index - 1 : this.caret._index + 1;\n\n                            this.selectRange(startindex, this.selectionEnd);\n                            this.caret._index = Math.min(this.chars.length - 1, Math.max(0, startindex));\n                        }\n                    }\n                    else\n                    {\n                        const endIndex = this.rdd ? this.caret._index - 1 : this.caret._index + 1;\n\n                        this.selectRange(this.selectionStart, endIndex);\n                        this.caret._index = Math.min(this.chars.length - 1, Math.max(0, endIndex));\n                    }\n                }\n                else\n                {\n                    const _i = this.caret._atEnd ? this.caret._index + 1 : this.caret._index;\n                    const selectIndex = this.rdd ? _i - 1 : _i;\n\n                    this.selectRange(selectIndex, selectIndex);\n                    this.caret._index = selectIndex;\n                    this.caret._forward = !rdd;\n                }\n            }\n            else\n            {\n                // Navigation\n                // eslint-disable-next-line no-lonely-if\n                if (this.hasSelection)\n                {\n                    this.setCaretIndex(this.rdd ? this.selectionStart : this.selectionEnd + 1);\n                }\n                else\n                {\n                    this.setCaretIndex(this.caret._index + (this.rdd ? this.caret._atEnd ? 0 : -1 : 1));\n                }\n            }\n\n            e.preventDefault();\n\n            return;\n        }\n        else if (this.multiLine && (e.which === 38 || e.which === 40))\n        {\n            this.vrdd = e.which === 38;\n\n            if (this.shiftDown)\n            {\n                if (this.hasSelection)\n                {\n                    this.de.y = Math.max(0, Math.min(\n                        this.textHeightPX,\n                        this.de.y + (this.vrdd ? -this.lineHeight : this.lineHeight)));\n                    this.updateClosestIndex(this.de, false);\n\n                    // console.log(si, ei);\n                    if (Math.abs(this.si - this.ei) <= 1)\n                    {\n                    // console.log(si, ei);\n                        this.setCaretIndex(this.sie ? this.si + 1 : this.si);\n                    }\n                    else\n                    {\n                        this.caret._index = (this.eie ? this.ei + 1 : this.ei) + (this.caret._down ? -1 : 0);\n                        this.selectRange(this.caret._down ? this.si : this.si - 1, this.caret._index);\n                    }\n                }\n                else\n                {\n                    this.si = this.caret._index;\n                    this.sie = false;\n                    this.de.copyFrom(this.caret);\n                    this.de.y = Math.max(0, Math.min(\n                        this.textHeightPX,\n                        this.de.y + (this.vrdd ? -this.lineHeight : this.lineHeight)));\n                    this.updateClosestIndex(this.de, false);\n\n                    this.caret._index = (this.eie ? this.ei + 1 : ei) - (this.vrdd ? 0 : 1);\n                    this.selectRange(this.vrdd ? this.si - 1 : this.si, this.caret._index);\n                    this.caret._down = !this.vrdd;\n                }\n            }\n            else if (this.hasSelection)\n            {\n                this.setCaretIndex(this.vrdd ? this.selectionStart : this.selectionEnd + 1);\n            }\n            else\n            {\n                this.ds.copyFrom(this.caret);\n                this.ds.y += this.vrdd ? -this.lineHeight : this.lineHeight;\n                this.ds.x += 1;\n                this.updateClosestIndex(this.ds, true);\n                this.setCaretIndex(this.sie ? this.si + 1 : this.si);\n            }\n            e.preventDefault();\n\n            return;\n        }\n    };\n\n    keyUpEvent = (e): void =>\n    {\n        if (e.which === this.ctrlKey || e.which === this.cmdKey) this.ctrlDown = false;\n        if (e.which === this.shiftKey) this.shiftDown = false;\n\n        this.emit('keyup', e);\n\n        if (e.defaultPrevented)\n        { return; }\n    };\n\n    copyEvent = (e): void =>\n    {\n        this.emit('copy', e);\n\n        if (e.defaultPrevented)\n        { return; }\n\n        if (this.hasSelection)\n        {\n            const clipboardData = e.clipboardData || window.clipboardData;\n\n            clipboardData.setData('Text', this.value.slice(this.selectionStart, this.selectionEnd + 1));\n        }\n\n        e.preventDefault();\n    };\n\n    cutEvent = (e): void =>\n    {\n        this.emit('cut', e);\n\n        if (e.defaultPrevented)\n        { return; }\n\n        if (this.hasSelection)\n        {\n            this.copyEvent(e);\n            this.deleteSelection();\n        }\n\n        e.preventDefault();\n    };\n\n     pasteEvent = (e): void =>\n     {\n         this.emit('paste', e);\n\n         if (e.defaultPrevented)\n         { return; }\n\n         const clipboardData = e.clipboardData || window.clipboardData;\n\n         this.insertTextAtCaret(clipboardData.getData('Text'));\n         e.preventDefault();\n     };\n\n    inputEvent = (e): void =>\n    {\n        const c = mockDOMInput.value;\n\n        if (c.length)\n        {\n            this.insertTextAtCaret(c);\n            mockDOMInput.value = '';\n        }\n\n        e.preventDefault();\n    };\n\n    inputBlurEvent = (e): void =>\n    {\n        this.blur();\n    };\n\n    public focus = (): void =>\n    {\n        if (!this._isFocused)\n        {\n            super.focus();\n\n            const l = `${this.contentContainer.worldTransform.tx}px`;\n            const t = `${this.contentContainer.worldTransform.ty}px`;\n            const h = `${this.contentContainer.height}px`;\n            const w = `${this.contentContainer.width}px`;\n\n            mockDOMInput.setAttribute('style', `position:fixed; left:${l}; top:${t}; height:${h}; width:${w};`);\n            mockDOMInput.value = '';\n            mockDOMInput.focus();\n            mockDOMInput.setAttribute('style', 'position:fixed; left:-10px; top:-10px; width:0px; height: 0px;');\n\n            this.innerContainer.cacheAsBitmap = false;\n            mockDOMInput.addEventListener('blur', this.inputBlurEvent, false);\n            document.addEventListener('keydown', this.onKeyDown, false);\n            document.addEventListener('keyup', this.keyUpEvent, false);\n            document.addEventListener('paste', this.pasteEvent, false);\n            document.addEventListener('copy', this.copyEvent, false);\n            document.addEventListener('cut', this.cutEvent, false);\n            mockDOMInput.addEventListener('input', this.inputEvent, false);\n\n            setTimeout(() =>\n            {\n                if (!this.caret.visible && !this.selection.visible && !this.multiLine)\n                {\n                    this.setCaretIndex(this.chars.length);\n                }\n            }, 0);\n        }\n    };\n\n    public blur = (): void =>\n    {\n        if (this._isFocused)\n        {\n            super.blur();\n            this.ctrlDown = false;\n            this.shiftDown = false;\n\n            this.hideCaret();\n            this.clearSelection();\n\n            if (this.chars.length > 1)\n            {\n                this.innerContainer.cacheAsBitmap = true;\n            }\n\n            mockDOMInput.removeEventListener('blur', this.inputBlurEvent);\n            document.removeEventListener('keydown', this.onKeyDown);\n            document.removeEventListener('keyup', this.keyUpEvent);\n            document.removeEventListener('paste', this.pasteEvent);\n            document.removeEventListener('copy', this.copyEvent);\n            document.removeEventListener('cut', this.cutEvent);\n            mockDOMInput.removeEventListener('input', this.inputEvent);\n            mockDOMInput.blur();\n        }\n\n        if (!this.multiLine)\n        {\n            this.resetScrollPosition();\n        }\n    };\n\n    setCaretIndex = (index: number): void =>\n    {\n        this.caret._atEnd = index >= this.chars.length;\n        this.caret._index = Math.max(0, Math.min(this.chars.length - 1, index));\n\n        if (this.chars.length && index > 0)\n        {\n            let i = Math.max(0, Math.min(index, this.chars.length - 1));\n            let c = this.chars[i];\n\n            if (c && c.wrapped)\n            {\n                this.caret.x = c.x;\n                this.caret.y = c.y;\n            }\n            else\n            {\n                i = Math.max(0, Math.min(index - 1, this.chars.length - 1));\n                c = this.chars[i];\n                this.caret.x = this.chars[i].x + this.chars[i].width;\n                this.caret.y = (this.chars[i].lineIndex * this.lineHeight) + (this.lineHeight - this.textHeight) * 0.5;\n            }\n        }\n        else\n        {\n            this.caret.x = 0;\n            this.caret.y = (this.lineHeight - this.textHeight) * 0.5;\n        }\n\n        this.scrollToPosition(this.caret);\n        this.showCaret();\n    };\n\n    select = (): void =>\n    {\n        this.selectRange(0, this.chars.length - 1);\n    };\n\n    selectWord = (wordIndex: number): void =>\n    {\n        let startIndex = this.chars.length;\n        let endIndex = 0;\n\n        for (let i = 0; i < this.chars.length; i++)\n        {\n            if (this.chars[i].wordIndex !== wordIndex)\n            {\n                continue;\n            }\n\n            if (i < startIndex)\n            {\n                startIndex = i;\n            }\n            if (i > endIndex)\n            {\n                endIndex = i;\n            }\n        }\n\n        this.selectRange(startIndex, endIndex);\n    };\n\n    selectRange = (startIndex: number, endIndex: number): void =>\n    {\n        if (startIndex > -1 && endIndex > -1)\n        {\n            const start = Math.min(startIndex, endIndex, this.chars.length - 1);\n            const end = Math.min(Math.max(startIndex, endIndex), this.chars.length - 1);\n\n            if (start !== this.selectionStart || end !== this.selectionEnd)\n            {\n                this.hasSelection = true;\n                this.selection.visible = true;\n                this.selectionStart = start;\n                this.selectionEnd = end;\n\n                this.hideCaret();\n                this.updateSelectionGraphics();\n                this.updateSelectionColors();\n            }\n\n            this.focus();\n        }\n        else\n        {\n            this.clearSelection();\n        }\n    };\n\n    clearSelection = (): void =>\n    {\n        if (this.hasSelection)\n        {\n            // Remove color\n            this.hasSelection = false;\n            this.selection.visible = false;\n            this.selectionStart = -1;\n            this.selectionEnd = -1;\n            this.updateSelectionColors();\n        }\n    };\n\n    updateSelectionGraphics = () =>\n    {\n        const c1 = this.chars[this.selectionStart];\n\n        if (c1 !== undefined)\n        {\n            let cx = c1.x;\n            let cy = c1.y;\n            let w = 0;\n            const h = this.textHeight;\n            let cl = c1.lineIndex;\n\n            this.selection.clear();\n            for (let i = this.selectionStart; i <= this.selectionEnd; i++)\n            {\n                const c = this.chars[i];\n\n                if (c.lineIndex != cl)\n                {\n                    this.drawSelectionRect(cx, cy, w, h);\n                    cx = c.x;\n                    cy = c.y;\n                    cl = c.lineIndex;\n                    w = 0;\n                }\n\n                w += c.width;\n            }\n\n            this.drawSelectionRect(cx, cy, w, h);\n            this.innerContainer.addChildAt(this.selection, 0);\n        }\n    };\n\n    drawSelectionRect = (x: number, y: number, w: number, h: number): void =>\n    {\n        this.selection.beginFill(`0x${this.selectedBackgroundColor.slice(1)}`, 1);\n        this.selection.moveTo(x, y);\n        this.selection.lineTo(x + w, y);\n        this.selection.lineTo(x + w, y + h);\n        this.selection.lineTo(x, y + h);\n        this.selection.endFill();\n    };\n\n    get valueEvent(): string\n    {\n        return this._value;\n    }\n    set valueEvent(val: string)\n    {\n        if (this.maxLength)\n        {\n            val = val.slice(0, this.maxLength);\n        }\n\n        if (this._value != val)\n        {\n            this.value = val;\n            this.emit('change');\n        }\n    }\n\n    get value(): string\n    {\n        return this._value;\n    }\n    set value(val: string)\n    {\n        if (this.maxLength)\n        {\n            val = val.slice(0, this.maxLength);\n        }\n\n        if (this._value != val)\n        {\n            this._lastValue = this._value;\n            this._value = val;\n            this._dirtyText = true;\n            this.update();\n        }\n    }\n\n    get text(): string\n    {\n        return this.value;\n    }\n    set text(value: string)\n    {\n        this.value = value;\n    }\n}\n\n/*\n * Features:\n * multiLine, shift selection, Mouse Selection, Cut, Copy, Paste, Delete, Backspace, Arrow navigation, tabIndex\n *\n * Methods:\n * blur()\n * focus()\n * select() - selects all text\n * selectRange(startIndex, endIndex)\n * clearSelection()\n * setCaretIndex(index) moves caret to index\n *\n *\n * Events:\n * \"change\"\n * \"blur\"\n * \"blur\"\n * \"focus\"\n * \"focusChanged\" param: [bool]focus\n * \"keyup\" param: Event\n * \"keydown\" param: Event\n * \"copy\" param: Event\n * \"paste\" param: Event\n * \"cut\" param: Event\n * \"keyup\" param: Event\n */\n","import { Tween } from './Tween';\nimport * as PIXI from 'pixi.js';\n\n/**\n * This ticker is an event-emitter that can be used for running periodic tasks\n * in the rendering loop. It emits the `update` event every animation frame.\n *\n * @memberof PUXI\n * @class\n * @extends PIXI.utils.EventEmitter\n */\nexport class Ticker extends PIXI.utils.EventEmitter\n{\n    private _disabled: boolean;\n    private _now: number;\n\n    DeltaTime: number;\n    Time: number;\n    Ms: number;\n\n    constructor(autoStart: boolean)\n    {\n        super();\n\n        this._disabled = true;\n        this._now = 0;\n\n        this.DeltaTime = 0;\n        this.Time = performance.now();\n        this.Ms = 0;\n\n        if (autoStart)\n        {\n            this.disabled = false;\n        }\n\n        Ticker.shared = this;\n    }\n\n    get disabled(): boolean\n    {\n        return this._disabled;\n    }\n    set disabled(val: boolean)\n    {\n        if (!this._disabled)\n        {\n            this._disabled = true;\n        }\n        else\n        {\n            this._disabled = false;\n            Ticker.shared = this;\n\n            this.update(performance.now(), true);\n        }\n    }\n\n    /**\n     * Updates the text\n     *\n     * @private\n     */\n    update(time: number): void\n    {\n        Ticker.shared._now = time;\n        Ticker.shared.Ms = Ticker.shared._now - Ticker.shared.Time;\n        Ticker.shared.Time = Ticker.shared._now;\n        Ticker.shared.DeltaTime = Ticker.shared.Ms * 0.001;\n        Ticker.shared.emit('update', Ticker.shared.DeltaTime);\n        Tween._update(Ticker.shared.DeltaTime);\n\n        if (!Ticker.shared._disabled)\n        {\n            requestAnimationFrame(Ticker.shared.update);\n        }\n    }\n\n    /**\n     * The update event is fired periodically and it can be used to for a rendering\n     * loop.\n     * @event update\n     * @param {DOMHighResTimeStamp} deltaTime - milliseconds since last update\n     */\n\n    static shared: Ticker;\n\n    static on(event: any, fn: Function, context: any): void\n    {\n        Ticker.shared.on(event, fn, context);\n    }\n\n    static once(event: any, fn: Function, context: any): void\n    {\n        Ticker.shared.once(event, fn, context);\n    }\n\n    static removeListener(event: any, fn: Function): void\n    {\n        Ticker.shared.removeListener(event, fn);\n    }\n}\n\nTicker.shared = new Ticker(true);\n","import { ILayoutManager } from './ILayoutManager';\nimport { Widget } from '../Widget';\nimport { AnchorLayoutOptions, ALIGN, LayoutOptions } from '../layout-options';\nimport { MeasureMode } from '../IMeasurable';\nimport { WidgetGroup } from '../WidgetGroup';\n\ninterface IAnchorCache {\n    remeasure: boolean;\n}\n\n/**\n * `AnchorLayout` is used in conjunction with `AnchorLayoutOptions`.\n *\n * @memberof PUXI\n * @class\n * @example\n * ```\n * parent.useLayout(new PUXI.AnchorLayout());\n * ```\n */\nexport class AnchorLayout implements ILayoutManager\n{\n    private measuredWidth: number;\n    private measuredHeight: number;\n\n    private host: WidgetGroup;\n\n    onAttach(host: WidgetGroup): void\n    {\n        this.host = host;\n    }\n\n    onDetach(): void\n    {\n        this.host = null;\n    }\n\n    onLayout(): void\n    {\n        const parent = this.host;\n        const { widgetChildren } = parent;\n\n        const parentWidth = parent.contentWidth;\n        const parentHeight = parent.contentHeight;\n\n        for (let i = 0; i < widgetChildren.length; i++)\n        {\n            const child = widgetChildren[i];\n            const layoutOptions = (child.layoutOptions || {}) as AnchorLayoutOptions;\n\n            const childWidth = child.getMeasuredWidth();\n            const childHeight = child.getMeasuredHeight();\n            const anchorLeft = this.calculateAnchor(layoutOptions.anchorLeft || 0, parentWidth, false);\n            const anchorTop = this.calculateAnchor(layoutOptions.anchorTop || 0, parentHeight, false);\n            const anchorRight = this.calculateAnchor(layoutOptions.anchorRight || 0, parentWidth, true);\n            const anchorBottom = this.calculateAnchor(layoutOptions.anchorBottom || 0, parentHeight, true);\n\n            let x = anchorLeft;\n            let y = anchorTop;\n\n            switch (layoutOptions.horizontalAlign)\n            {\n                case ALIGN.MIDDLE:\n                    x = (anchorRight + anchorLeft - childWidth) / 2;\n                    break;\n                case ALIGN.RIGHT:\n                    x = anchorRight - childWidth;\n                    break;\n            }\n\n            switch (layoutOptions.verticalAlign)\n            {\n                case ALIGN.MIDDLE:\n                    y = (anchorBottom + anchorTop - childHeight) / 2;\n                    break;\n                case ALIGN.BOTTOM:\n                    y = anchorBottom - childHeight;\n                    break;\n            }\n\n            child.layout(x, y, x + childWidth, y + childHeight);\n        }\n    }\n\n    onMeasure(widthLimit: number, heightLimit: number, widthMode: MeasureMode, heightMode: MeasureMode): void\n    {\n        const children = this.host.widgetChildren;\n\n        let naturalWidth = 0;\n        let naturalHeight = 0;\n\n        const baseWidthMode = widthMode === MeasureMode.EXACTLY ? MeasureMode.AT_MOST : widthMode;\n        const baseHeightMode = heightMode === MeasureMode.EXACTLY ? MeasureMode.AT_MOST : heightMode;\n\n        let hasFillers = false;\n\n        // First pass: measure children and find our natural width/height. If we have a upper\n        // limit, then pass that on.\n        for (let i = 0, j = children.length; i < j; i++)\n        {\n            const widget = children[i];\n            const lopt = (widget.layoutOptions || LayoutOptions.DEFAULT) as AnchorLayoutOptions;\n\n            if (lopt.width === LayoutOptions.FILL_PARENT)\n            {\n                throw new Error('AnchorLayout does not support width = FILL_PARENT. Use anchorLeft = 0 & anchorRight = 0');\n            }\n            if (lopt.height === LayoutOptions.FILL_PARENT)\n            {\n                throw new Error('AnchorLayout does not support height = FILL_PARENT. Use anchorTop = 0 & anchorBottom = 0');\n            }\n\n            const anchorLeft = this.calculateAnchor(lopt.anchorLeft || 0, widthLimit, false);\n            const anchorTop = this.calculateAnchor(lopt.anchorTop || 0, heightLimit, false);\n            const anchorRight = this.calculateAnchor(lopt.anchorRight || 0, widthLimit, true);\n            const anchorBottom = this.calculateAnchor(lopt.anchorBottom || 0, heightLimit, true);\n\n            // Does child have a pre-determined width or height?\n            const widthConst = lopt.isWidthPredefined;\n            const heightConst = lopt.isHeightPredefined;\n            const widgetWidthLimit = widthConst ? lopt.width : anchorRight - anchorLeft;\n            const widgetHeightLimit = heightConst ? lopt.height : anchorBottom - anchorTop;\n\n            const widgetWidthMode = widthConst ? MeasureMode.EXACTLY : baseWidthMode;\n            const widgetHeightMode = heightConst ? MeasureMode.EXACTLY : baseHeightMode;\n\n            // Fillers need to be remeasured using EXACTLY.\n            hasFillers = hasFillers || lopt.width === 0 || lopt.height === 0;\n\n            widget.measure(widgetWidthLimit, widgetHeightLimit, widgetWidthMode, widgetHeightMode);\n\n            const horizontalReach = this.calculateReach(\n                lopt.anchorLeft || 0, lopt.anchorRight || 0, widget.getMeasuredWidth());\n            const verticalReach = this.calculateReach(\n                lopt.anchorTop || 0, lopt.anchorBottom || 0, widget.getMeasuredHeight());\n\n            naturalWidth = Math.max(naturalWidth, horizontalReach);\n            naturalHeight = Math.max(naturalHeight, verticalReach);\n        }\n\n        this.measuredWidth = Widget.resolveMeasuredDimen(naturalWidth, widthLimit, widthMode);\n        this.measuredHeight = Widget.resolveMeasuredDimen(naturalHeight, heightLimit, heightMode);\n\n        if (!hasFillers)\n        {\n            return;\n        }\n\n        // Handle fillers.\n        for (let i = 0, j = children.length; i < j; i++)\n        {\n            const widget = children[i];\n            const lopt = (widget.layoutOptions || LayoutOptions.DEFAULT) as AnchorLayoutOptions;\n\n            if (lopt.width === 0 || lopt.height === 0)\n            {\n                const anchorLeft = this.calculateAnchor(lopt.anchorLeft || 0, this.measuredWidth, false);\n                const anchorTop = this.calculateAnchor(lopt.anchorTop || 0, this.measuredHeight, false);\n                const anchorRight = this.calculateAnchor(lopt.anchorRight || 0, this.measuredWidth, true);\n                const anchorBottom = this.calculateAnchor(lopt.anchorBottom || 0, this.measuredHeight, true);\n\n                widget.measure(\n                    lopt.isWidthPredefined ? lopt.width : anchorRight - anchorLeft,\n                    lopt.isHeightPredefined ? lopt.height : anchorBottom - anchorTop,\n                    lopt.width === 0 || lopt.isWidthPredefined ? MeasureMode.EXACTLY : MeasureMode.AT_MOST,\n                    lopt.height === 0 || lopt.isHeightPredefined ? MeasureMode.EXACTLY : MeasureMode.AT_MOST,\n                );\n            }\n        }\n    }\n\n    getMeasuredWidth(): number\n    {\n        return this.measuredWidth;\n    }\n\n    getMeasuredHeight(): number\n    {\n        return this.measuredHeight;\n    }\n\n    /**\n     * Calculates the actual value of the anchor, given the parent's dimension.\n     *\n     * @param {number} anchor - anchor as given in layout options\n     * @param {number} limit - parent's dimension\n     * @param {boolean} limitSubtract - true for right/bottom anchors, false for left/top\n     */\n    protected calculateAnchor(anchor: number, limit: number, limitSubtract: boolean): number\n    {\n        const offset = Math.abs(anchor) < 1 ? anchor * limit : anchor;\n\n        return limitSubtract ? limit - offset : offset;\n    }\n\n    /**\n     * Calculates the \"reach\" of a child widget, which is the minimum dimension of\n     * the parent required to fully fit the child.\n     *\n     * @param {number} startAnchor - left or top anchor as given in layout options\n     * @param {number} endAnchor - right or bottom anchor as given in layout options\n     * @param {number} dimen - measured dimension of the widget (width or height)\n     */\n    protected calculateReach(startAnchor: number, endAnchor: number, dimen: number): number\n    {\n        if (Math.abs(startAnchor) < 1 && Math.abs(endAnchor) < 1)\n        {\n            return dimen / (1 - endAnchor - startAnchor);\n        }\n        else if (Math.abs(startAnchor) < 1)\n        {\n            return (endAnchor + dimen) / (1 - startAnchor);\n        }\n        else if (Math.abs(endAnchor) < 1)\n        {\n            return (startAnchor + dimen) / (1 - endAnchor);\n        }\n\n        return startAnchor + dimen + endAnchor;\n    }\n}\n","import { ALIGN } from './Align';\nimport { LayoutOptions } from './LayoutOptions';\n\ninterface IAnchorLayoutParams\n{\n    anchorLeft?: number;\n    anchorTop?: number;\n    anchorRight?: number;\n    anchorBottom?: number;\n    horizontalAlign?: ALIGN;\n    verticalAlign?: ALIGN;\n    width: number | string;\n    height: number | string;\n}\n\n/**\n * @memberof PUXI\n * @interface IAnchorLayoutParams\n * @property {number} anchorLeft - distance from parent's left inset to child's left edge\n * @property {number} anchorTop - distance from parent's top inset to child's top edge\n * @property {number} anchorRight - distance from parent's right inset to child's right edge\n * @property {number} anchorBottom - distance from parent's bottom insets to child's bottom edge\n * @property {PUXI.ALIGN} horizontalAlign - horizontal alignment of child in anchor region\n * @property {PUXI.ALIGN} verticalAlign - vertical alignment of child in anchor region\n * @property {number | string} width - requested width of widget (default is `WRAP_CONTENT`)\n * @property {number | string} height - requested height of widget (default is `WRAP_CONTENT`)\n */\n\n/**\n * Anchors the edge of a widget to defined offsets from the parent's insets.\n *\n * The following example will render a widget at (10px, 15%) with a width extending\n * to the parent's center and a height extending till 40px above the parent's bottom\n * inset.\n * ```js\n * new PUXI.AnchoredLayoutOptions({\n *      anchorLeft: 10,\n *      anchorTop: .15,\n *      anchorRight: .5,\n *      anchorBottom: 40\n * });\n * ```\n *\n * ### Intra-anchor region alignment\n *\n * You can specify how the widget should be aligned in the intra-anchor region using the\n * `horizontalAlign` and `verticalAlign` properties.\n *\n * ### Support for FILL_PARENT and percentage-of-parent dimensions\n *\n * Anchor layout does not support a width/height that is `LayoutOptions.FILL_PARENT`\n * or a percentage of the parent's width/height. Instead, you can define anchors that\n * result in the equivalent behaviour.\n *\n * @memberof PUXI\n * @extends PUXI.LayoutOptions\n * @class\n */\nexport class AnchorLayoutOptions extends LayoutOptions\n{\n    public anchorLeft: number;\n    public anchorTop: number;\n    public anchorRight: number;\n    public anchorBottom: number;\n\n    public horizontalAlign: ALIGN;\n    public verticalAlign: ALIGN;\n\n    constructor(options: IAnchorLayoutParams)\n    {\n        super(options.width, options.height);\n\n        this.anchorLeft = options.anchorLeft || 0;\n        this.anchorTop = options.anchorTop || 0;\n        this.anchorBottom = options.anchorBottom || 0;\n        this.anchorRight = options.anchorRight || 0;\n\n        this.horizontalAlign = options.horizontalAlign || ALIGN.LEFT;\n        this.verticalAlign = options.verticalAlign || ALIGN.CENTER;\n    }\n}\n","import { FocusableWidget, IFocusableOptions } from './FocusableWidget';\nimport { ClickManager } from './event/ClickManager';\nimport { InteractiveGroup } from './InteractiveGroup';\nimport { LayoutOptions, FastLayoutOptions } from './layout-options';\nimport { CheckGroup } from './ctl';\nimport { TextWidget } from './TextWidget';\n\ninterface ICheckBoxOptions extends IFocusableOptions\n{\n    checked?: boolean;\n    background: PIXI.Container;\n    checkmark?: PIXI.Container;\n    checkGroup?: CheckGroup;\n    value?: string;\n    tabIndex?: number;\n    tabGroup?: number;\n}\n\n/**\n * @memberof PUXI\n * @extends PUXI.IFocusableOptions\n * @member {boolean} checked\n * @member {PIXI.Container}[checkmark]\n * @member {PUXI.CheckGroup}[checkGroup]\n * @member {string}[value]\n */\n\n/**\n * A checkbox is a button can be selected (checked). It has a on/off state that\n * can be controlled by the user.\n *\n * When used in a checkbox group, the group will control whether the checkbox can\n * be selected or not.\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.FocusableWidget\n */\nexport class CheckBox extends FocusableWidget\n{\n    private _checked: boolean;\n    private _value: string;\n\n    private label: TextWidget;\n    private checkmark: InteractiveGroup;\n\n    checkGroup: CheckGroup;\n\n    /**\n     * @param {PUXI.ICheckBoxOptions} options\n     * @param [options.checked=false] {bool} is checked\n     * @param options.background {(PIXI.UI.SliceSprite|PIXI.UI.Sprite)} will be used as background for CheckBox\n     * @param options.checkmark {(PIXI.UI.SliceSprite|PIXI.UI.Sprite)} will be used as checkmark for CheckBox\n     * @param {PUXI.CheckGroup}[options.checkGroup=null] CheckGroup name\n     * @param options.value {String} mostly used along with checkgroup\n     * @param [options.tabIndex=0] {Number} input tab index\n     * @param [options.tabGroup=0] {Number|String} input tab group\n     */\n    constructor(options: ICheckBoxOptions)\n    {\n        super(options);\n        this._checked = options.checked !== undefined ? options.checked : false;\n        this._value = options.value || '';\n        this.checkGroup = options.checkGroup || null;\n\n        this.checkmark = new InteractiveGroup();\n        this.checkmark.contentContainer.addChild(options.checkmark);\n        this.checkmark.setLayoutOptions(\n            new FastLayoutOptions({\n                width: LayoutOptions.WRAP_CONTENT,\n                height: LayoutOptions.WRAP_CONTENT,\n                x: 0.5,\n                y: 0.5,\n                anchor: FastLayoutOptions.CENTER_ANCHOR,\n            }),\n        );\n        this.checkmark.alpha = this._checked ? 1 : 0;\n        this.addChild(this.checkmark);\n\n        this.contentContainer.buttonMode = true;\n    }\n\n    update(): void\n    {\n        // No need for updating\n    }\n\n    get checked(): boolean\n    {\n        return this._checked;\n    }\n    set checked(val: boolean)\n    {\n        if (val !== this._checked)\n        {\n            if (this.checkGroup !== null && val)\n            {\n                this.stage.checkBoxGroupController.notifyCheck(this);\n            }\n\n            this._checked = val;\n            this.change(val);\n        }\n    }\n\n    get value(): string\n    {\n        return this._value;\n    }\n    set value(val: string)\n    {\n        this._value = val;\n\n        if (this.checked)\n        {\n            this.stage.checkBoxGroupController.notifyCheck(this);\n        }\n    }\n\n    get selectedValue(): string\n    {\n        return this.stage\n            ?.checkBoxGroupController\n            .getSelected(this.checkGroup)\n            .value;\n    }\n\n    initialize(): void\n    {\n        super.initialize();\n\n        const clickMgr = (this.eventBroker.click as ClickManager);\n\n        clickMgr.onHover = (_, over): void =>\n        {\n            this.emit('hover', over);\n        };\n\n        clickMgr.onPress = (e, isPressed): void =>\n        {\n            if (isPressed)\n            {\n                this.focus();\n                e.data.originalEvent.preventDefault();\n            }\n\n            this.emit('press', isPressed);\n        };\n\n        clickMgr.onClick = (): void =>\n        {\n            this.click();\n        };\n\n        if (this.checkGroup !== null)\n        {\n            this.stage.checkBoxGroupController.in(this, this.checkGroup);\n        }\n    }\n\n    protected change = (val: boolean): void =>\n    {\n        if (this.checkmark)\n        {\n            this.checkmark.alpha = val ? 1 : 0;\n        }\n    };\n\n    protected click = (): void =>\n    {\n        this.emit('click');\n\n        if (this.checkGroup !== null && this.checked)\n        {\n            return;\n        }\n\n        this.checked = !this.checked;\n        this.emit('changed', this.checked);\n    };\n\n    /**\n     * This event is fired when the user's cursor hovers over this checkbox.\n     * @event hover\n     */\n\n    /**\n     * This event is fired when the user clicks on the checkbox, regardless of whether\n     * the checkbox was selected or deselected.\n     * @event click\n     */\n\n    /**\n     * This event is fired when the user selects/deselects the checkbox, i.e. the \"value\"\n     * of the checkbox changes. This is also fired when setting the `checked` property\n     * directly.\n     * @event changed\n     * @param {boolean} checked - whether the checkbox is checked\n     */\n}\n\n/*\n * Features:\n * checkbox, radio button (checkgroups)\n *\n * Methods:\n * blur()\n * focus()\n * change(checked) //only exposed to overwrite (if you dont want to hard toggle alpha of checkmark)\n *\n * Properties:\n * checked: get/set checkbox checked\n * value: get/set checkbox value\n * selectedValue: get/set selected value for checkgroup\n *\n * Events:\n * \"hover\"          param: [bool]isHover (hover/leave)\n * \"press\"          param: [bool]isPressed (pointerdown/pointerup)\n * \"click\"\n * \"blur\"\n * \"focus\"\n * \"focusChanged\"   param: [bool]isFocussed\n * \"change\"         param: [bool]isChecked\n *\n */\n","import { IButtonOptions, Button } from './Button';\nimport { ImageWidget } from './Sprite';\nimport { Texture } from 'pixi.js';\nimport { LinearLayout } from './layout-manager';\n\nexport interface IImageButtonOptions extends IButtonOptions\n{\n    icon: string | Texture | ImageWidget;\n}\n\nexport class ImageButton extends Button\n{\n    iconWidget: ImageWidget;\n\n    constructor(options: IImageButtonOptions)\n    {\n        super(options);\n\n        if (!(options.icon instanceof ImageWidget))\n        {\n            const texture = options.icon instanceof Texture ? options.icon\n                : Texture.from(options.icon);\n\n            options.icon = new ImageWidget(texture);\n        }\n\n        this.textWidget.setLayoutOptions(null);// a little redundant maybe?\n        this.iconWidget = options.icon;\n\n        this.removeChild(this.textWidget);\n        this.addChild(this.iconWidget);\n        this.addChild(this.textWidget);\n\n        this.useLayout(new LinearLayout('vertical'));\n    }\n}\n","import { Widget } from './Widget';\nimport * as PIXI from 'pixi.js';\n\n/**\n * A sliced sprite with dynamic width and height.\n *\n * @class\n * @memberof PUXI\n * @param Texture {PIXI.Texture} the texture for this SliceSprite\n * @param BorderWidth {Number} Width of the sprite borders\n * @param horizontalSlice {Boolean} Slice the sprite horizontically\n * @param verticalSlice {Boolean} Slice the sprite vertically\n * @param [tile=false] {Boolean} tile or streach\n */\nexport class SliceSprite extends Widget\n{\n    ftl: PIXI.Rectangle;\n    ftr: PIXI.Rectangle;\n\n    fbl: PIXI.Rectangle;\n    fbr: PIXI.Rectangle;\n\n    ft: PIXI.Rectangle;\n    fb: PIXI.Rectangle;\n    fr: PIXI.Rectangle;\n    fl: PIXI.Rectangle;\n    ff: PIXI.Rectangle;\n\n    stl: PIXI.Sprite;\n    str: PIXI.Sprite;\n    sbl: PIXI.Sprite;\n    sbr: PIXI.Sprite;\n\n    st: PIXI.Sprite;\n    sb: PIXI.Sprite;\n    sl: PIXI.Sprite;\n    sr: PIXI.Sprite;\n\n    sf: PIXI.Sprite;\n\n    bw: number;\n    vs: boolean;\n    hs: boolean;\n    t: PIXI.BaseTexture;\n    f: PIXI.Rectangle;\n\n    tile: any;\n\n    constructor(texture: PIXI.Texture, borderWidth, horizontalSlice, verticalSlice, tile)\n    {\n        super(texture.width, texture.height);\n\n        this.bw = borderWidth || 5;\n        this.vs = typeof verticalSlice !== 'undefined' ? verticalSlice : true;\n        this.hs = typeof horizontalSlice !== 'undefined' ? horizontalSlice : true;\n        this.t = texture.baseTexture;\n        this.f = texture.frame;\n        this.tile = tile;\n\n        if (this.hs)\n        {\n            this.setting.minWidth = borderWidth * 2;\n        }\n        if (this.vs)\n        {\n            this.setting.minHeight = borderWidth * 2;\n        }\n\n        /**\n     * Updates the sliced sprites position and size\n     *\n     * @private\n     */\n        this.update = function ()\n        {\n            if (!this.initialized) return;\n            if (vs && hs)\n            {\n                str.x = sbr.x = sr.x = this._width - bw;\n                sbl.y = sbr.y = sb.y = this._height - bw;\n                sf.width = st.width = sb.width = this._width - bw * 2;\n                sf.height = sl.height = sr.height = this._height - bw * 2;\n            }\n            else if (hs)\n            {\n                sr.x = this._width - bw;\n                sl.height = sr.height = sf.height = this._height;\n                sf.width = this._width - bw * 2;\n            }\n            else\n            { // vs\n                sb.y = this._height - bw;\n                st.width = sb.width = sf.width = this._width;\n                sf.height = this._height - bw * 2;\n            }\n\n            if (this.tint !== null)\n            {\n                sf.tint = this.tint;\n                if (vs && hs) stl.tint = str.tint = sbl.tint = sbr.tint = this.tint;\n                if (hs) sl.tint = sr.tint = this.tint;\n                if (vs) st.tint = sb.tint = this.tint;\n            }\n\n            if (this.blendMode !== null)\n            {\n                sf.blendMode = this.blendMode;\n                if (vs && hs) stl.blendMode = str.blendMode = sbl.blendMode = sbr.blendMode = this.blendMode;\n                if (hs) sl.blendMode = sr.blendMode = this.blendMode;\n                if (vs) st.blendMode = sb.blendMode = this.blendMode;\n            }\n        };\n    }\n\n    initialize()\n    {\n        super.initialize();\n        const { f, bw } = this;\n\n        // get frames\n        if (this.vs && this.hs)\n        {\n            this.ftl = new PIXI.Rectangle(f.x, f.y, bw, bw);\n            this.ftr = new PIXI.Rectangle(f.x + f.width - bw, f.y, bw, bw);\n            this.fbl = new PIXI.Rectangle(f.x, f.y + f.height - bw, bw, bw);\n            this.fbr = new PIXI.Rectangle(f.x + f.width - bw, f.y + f.height - bw, bw, bw);\n            this.ft = new PIXI.Rectangle(f.x + bw, f.y, f.width - bw * 2, bw);\n            this.fb = new PIXI.Rectangle(f.x + bw, f.y + f.height - bw, f.width - bw * 2, bw);\n            this.fl = new PIXI.Rectangle(f.x, f.y + bw, bw, f.height - bw * 2);\n            this.fr = new PIXI.Rectangle(f.x + f.width - bw, f.y + bw, bw, f.height - bw * 2);\n            this.ff = new PIXI.Rectangle(f.x + bw, f.y + bw, f.width - bw * 2, f.height - bw * 2);\n        }\n        else if (this.hs)\n        {\n            this.fl = new PIXI.Rectangle(this.f.x, f.y, bw, f.height);\n            this.fr = new PIXI.Rectangle(f.x + f.width - bw, f.y, bw, f.height);\n            this.ff = new PIXI.Rectangle(f.x + bw, f.y, f.width - bw * 2, f.height);\n        }\n        else\n        { // vs\n            this.ft = new PIXI.Rectangle(f.x, f.y, f.width, bw);\n            this.fb = new PIXI.Rectangle(f.x, f.y + f.height - bw, f.width, bw);\n            this.ff = new PIXI.Rectangle(f.x, f.y + bw, f.width, f.height - bw * 2);\n        }\n\n        // TODO: swap frames if rotation\n\n        const { t, ff, fl, fr, ft, fb } = this;\n\n        // make sprites\n        this.sf = this.tile\n            ? new PIXI.TilingSprite(new PIXI.Texture(t, ff))\n            : new PIXI.Sprite(new PIXI.Texture(t, ff));\n        this.contentContainer.addChildAt(this.sf, 0);\n\n        if (this.vs && this.hs)\n        {\n            this.stl = new PIXI.Sprite(new PIXI.Texture(t, this.ftl));\n            this.str = new PIXI.Sprite(new PIXI.Texture(t, this.ftr));\n            this.sbl = new PIXI.Sprite(new PIXI.Texture(t, this.fbl));\n            this.sbr = new PIXI.Sprite(new PIXI.Texture(t, this.fbr));\n            this.contentContainer.addChildAt(this.stl, 0);\n            this.contentContainer.addChildAt(this.str, 0);\n            this.contentContainer.addChildAt(this.sbl, 0);\n            this.contentContainer.addChildAt(this.sbr, 0);\n        }\n        if (hs)\n        {\n            this.sl = this.tile\n                ? new PIXI.TilingSprite(new PIXI.Texture(t, fl))\n                : new PIXI.Sprite(new PIXI.Texture(t, fl));\n            this.sr = this.tile\n                ? new PIXI.TilingSprite(new PIXI.Texture(t, fr))\n                : new PIXI.Sprite(new PIXI.Texture(t, fr));\n\n            this.contentContainer.addChildAt(this.sl, 0);\n            this.contentContainer.addChildAt(this.sr, 0);\n        }\n        if (this.vs)\n        {\n            this.st = this.tile\n                ? new PIXI.TilingSprite(new PIXI.Texture(t, ft))\n                : new PIXI.Sprite(new PIXI.Texture(t, ft));\n            this.sb = this.tile\n                ? new PIXI.TilingSprite(new PIXI.Texture(t, fb))\n                : new PIXI.Sprite(new PIXI.Texture(t, fb));\n            this.contentContainer.addChildAt(this.st, 0);\n            this.contentContainer.addChildAt(this.sb, 0);\n        }\n\n        // set constant position and sizes\n        if (this.vs && this.hs)\n        {\n            this.st.x = bw;\n            this.sb.x = bw;\n            this.sl.y = bw;\n            this.sr.y = bw;\n            this.stl.width = bw;\n            this.str.width = bw;\n            this.sbl.width = bw;\n            this.sbr.width = bw;\n            this.stl.height = bw;\n            this.str.height = bw;\n            this.sbl.height = bw;\n            this.sbr.height = bw;\n        }\n\n        if (this.hs)\n        {\n            this.sf.x = this.sl.width = this.sr.width = bw;\n        }\n        if (this.vs)\n        {\n            this.sf.y = this.st.height = this.sb.height = bw;\n        }\n    }\n\n    update(): void\n    {\n        // NO updates\n    }\n}\n\n","import { InteractiveGroup } from './InteractiveGroup';\nimport { Tween } from './Tween';\nimport { EaseBase } from './Ease/EaseBase';\nimport { Widget } from './Widget';\n\n/**\n * An UI Container object\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.Widget\n * @param desc {Boolean} Sort the list descending\n * @param tweenTime {Number} if above 0 the sort will be animated\n * @param tweenEase {PIXI.UI.Ease} ease method used for animation\n */\nexport class SortableList extends InteractiveGroup\n{\n    desc: boolean;\n    tweenTime: number;\n    tweenEase: EaseBase;\n    items: any[];\n\n    _sortTimeout: NodeJS.Timeout;\n\n    constructor(desc, tweenTime, tweenEase)\n    {\n        super(0, 0);\n\n        this.desc = typeof desc !== 'undefined' ? desc : false;\n        this.tweenTime = tweenTime || 0;\n        this.tweenEase = tweenEase;\n        this.items = [];\n    }\n\n    addChild(UIObject: any, fnValue?, fnThenBy?): void\n    {\n        super.addChild(UIObject);\n\n        if (this.items.indexOf(UIObject) === -1)\n        {\n            this.items.push(UIObject);\n        }\n\n        if (typeof fnValue === 'function')\n        {\n            UIObject._sortListValue = fnValue;\n        }\n\n        if (typeof fnThenBy === 'function')\n        {\n            UIObject._sortListThenByValue = fnThenBy;\n        }\n\n        if (!UIObject._sortListRnd)\n        {\n            UIObject._sortListRnd = Math.random();\n        }\n\n        this.sort();\n    }\n\n    removeChild(UIObject): void\n    {\n        if (arguments.length > 1)\n        {\n            for (let i = 0; i < arguments.length; i++)\n            {\n                this.removeChild(arguments[i]);\n            }\n        }\n        else\n        {\n            super.removeChild(UIObject);\n            const index = this.items.indexOf(UIObject);\n\n            if (index !== -1)\n            {\n                this.items.splice(index, 1);\n            }\n\n            this.sort();\n        }\n    }\n\n    sort(instant = false): void\n    {\n        clearTimeout(this._sortTimeout);\n\n        if (instant)\n        {\n            this._sort();\n\n            return;\n        }\n\n        this._sortTimeout = setTimeout(() => { this._sort(); }, 0);\n    }\n\n    _sort()\n    {\n        const desc = this.desc;\n        let y = 0;\n        let alt = true;\n\n        this.items.sort(function (a, b)\n        {\n            let res = a._sortListValue() < b._sortListValue() ? desc ? 1 : -1\n                : a._sortListValue() > b._sortListValue() ? desc ? -1 : 1 : 0;\n\n            if (res === 0 && a._sortListThenByValue && b._sortListThenByValue)\n            {\n                res = a._sortListThenByValue() < b._sortListThenByValue() ? desc ? 1 : -1\n                    : a._sortListThenByValue() > b._sortListThenByValue() ? desc ? -1 : 1 : 0;\n            }\n            if (res === 0)\n            {\n                res = a._sortListRnd > b._sortListRnd ? 1\n                    : a._sortListRnd < b._sortListRnd ? -1 : 0;\n            }\n\n            return res;\n        });\n\n        for (let i = 0; i < this.items.length; i++)\n        {\n            const item = this.items[i];\n\n            alt = !alt;\n\n            if (this.tweenTime > 0)\n            {\n                Tween.fromTo(item, this.tweenTime, { x: item.x, y: item.y }, { x: 0, y }, this.tweenEase);\n            }\n            else\n            {\n                item.x = 0;\n                item.y = y;\n            }\n            y += item.height;\n            if (typeof item.altering === 'function')\n            { item.altering(alt); }\n        }\n\n        // force it to update parents when sort animation is done (prevent scrolling container bug)\n        if (this.tweenTime > 0)\n        {\n            setTimeout(() =>\n            {\n                this.updatesettings(false, true);\n            }, this.tweenTime * 1000);\n        }\n    }\n}\n\n","import * as PIXI from 'pixi.js';\nimport { Widget } from './Widget';\n\n/**\n * An UI sprite object\n *\n * @class\n * @extends PIXI.UI.UIBase\n * @memberof PIXI.UI\n * @param Texture {PIXI.Texture} The texture for the sprite\n * @param [Width=Texture.width] {number} Width of tilingsprite\n * @param [Height=Texture.height] {number} Height of tiling sprite\n */\nexport class TilingSprite extends Widget\n{\n    protected sprite: PIXI.TilingSprite;\n\n    constructor(t, width: number, height: number)\n    {\n        const sprite = new PIXI.TilingSprite(t);\n\n        super(width || sprite.width, height || sprite.height);\n\n        this.sprite = sprite;\n        this.contentContainer.addChild(this.sprite);\n    }\n\n    /**\n     * Updates the text\n     *\n     * @private\n     */\n    update(): void\n    {\n        if (this.tint !== null)\n        { this.sprite.tint = this.tint; }\n\n        if (this.blendMode !== null)\n        { this.sprite.blendMode = this.blendMode; }\n\n        this.sprite.width = this._width;\n        this.sprite.height = this._height;\n    }\n\n    get tilePosition(): any\n    {\n        return this.sprite.tilePosition;\n    }\n    set tilingPosition(val: any)\n    {\n        this.sprite.tilePosition = val;\n    }\n\n    get tileScale(): number\n    {\n        return this.sprite.tileScale;\n    }\n    set tileScale(val: number)\n    {\n        this.sprite.tileScale = val;\n    }\n}\n"],"names":["_items","DragDropController","add","item","event","_dragDropEventId","data","identifier","indexOf","push","[object Object]","object","index","i","length","splice","group","id","dragGroup","Insets","this","reset","dirtyId","left","top","right","bottom","MeasureMode","EventManager","target","isEnabled","ClickManager","includeHover","rightMouseButton","doubleClick","super","_includeHover","_rightMouseButton","_doubleClick","insetContainer","on","evMouseDown","onMouseDownImpl","onMouseOverImpl","onMouseOutImpl","bound","removeListener","evMouseUp","onMouseUpImpl","evMouseUpOutside","onMouseUpOutsideImpl","onMouseMoveImpl","obj","_onMouseUp","_onMouseUpOutside","mouse","copyFrom","global","onPress","call","now","performance","time","onClick","originalEvent","preventDefault","offset","set","x","y","onMouseUpCommonImpl","dragThreshold","movementX","Math","abs","movementY","max","ishover","onHover","onMove","PIXI.Point","interactive","startEvent","val","DragManager","e","isBound","dragStart","stage","onDragMoveImpl","onDragEndImpl","lastCursor","dragOffset","isDragging","dragRestrictAxis","cancel","onDragStart","onDragMove","onDragEnd","onDragStartImpl","EventBroker","mgr","Object","keys","MANAGER_MAP","defineProperty","click","dnd","ScrollManager","delta","deltaX","deltaY","axis","detail","onMouseScroll","onMouseScrollImpl","document","addEventListener","removeEventListener","onHoverImpl","contentContainer","PADDING_PROPERTIES","PADDING_AXIS_PROPERTIES","TEXT_STYLE_PROPERTIES","Widget","PIXI.utils","EventEmitter","PIXI.Container","addChild","widgetChildren","layoutMeasure","initialized","dragInitialized","dropInitialized","dirty","_oldWidth","_oldHeight","pixelPerfect","_paddingLeft","_paddingTop","_paddingRight","_paddingBottom","_elevation","tint","blendMode","PIXI.BLEND_MODES","NORMAL","draggable","droppable","singleClickTimeout","style","styleID","onPointerPress","onPointerMove","onPointerRelease","onPointerEnter","onPointerExit","onRightClick","_layoutDirty","setTimeout","measureAndLayout","dirtyID","onStyleChange","measuredWidth","_measuredWidth","measuredHeight","_measuredHeight","width","height","widthMode","heightMode","naturalWidth","paddingHorizontal","naturalHeight","paddingVertical","EXACTLY","UNBOUNDED","AT_MOST","min","onMeasure","l","t","r","b","_width","_height","background","onLayout","lopt","layoutOptions","styleData","getProperties","setBackground","backgroundColor","elevation","setElevation","forEach","propName","padding","onHoverChange","clearTimeout","onDoubleClick","CLICK_DELAY","hover","console","log","contextMenu","contextPopup","getLocalPosition","eventBroker","_eventBroker","paddingLeft","paddingTop","paddingRight","paddingBottom","contentWidth","contentHeight","alpha","bg","removeChild","string2hex","PIXI.Graphics","beginFill","drawRect","endFill","addChildAt","_dropShadow","filters","menu","DropShadowFilter","distance","widgets","widget","parent","initDraggable","stopEvent","initDroppable","realPosition","dragPosition","added","position","emit","getItem","onDrop","container","getEventItem","dropGroup","droppableReparent","self","toLocal","content","natural","limit","mode","ALIGN","LayoutOptions","WRAP_CONTENT","setWidth","setHeight","cache","parseDimen","isWidthPredefined","MAX_DIMEN","isHeightPredefined","marginLeft","_marginLeft","marginTop","_marginTop","marginRight","_marginRight","marginBottom","_marginBottom","endsWith","parseFloat","replace","isNaN","Error","FastLayoutOptions","options","anchor","DEFAULT_ANCHOR","clone","BorderLayoutOptions","region","REGION_CENTER","horizontalAlign","LEFT","verticalAlign","TOP","FastLayout","host","children","j","DEFAULT","getMeasuredWidth","getMeasuredHeight","layout","maxWidth","maxHeight","loptWidth","loptHeight","widthMeasureMode","getChildMeasureMode","heightMeasureMode","measure","measureWidthReach","measureHeightReach","measureChildFillers","dimen","parentMeasureMode","parentWidthLimit","childWidth","minr","parentHeightLimit","childHeight","minb","FILL_PARENT","WidgetGroup","layoutMgr","onDetach","onAttach","useLayout","useDefaultLayout","InteractiveGroup","hitArea","PIXI.Rectangle","update","FocusableWidget","onDocumentPointerDownImpl","onKeyDownImpl","off","focusCtl","focusController","which","useTab","onTab","useBack","onBack","useForward","onForward","_isMousePressed","blur","_isFocused","tabIndex","tabGroup","focus","isFocused","notifyFocus","bindEvents","notifyBlur","clearEvents","initialize","in","TextWidget","text","textStyle","textDisplay","PIXI.Text","fill","startsWith","parseInt","slice","value","undefined","Button","isHover","PIXI.TextStyle","textWidget","setLayoutOptions","CENTER_ANCHOR","buttonMode","interactiveChildren","EaseBase","p","ExponentialEase","power","easeIn","easeOut","pow","getPosition","prototype","create","constructor","Ease","HALF_PI","PI","fn","Linear","wrapEase","easeInFunction","easeOutFunction","easeInOutFunction","easeInOut","Power0","easeNone","Power1","Quad","Power2","Cubic","Power3","Quart","Power4","Quint","Bounce","BounceIn","BounceOut","BounceInOut","invert","Circ","CircIn","sqrt","CircOut","CircInOut","Expo","ExpoIn","ExpoOut","ExpoInOut","Sine","SineIn","cos","SineOut","sin","SineInOut","Helpers","Lerp","start","stop","amt","number","decimals","round","c","hex","toString","g","componentToHex","rgbToNumber","numberToRgb","floor","m","result","exec","Sprite","texture","spriteDisplay","PIXI.Sprite","imageUrl","PIXI.Texture","PIXI.BaseTexture","ImageWidget","REGION_LEFT","REGION_TOP","REGION_RIGHT","REGION_BOTTOM","BorderLayout","leftWidgets","topWidgets","rightWidgets","bottomWidgets","centerWidgets","clearMeasureCache","clearRegions","layoutChildren","measuredTopHeight","measuredLeftWidth","measuredCenterHeight","measuredRightWidth","measuredBottomHeight","measuredCenterWidth","regionX","regionY","regionWidth","regionHeight","CENTER","RIGHT","BOTTOM","indexRegions","childWidthMode","childHeightMode","tw","th","thmin","measureChildren","bw","bh","bhmin","cw","ch","cwmin","chmin","lw","lwmin","rw","rwmin","middleRowWidth","netWidth","netHeight","hmin","downscale","wmin","fitChildren","list","widthFixedLowerBound","heightFixedLowerBound","w","h","wmd","hmd","measuredRegionWidth","measuredRegionHeight","wm","hm","LinearLayout","orientation","gravity","breadth","u","v","widthLimit","heightLimit","baseWidthMode","baseHeightMode","widgetWidthLimit","widgetHeightLimit","widgetWidthMode","widgetHeightMode","Slider","percentValue","_disabled","_minValue","minValue","_maxValue","maxValue","HORIZONTAL","onValueChange","onValueChanging","track","fromContent","DEFAULT_HORIZONTAL_TRACK","DEFAULT_VERTICAL_TRACK","handle","DEFAULT_HANDLE","_localCursor","trackSize","startValue","triggerValueChange","_lastChange","triggerValueChanging","_lastChanging","updatePositionToMouse","mousePosition","soft","getValueAtPhysicalPosition","layoutHandle","handleDrag","stopPropagation","trackDrag","isPressed","Round","disabled","cursor","localCursor","range","handleWidth","handleHeight","handleX","handleY","VERTICAL","lineStyle","moveTo","lineTo","drawCircle","_tweenItemCache","_callbackItemCache","_tweenObjects","_activeTweenObjects","_currentId","TweenObject","tweens","active","onUpdate","CallbackItem","_ready","key","callback","currentTime","_tweenObjectId","_currentCallbackID","remove","TweenItem","from","to","ease","isColor","surfix","getSurfix","hexToRgb","currentColor","getToValue","widthKeys","heightKeys","getFromValue","getObject","getTweenItem","tween","getCallbackItem","cb","Tween","params","match","paramsFrom","paramsTo","ScrollBar","DEFAULT_TRACK","scrollingContainer","autohide","_hidden","forcePctPosition","setScrollPosition","hidden","ScrollWidget","direction","pct","bounds","getInnerBounds","innerContainer","scrollX","scrollY","scrollPosition","targetPosition","pos","dif","lastPosition","updateScrollBars","velocity","scrollVelocity","animating","PIXI.Ticker","shared","updateScrollPosition","updateDirection","scrolling","softness","exp","mask","innerBounds","dragScrolling","radius","expandMask","overflowY","overflowX","scrollBars","horizontalScrollBar","setBackgroundAlpha","verticalScrollBar","boundCached","lastWidth","lastHeight","of","clear","drawRoundedRect","scrollBar","newChildren","getPercentPosition","force","getLocalBounds","initScrolling","drag","_","scrollSpeed","Controller","Stage","__width","__height","minWidth","minHeight","resize","_checkBoxGroupCtl","CHECK_BOX_GROUP_CONTROLLER","_focusCtl","FOCUS_CONTROLLER","renderer","render","UIObject","argumentLenght","arguments","checkBoxGroupController","checkGroups","Map","checkGroup","get","initGroup","checks","checked","selected","cgroup","tabGroups","sort","a","lastItem","currentItem","Style","propertyName","superStyles","extends","superIndex","thisValue","computedData","superStyle","computedDirty","prop","compute","props","onParentSetProperty","assign","StyleSheet","sheetData","sheet","mockDOMInput","Ticker","autoStart","_now","DeltaTime","Time","Ms","_update","requestAnimationFrame","context","once","parentWidth","parentHeight","child","anchorLeft","calculateAnchor","anchorTop","anchorRight","anchorBottom","MIDDLE","hasFillers","widthConst","heightConst","horizontalReach","calculateReach","verticalReach","resolveMeasuredDimen","limitSubtract","startAnchor","endAnchor","checkmark","_checked","_value","notifyCheck","change","selectedValue","getSelected","clickMgr","over","icon","Texture","iconWidget","borderWidth","horizontalSlice","verticalSlice","tile","vs","hs","baseTexture","f","frame","setting","str","sbr","sr","sbl","sb","sf","st","sl","stl","ftl","ftr","fbl","fbr","ft","fb","fl","fr","ff","PIXI.TilingSprite","desc","tweenTime","tweenEase","items","fnValue","fnThenBy","_sortListValue","_sortListThenByValue","_sortListRnd","random","instant","_sortTimeout","_sort","alt","res","fromTo","altering","updatesettings","ctrlKey","cmdKey","ctrlDown","shiftKey","shiftDown","defaultPrevented","insertTextAtCaret","select","_lastValue","valueEvent","setCaretIndex","deleteSelection","caret","_index","chars","_atEnd","multiLine","vrdd","hasSelection","de","textHeightPX","lineHeight","updateClosestIndex","si","ei","sie","eie","_down","selectRange","selectionStart","selectionEnd","ds","rdd","_forward","startindex","endIndex","_i","selectIndex","clipboardData","window","setData","copyEvent","getData","worldTransform","tx","ty","setAttribute","cacheAsBitmap","inputBlurEvent","onKeyDown","keyUpEvent","pasteEvent","cutEvent","inputEvent","visible","selection","hideCaret","clearSelection","resetScrollPosition","wrapped","lineIndex","textHeight","scrollToPosition","showCaret","wordIndex","startIndex","end","updateSelectionGraphics","updateSelectionColors","c1","cx","cy","cl","drawSelectionRect","selectedBackgroundColor","createElement","body","appendChild","_dirtyText","maxLength","color","selectedColor","tempText","destroy","_startIndex","_endIndex","caretWidth","textContainer","setPadding","_useNext","_usePrev","sp","_sp","cc","textLengthPX","lineIndexMax","setupDrag","mouseDown","timeSinceLast","selectWord","_lastWidth","updateText","whitespace","newline","lastWordIndex","wrap","charText","scale","point","currentDistX","currentIndex","atEnd","closestLineIndex","char","distX","focusPosition","clearInterval","caretInterval","setInterval","sprite","tilePosition","tilingPosition","tileScale"],"mappings":"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"}