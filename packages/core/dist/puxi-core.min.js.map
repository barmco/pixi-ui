{"version":3,"file":"puxi-core.min.js","sources":["../src/event/DragDropController.js","../src/layout-options/Insets.ts","../src/IMeasurable.ts","../src/event/EventManager.ts","../src/event/ClickManager.ts","../src/event/DragManager.ts","../src/event/EventBroker.ts","../src/event/ScrollManager.ts","../src/Widget.ts","../src/layout-options/Align.ts","../src/layout-options/LayoutOptions.ts","../src/layout-options/FastLayoutOptions.ts","../src/layout-options/BorderLayoutOptions.ts","../src/layout-manager/FastLayout.ts","../src/WidgetGroup.ts","../src/InteractiveGroup.ts","../src/FocusableWidget.ts","../src/TextWidget.ts","../src/Button.ts","../src/Ease/EaseBase.js","../src/Ease/ExponentialEase.js","../src/Ease/Ease.js","../src/Helpers.ts","../src/Sprite.ts","../src/layout-manager/BorderLayout.ts","../src/layout-manager/LinearLayout.ts","../src/Slider.ts","../src/Tween.ts","../src/ScrollBar.ts","../src/ScrollWidget.ts","../src/ctl/Controller.ts","../src/Stage.ts","../src/ctl/CheckBoxGroupController.ts","../src/ctl/FocusController.ts","../src/Style.ts","../src/StyleSheet.ts","../src/TextInput.ts","../src/Ticker.ts","../src/layout-manager/AnchorLayout.ts","../src/layout-options/AnchorLayoutOptions.ts","../src/CheckBox.ts","../src/ImageButton.ts","../src/SliceSprite.ts","../src/SortableList.ts","../src/TilingSprite.ts"],"sourcesContent":["const _items = [];\nconst DragDropController = {\n    add(item, event)\n    {\n        item._dragDropEventId = event.data.identifier;\n        if (_items.indexOf(item) === -1)\n        {\n            _items.push(item);\n\n            return true;\n        }\n\n        return false;\n    },\n    getItem(object)\n    {\n        let item = null; let\n            index;\n\n        for (let i = 0; i < _items.length; i++)\n        {\n            if (_items[i] === object)\n            {\n                item = _items[i];\n                index = i;\n                break;\n            }\n        }\n\n        if (item !== null)\n        {\n            _items.splice(index, 1);\n\n            return item;\n        }\n\n        return false;\n    },\n    getEventItem(event, group)\n    {\n        let item = null; let index; const\n            id = event.data.identifier;\n\n        for (let i = 0; i < _items.length; i++)\n        {\n            if (_items[i]._dragDropEventId === id)\n            {\n                if (group !== _items[i].dragGroup)\n                {\n                    return false;\n                }\n                item = _items[i];\n                index = i;\n                break;\n            }\n        }\n\n        if (item !== null)\n        {\n            _items.splice(index, 1);\n\n            return item;\n        }\n\n        return false;\n    },\n};\n\nexport { DragDropController };\nexport default DragDropController;\n","/**\n * @memberof PUXI\n * @class\n */\nexport class Insets\n{\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n\n    dirtyId: number;\n\n    constructor()\n    {\n        this.reset();\n        this.dirtyId = 0;\n    }\n\n    reset(): void\n    {\n        this.left = -1;\n        this.top = -1;\n        this.right = -1;\n        this.bottom = -1;\n    }\n}\n","/**\n * These are the modes in which an entity can measures its dimension. They are\n * relevant when a layout needs to know the optimal sizes of its children.\n *\n * @memberof PUXI\n * @enum\n * @property {number} UNBOUNDED - no upper limit on bounds. This should calculate the optimal dimensions for the entity.\n * @property {number} EXACTLY - the entity should set its dimension to the one passed to it.\n * @property {number} AT_MOST - the entity should find an optimal dimension below the one passed to it.\n */\nexport enum MeasureMode\n{\n    UNBOUNDED = 0,\n    EXACTLY = 1,\n    AT_MOST = 2\n}\n\nexport interface IMeasurable\n{\n    onMeasure(maxWidth: number, maxHeight: number, widthMode: MeasureMode, heightMode: MeasureMode);\n    getMeasuredWidth(): number;\n    getMeasuredHeight(): number;\n}\n\n/**\n * Any renderable entity that can be used in a widget hierarchy must be\n * measurable.\n *\n * @memberof PUXI\n * @interface IMeasurable\n */\n\n/**\n * Measures its width & height based on the passed constraints.\n *\n * @memberof PUXI.IMeasurable#\n * @method onMeasure\n * @param {number} maxWidth\n * @param {number} maxHeight\n * @param {PUXI.MeasureMode} widthMode\n * @param {PUXI.MeasureMode} heightMode\n */\n\n/**\n * @memberof PUXI.IMeasurable#\n * @method getMeasuredWidth\n * @returns {number} - the measured width of the entity after a `onMeasure` call\n */\n\n/**\n * @memberof PUXI.IMeasurable#\n * @method getMeasuredHeight\n * @returns {number} - the measured height of the entity after a `onMeasure` call\n */\n","import { Widget } from '../Widget';\n\n/**\n * An event manager handles the states related to certain events and can augment\n * widget interaction. For example, the click manager will hide clicks when\n * the object is dragging.\n *\n * Event managers are lifecycle objects - they can start/stop. Their constructor\n * will always accept one argument - the widget. Other settings can be applied before\n * `startEvent`.\n *\n * Ideally, you should access event managers _after_ your widget has initialized. This is\n * because it may depend on the widget's stage being assigned.\n *\n * @memberof PUXI\n * @class\n * @abstract\n */\nexport abstract class EventManager\n{\n    protected target: Widget;\n    protected isEnabled: boolean;\n\n    /**\n     * @param {Widget} target\n     */\n    constructor(target: Widget)\n    {\n        this.target = target;\n        this.isEnabled = false;// use to track start/stopEvent\n    }\n\n    /**\n     * @returns {Widget}\n     */\n    getTarget(): Widget\n    {\n        return this.target;\n    }\n\n    /**\n     * Registers the interaction event listeners that will emit corresponding events\n     * on the target widget.\n     */\n    abstract startEvent(): any;\n\n    /**\n     * Unregisters any event listeners and releases any resources held. This should\n     * revert all changes made by `startEvent`.\n     */\n    abstract stopEvent(): any;\n}\n","import * as PIXI from 'pixi.js';\nimport { Widget } from '../Widget';\nimport { EventManager } from './EventManager';\n\n/**\n * `ClickManager` handles hover and click events. It registers listeners\n * for `mousedown`, `mouseup`, `mousemove`, `mouseout`, `mouseover`, `touchstart`,\n * `touchend`, `touchendoutside`, `touchmove`, `rightup`, `rightdown`, `rightupoutside`\n * events.\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.EventManager\n */\nexport class ClickManager extends EventManager\n{\n    onHover: (event: PIXI.InteractionEvent, over: boolean) => void;\n    onPress: (event: PIXI.InteractionEvent, isPressed: boolean) => void;\n    onClick: (event: PIXI.InteractionMouseEvents) => void;\n    onMove: (event: PIXI.InteractionEvent) => void;\n\n    protected _rightMouseButton: boolean;\n    protected _includeHover: boolean;\n    protected _doubleClick: boolean;\n\n    private bound: boolean;\n    private id: number;\n    private ishover: boolean;\n    protected target: Widget;\n\n    private movementX: number;\n    private movementY: number;\n    mouse: PIXI.Point;\n    offset: PIXI.Point;\n\n    private evMouseDown: string;\n    private evMouseUp: string;\n    private evMouseUpOutside: string;\n\n    time: number;\n\n    /**\n     * @param {PUXI.Widget | PUXI.Button} target\n     * @param {boolean}[includeHover=false] - enable hover (`mouseover`, `mouseout`) listeners\n     * @param {boolean}[rightMouseButton=false] - use right mouse clicks\n     * @param {boolean}[doubleClick=false] - fire double clicks\n     */\n    constructor(target: Widget, includeHover?: boolean, rightMouseButton?, doubleClick?: boolean)\n    {\n        super(target);\n\n        this.bound = false;\n        this.id = 0;\n        this.ishover = false;\n        this.mouse = new PIXI.Point();\n        this.offset = new PIXI.Point();\n        this.movementX = 0;\n        this.movementY = 0;\n\n        this._includeHover = typeof includeHover === 'undefined' ? true : includeHover;\n        this.rightMouseButton = typeof rightMouseButton === 'undefined' ? false : rightMouseButton;\n        this._doubleClick = typeof doubleClick === 'undefined' ? false : doubleClick;\n\n        target.interactive = true;\n\n        this.time = 0;\n        this.startEvent();\n\n        this.onHover = (): void => null;\n        this.onPress = (): void => null;\n        this.onClick = (): void => null;\n        this.onMove = (): void => null;\n    }\n\n    /**\n     * Whether right mice are used for clicks rather than left mice.\n     * @member boolean\n     */\n    get rightMouseButton(): boolean\n    {\n        return this._rightMouseButton;\n    }\n    set rightMouseButton(val: boolean)\n    {\n        this._rightMouseButton = val;\n\n        this.evMouseDown = this._rightMouseButton ? 'rightdown' : 'mousedown';\n        this.evMouseUp = this._rightMouseButton ? 'rightup' : 'mouseup';\n        this.evMouseUpOutside = this._rightMouseButton ? 'rightupoutside' : 'mouseupoutside';\n    }\n\n    /**\n     * @param {boolean}[includeHover]\n     * @param {boolean}[rightMouseButton]\n     * @param {boolean}[doubleClick]\n     * @override\n     */\n    startEvent = (\n        includeHover = this._includeHover,\n        rightMouseButton = this._rightMouseButton,\n        doubleClick = this._doubleClick,\n    ): void =>\n    {\n        if (this.isEnabled)\n        {\n            return;\n        }\n\n        this._includeHover = includeHover;\n        this.rightMouseButton = rightMouseButton;\n        this._doubleClick = doubleClick;\n\n        const { target } = this;\n\n        target.insetContainer.on(this.evMouseDown, this.onMouseDownImpl);\n\n        if (!this._rightMouseButton)\n        {\n            target.insetContainer.on('touchstart', this.onMouseDownImpl);\n        }\n\n        if (this._includeHover)\n        {\n            target.insetContainer.on('mouseover', this.onMouseOverImpl);\n            target.insetContainer.on('mouseout', this.onMouseOutImpl);\n        }\n\n        this.isEnabled = true;\n    };\n\n    /**\n     * @override\n     */\n    stopEvent = (): void =>\n    {\n        if (!this.isEnabled)\n        {\n            return;\n        }\n\n        const { target } = this;\n\n        if (this.bound)\n        {\n            target.insetContainer.removeListener(this.evMouseUp, this.onMouseUpImpl);\n            target.insetContainer.removeListener(this.evMouseUpOutside, this.onMouseUpOutsideImpl);\n\n            if (!this._rightMouseButton)\n            {\n                target.insetContainer.removeListener('touchend', this.onMouseUpImpl);\n                target.insetContainer.removeListener('touchendoutside', this.onMouseUpOutsideImpl);\n            }\n\n            this.bound = false;\n        }\n\n        target.insetContainer.removeListener(this.evMouseDown, this.onMouseDownImpl);\n\n        if (!this._rightMouseButton)\n        {\n            target.insetContainer.removeListener('touchstart', this.onMouseDownImpl);\n        }\n\n        if (this._includeHover)\n        {\n            target.insetContainer.removeListener('mouseover', this.onMouseOverImpl);\n            target.insetContainer.removeListener('mouseout', this.onMouseOutImpl);\n            target.insetContainer.removeListener('mousemove', this.onMouseMoveImpl);\n            target.insetContainer.removeListener('touchmove', this.onMouseMoveImpl);\n        }\n\n        this.isEnabled = false;\n    };\n\n    protected onMouseDownImpl = (event: PIXI.interaction.InteractionEvent): void =>\n    {\n        const {\n            target: obj,\n            evMouseUp,\n            onMouseUpImpl: _onMouseUp,\n            evMouseUpOutside,\n            onMouseUpOutsideImpl: _onMouseUpOutside,\n            _rightMouseButton: right,\n        } = this;\n\n        this.mouse.copyFrom(event.data.global);\n        this.id = event.data.identifier;\n        this.onPress.call(this.target, event, true);\n\n        if (!this.bound)\n        {\n            obj.insetContainer.on(evMouseUp, _onMouseUp);\n            obj.insetContainer.on(evMouseUpOutside, _onMouseUpOutside);\n\n            if (!right)\n            {\n                obj.insetContainer.on('touchend', _onMouseUp);\n                obj.insetContainer.on('touchendoutside', _onMouseUpOutside);\n            }\n\n            this.bound = true;\n        }\n\n        if (this._doubleClick)\n        {\n            const now = performance.now();\n\n            if (now - this.time < 210)\n            {\n                this.onClick.call(obj, event);\n            }\n            else\n            {\n                this.time = now;\n            }\n        }\n\n        event.data.originalEvent.preventDefault();\n    };\n\n    protected onMouseUpCommonImpl = (event: PIXI.interaction.InteractionEvent): void =>\n    {\n        const {\n            target: obj,\n            evMouseUp,\n            onMouseUpImpl: _onMouseUp,\n            evMouseUpOutside,\n            onMouseUpOutsideImpl: _onMouseUpOutside,\n        } = this;\n\n        if (event.data.identifier !== this.id)\n        {\n            return;\n        }\n\n        this.offset.set(event.data.global.x - this.mouse.x, event.data.global.y - this.mouse.y);\n\n        if (this.bound)\n        {\n            obj.insetContainer.removeListener(evMouseUp, _onMouseUp);\n            obj.insetContainer.removeListener(evMouseUpOutside, _onMouseUpOutside);\n\n            if (!this._rightMouseButton)\n            {\n                obj.insetContainer.removeListener('touchend', _onMouseUp);\n                obj.insetContainer.removeListener('touchendoutside', _onMouseUpOutside);\n            }\n\n            this.bound = false;\n        }\n\n        this.onPress.call(obj, event, false);\n    };\n\n    protected onMouseUpImpl = (event): void =>\n    {\n        if (event.data.identifier !== this.id)\n        {\n            return;\n        }\n\n        this.onMouseUpCommonImpl(event);\n\n        // prevent clicks with scrolling/dragging objects\n        if (this.target.dragThreshold)\n        {\n            this.movementX = Math.abs(this.offset.x);\n            this.movementY = Math.abs(this.offset.y);\n\n            if (Math.max(this.movementX, this.movementY) > this.target.dragThreshold)\n            {\n                return;\n            }\n        }\n\n        if (!this._doubleClick)\n        {\n            this.onClick.call(this.target, event);\n        }\n    };\n\n    protected onMouseUpOutsideImpl = (event): void =>\n    {\n        if (event.data.identifier !== this.id)\n        {\n            return;\n        }\n\n        this.onMouseUpCommonImpl(event);\n    };\n\n    protected onMouseOverImpl = (event): void =>\n    {\n        if (!this.ishover)\n        {\n            this.ishover = true;\n            this.target.insetContainer.on('mousemove', this.onMouseMoveImpl);\n            this.target.insetContainer.on('touchmove', this.onMouseMoveImpl);\n\n            this.onHover.call(this.target, event, true);\n        }\n    };\n\n    protected onMouseOutImpl = (event): void =>\n    {\n        if (this.ishover)\n        {\n            this.ishover = false;\n            this.target.insetContainer.removeListener('mousemove', this.onMouseMoveImpl);\n            this.target.insetContainer.removeListener('touchmove', this.onMouseMoveImpl);\n\n            this.onHover.call(this.target, event, false);\n        }\n    };\n\n    protected onMouseMoveImpl = (event): void =>\n    {\n        this.onMove.call(this.target, event);\n    };\n}\n","import * as PIXI from 'pixi.js';\nimport { EventManager } from './EventManager';\nimport { Widget } from '../Widget';\n\n/**\n * `DragManager` handles drag & drop events. It registers listeners for `mousedown`,\n * `touchstart` on the target and `mousemove`, `touchmove`, `mouseup`, `mouseupoutside`,\n * `touchend`, `touchendoutside` on the stage.\n *\n * By default, `draggable` widgets will internally handle drag-n-drop and reassigning\n * the callbacks on their `DragManager` will break their behaviour. You can prevent\n * this by using `eventBroker.dnd` directly without setting `widget.draggable` to\n * `true` (or using `widget.makeDraggable()`).\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.EventManager\n */\nexport class DragManager extends EventManager\n{\n    protected isBound: boolean;\n    protected isDragging: boolean;\n    protected id: number;\n    protected dragStart: PIXI.Point;\n    protected dragOffset: PIXI.Point;\n    protected lastCursor: PIXI.Point;\n    protected movementX: number;\n    protected movementY: number;\n    protected cancel: boolean;\n\n    public onPress: (e: PIXI.interaction.InteractionEvent, isPressed: boolean) => void;\n    public onDragStart: (e: PIXI.interaction.InteractionEvent) => void;\n    public onDragMove: (e: PIXI.interaction.InteractionEvent, dragOffset: PIXI.Point) => void;\n    public onDragEnd: (e: PIXI.interaction.InteractionEvent) => void;\n\n    constructor(target: Widget)\n    {\n        super(target);\n\n        this.isBound = false;\n        this.isDragging = false;\n        this.id = 0;\n        this.dragStart = new PIXI.Point();\n        this.dragOffset = new PIXI.Point();\n        this.lastCursor = new PIXI.Point();\n        this.movementX = 0;\n        this.movementY = 0;\n        this.cancel = false;\n\n        this.target.interactive = true;\n\n        this.onPress = (): void => null;\n        this.onDragStart = (): void => null;\n        this.onDragMove = (): void => null;\n        this.onDragEnd = (): void => null;\n\n        this.startEvent();\n    }\n\n    startEvent(): void\n    {\n        if (this.isEnabled)\n        {\n            return;\n        }\n\n        const { target } = this;\n\n        target.insetContainer.on('mousedown', this.onDragStartImpl);\n        target.insetContainer.on('touchstart', this.onDragStartImpl);\n\n        this.isEnabled = true;\n    }\n\n    stopEvent(): void\n    {\n        if (!this.isEnabled)\n        {\n            return;\n        }\n\n        const { target } = this;\n\n        if (this.isBound)\n        {\n            target.stage.removeListener('mousemove', this.onDragMoveImpl);\n            target.stage.removeListener('touchmove', this.onDragMoveImpl);\n            target.stage.removeListener('mouseup', this.onDragEndImpl);\n            target.stage.removeListener('mouseupoutside', this.onDragEndImpl);\n            target.stage.removeListener('touchend', this.onDragEndImpl);\n            target.stage.removeListener('touchendoutside', this.onDragEndImpl);\n\n            this.isBound = false;\n        }\n\n        target.insetContainer.removeListener('mousedown', this.onDragStartImpl);\n        target.insetContainer.removeListener('touchstart', this.onDragStartImpl);\n\n        this.isEnabled = false;\n    }\n\n    protected onDragStartImpl = (e: PIXI.interaction.InteractionEvent): void =>\n    {\n        const { target } = this;\n\n        this.id = e.data.identifier;\n        this.onPress(e, true);\n\n        if (!this.isBound)\n        {\n            this.dragStart.copyFrom(e.data.global);\n\n            target.stage.on('mousemove', this.onDragMoveImpl);\n            target.stage.on('touchmove', this.onDragMoveImpl);\n            target.stage.on('mouseup', this.onDragEndImpl);\n            target.stage.on('mouseupoutside', this.onDragEndImpl);\n            target.stage.on('touchend', this.onDragEndImpl);\n            target.stage.on('touchendoutside', this.onDragEndImpl);\n            target.stage.on('touchcancel', this.onDragEndImpl);\n\n            this.isBound = true;\n        }\n\n        e.data.originalEvent.preventDefault();\n    };\n\n    private onDragMoveImpl = (e: PIXI.interaction.InteractionEvent): void =>\n    {\n        if (e.data.identifier !== this.id)\n        {\n            return;\n        }\n\n        const {\n            lastCursor,\n            dragOffset,\n            dragStart,\n            target,\n        } = this;\n\n        this.lastCursor.copyFrom(e.data.global);\n        this.dragOffset.set(lastCursor.x - dragStart.x, lastCursor.y - dragStart.y);\n\n        if (!this.isDragging)\n        {\n            this.movementX = Math.abs(dragOffset.x);\n            this.movementY = Math.abs(dragOffset.y);\n\n            if ((this.movementX === 0 && this.movementY === 0)\n                    || Math.max(this.movementX, this.movementY) < target.dragThreshold)\n            {\n                return; // threshold\n            }\n\n            if (target.dragRestrictAxis !== null)\n            {\n                this.cancel = false;\n\n                if (target.dragRestrictAxis === 'x' && this.movementY > this.movementX)\n                {\n                    this.cancel = true;\n                }\n                else if (target.dragRestrictAxis === 'y' && this.movementY <= this.movementX)\n                {\n                    this.cancel = true;\n                }\n\n                if (this.cancel)\n                {\n                    this.onDragEndImpl(e);\n\n                    return;\n                }\n            }\n\n            this.onDragStart(e);\n            this.isDragging = true;\n        }\n\n        this.onDragMove(e, dragOffset);\n    };\n\n    private onDragEndImpl = (e: PIXI.interaction.InteractionEvent): void =>\n    {\n        if (e.data.identifier !== this.id)\n        {\n            return;\n        }\n\n        const { target } = this;\n\n        if (this.isBound)\n        {\n            target.stage.removeListener('mousemove', this.onDragMoveImpl);\n            target.stage.removeListener('touchmove', this.onDragMoveImpl);\n            target.stage.removeListener('mouseup', this.onDragEndImpl);\n            target.stage.removeListener('mouseupoutside', this.onDragEndImpl);\n            target.stage.removeListener('touchend', this.onDragEndImpl);\n            target.stage.removeListener('touchendoutside', this.onDragEndImpl);\n            target.stage.removeListener('touchcancel', this.onDragEndImpl);\n\n            this.isDragging = false;\n            this.isBound = false;\n\n            this.onDragEnd(e);\n            this.onPress(e, false);\n        }\n    };\n}\n","import { ClickManager } from './ClickManager';\nimport { DragManager } from './DragManager';\nimport { EventManager } from './EventManager';\nimport { Widget } from '../Widget';\n\n/**\n * The event brokers allows you to access event managers without manually assigning\n * them to a widget. By default, the click (`PUXI.ClickManager`), dnd (`PUXI.DragManager`)\n * are defined. You can add event managers for all (new) widgets by adding an entry to\n * `EventBroker.MANAGER_MAP`.\n *\n * @memberof PUXI\n * @class\n */\nexport class EventBroker\n{\n    [key: string]: EventManager | Widget;\n\n    constructor(target: Widget)\n    {\n        this.target = target;\n\n        for (const mgr of Object.keys(EventBroker.MANAGER_MAP))\n        {\n            Object.defineProperty(\n                this,\n                mgr,\n                {\n                    get(): EventManager\n                    {\n                        if (!this[`_${mgr}`])\n                        {\n                            this[`_${mgr}`] = new EventBroker.MANAGER_MAP[mgr](this.target);\n                        }\n\n                        return this[`_${mgr}`];\n                    },\n                },\n            );\n        }\n    }\n\n  static MANAGER_MAP = {\n      click: ClickManager,\n      dnd: DragManager,\n  };\n}\n","import * as PIXI from 'pixi.js';\nimport { EventManager } from './EventManager';\nimport { Widget } from '../Widget';\n\n/**\n * Handles the `wheel` and `scroll` DOM events on widgets. It also registers\n * listeners for `mouseout` and `mouseover`.\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.EventManager\n */\nexport class ScrollManager extends EventManager\n{\n    private bound: boolean;\n    private delta: PIXI.Point;\n    private preventDefault: boolean;\n\n    constructor(target: Widget, preventDefault = true)\n    {\n        super(target);\n\n        this.bound = false;\n        this.delta = new PIXI.Point();\n        this.preventDefault = preventDefault;\n\n        this.startEvent();\n    }\n\n    /**\n     * @override\n     */\n    startEvent(): void\n    {\n        const { target, onHoverImpl, onMouseOutImpl } = this;\n\n        target.contentContainer.on('mouseover', onHoverImpl);\n        target.contentContainer.on('mouseout', onMouseOutImpl);\n    }\n\n    /**\n     * @override\n     */\n    stopEvent(): void\n    {\n        const { target, onMouseScrollImpl, onHoverImpl, onMouseOutImpl } = this;\n\n        if (this.bound)\n        {\n            document.removeEventListener('mousewheel', onMouseScrollImpl);\n            document.removeEventListener('DOMMouseScroll', onMouseScrollImpl);\n\n            this.bound = false;\n        }\n\n        target.contentContainer.removeListener('mouseover', onHoverImpl);\n        target.contentContainer.removeListener('mouseout', onMouseOutImpl);\n    }\n\n    private onMouseScrollImpl = (e: WheelEvent): void =>\n    {\n        const { target, preventDefault, delta } = this;\n\n        if (preventDefault)\n        {\n            event.preventDefault();\n        }\n\n        if (typeof e.deltaX !== 'undefined')\n        {\n            delta.set(e.deltaX, e.deltaY);\n        }\n        else // Firefox\n        {\n            delta.set(e.axis === 1 ? e.detail * 60 : 0,\n                e.axis === 2 ? e.detail * 60 : 0);\n        }\n\n        this.onMouseScroll.call(target, event, delta);\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private onHoverImpl = (e): void =>\n    {\n        const { onMouseScrollImpl } = this;\n\n        if (!this.bound)\n        {\n            document.addEventListener('mousewheel', onMouseScrollImpl, false);\n            document.addEventListener('DOMMouseScroll', onMouseScrollImpl, false);\n\n            this.bound = true;\n        }\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private onMouseOutImpl = (e): void =>\n    {\n        const { onMouseScrollImpl } = this;\n\n        if (this.bound)\n        {\n            document.removeEventListener('mousewheel', onMouseScrollImpl);\n            document.removeEventListener('DOMMouseScroll', onMouseScrollImpl);\n\n            this.bound = false;\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMouseScroll = function onMouseScroll(event, delta: PIXI.Point): void\n    {\n        // Default onMouseScroll.\n    };\n}\n","import { DragManager } from './event/DragManager';\nimport { DragDropController } from './event/DragDropController';\nimport * as PIXI from 'pixi.js';\nimport { Insets } from './layout-options/Insets';\nimport { LayoutOptions, FastLayoutOptions } from './layout-options';\nimport { MeasureMode, IMeasurable } from './IMeasurable';\nimport { Stage } from './Stage';\nimport { DropShadowFilter } from '@pixi/filter-drop-shadow';\nimport { EventBroker } from './event';\nimport { Style } from './Style';\nimport { Menu } from './Menu';\nimport { PopupMenu } from './PopupMenu';\n\nconst PADDING_PROPERTIES = ['paddingLeft', 'paddingTop', 'paddingRight', 'paddingBottom'];\n\nconst PADDING_AXIS_PROPERTIES = ['paddingHorizontal', 'paddingVertical'];\n\nexport const TEXT_STYLE_PROPERTIES = [\n    'fontFamily',\n    'fontSize',\n    'fontWeight',\n    'letterSpacing',\n];\n\n/**\n * A widget is a user interface control that renders content inside its prescribed\n * rectangle on the screen.\n *\n * @memberof PUXI\n * @class\n * @extends PIXI.utils.EventEmitter\n * @implements PUXI.IMeasurable\n */\nexport class Widget extends PIXI.utils.EventEmitter implements IMeasurable\n{\n    /**\n     * The minimum delay between two clicks to not consider them as a double-click.\n     */\n    public static CLICK_DELAY = 300;\n\n    public readonly insetContainer: PIXI.Container;\n    public readonly contentContainer: PIXI.Container;\n    public readonly widgetChildren: Widget[];\n    public readonly stage: Stage;\n\n    initialized: boolean;\n    protected dragInitialized: boolean;\n    protected dropInitialized: boolean;\n    protected isDragging: boolean;\n\n    private draggable: boolean;\n    private droppable: boolean;\n\n    dirty: boolean;\n    _oldWidth: number;\n    _oldHeight: number;\n    pixelPerfect: boolean;\n\n    parent: Widget;\n\n    public layoutMeasure: Insets;\n    public layoutOptions: LayoutOptions;\n\n    protected tint: number;\n    protected blendMode: PIXI.BLEND_MODES;\n    protected background: PIXI.Container;\n    protected _measuredWidth: number;\n    protected _measuredHeight: number;\n\n    private _eventBroker: EventBroker;\n    private _paddingLeft: number;\n    private _paddingTop: number;\n    private _paddingRight: number;\n    private _paddingBottom: number;\n    private _width: number;\n    private _height: number;\n    private _elevation: number;\n    private _dropShadow: DropShadowFilter;\n    private _layoutDirty: boolean;\n\n    private singleClickTimeout: NodeJS.Timeout;\n    private style: Style;\n    private styleID: number;\n    private contextMenu: Menu;\n    private contextPopup: PopupMenu;\n\n    constructor()\n    {\n        super();\n\n        /**\n         * This container owns the background + content of this widget.\n         * @member {PIXI.Container}\n         * @readonly\n         */\n        this.insetContainer = new PIXI.Container();\n\n        /**\n         * This container holds the content of this widget. Subclasses should add\n         * renderable display-objects to this container.\n         * @member {PIXI.Container}\n         * @readonly\n         */\n        this.contentContainer = this.insetContainer.addChild(new PIXI.Container());\n\n        /**\n         * Children of this widget. Use `WidgetGroup` to position children.\n         * @member {PUXI.Widget[]}\n         * @readonly\n         */\n        this.widgetChildren = [];\n\n        /**\n         * Stage whose scene graph holds this widget. Once set, this cannot be changed.\n         * @member {PUXI.Stage}\n         * @readonly\n         */\n        this.stage = null;\n\n        /**\n         * Layout insets of this widget. In normal state, the widget should be in this\n         * rectangle inside the parent reference frame.\n         * @member {PUXI.Insets}\n         * @readonly\n         */\n        this.layoutMeasure = new Insets();\n\n        this.initialized = false;\n        this.dragInitialized = false;\n        this.dropInitialized = false;\n\n        this.dirty = true;\n        this._oldWidth = -1;\n        this._oldHeight = -1;\n        this.pixelPerfect = true;\n\n        this._paddingLeft = 0;\n        this._paddingTop = 0;\n        this._paddingRight = 0;\n        this._paddingBottom = 0;\n        this._elevation = 0;\n\n        this.tint = 0;\n        this.blendMode = PIXI.BLEND_MODES.NORMAL;\n\n        this.draggable = false;\n        this.droppable = false;\n\n        this.singleClickTimeout = null;\n        this.style = null;\n        this.styleID = -1;\n\n        // Use a separate callback function to allow this.on* methods to be reassigned.\n        this.insetContainer.on('pointerdown', (e: PIXI.InteractionEvent) => { this.onPointerPress(e); });\n        this.insetContainer.on('pointermove', (e: PIXI.InteractionEvent) => { this.onPointerMove(e); });\n        this.insetContainer.on('pointerup', (e: PIXI.InteractionEvent) => { this.onPointerRelease(e); });\n        this.insetContainer.on('pointerover', (e: PIXI.InteractionEvent) => { this.onPointerEnter(e); });\n        this.insetContainer.on('pointerout', (e: PIXI.InteractionEvent) => { this.onPointerExit(e); });\n        this.insetContainer.on('rightclick', (e: PIXI.InteractionEvent) => { this.onRightClick(e); });\n    }\n\n    /**\n     * Update method that is to be overriden. This is called before a `render()`\n     * pass on widgets that are dirty.\n     *\n     * @private\n     */\n    update(): any\n    {\n        if (this._layoutDirty)\n        {\n            console.log('here');\n            setTimeout(() =>\n            {\n                if (this._layoutDirty)\n                {\n                    this.stage.measureAndLayout();\n                }\n            }, 0);\n        }\n\n        if (this.style && this.styleID !== this.style.dirtyID)\n        {\n            this.onStyleChange(this.style);\n            this.styleID = this.style.dirtyID;\n        }\n    }\n\n    /**\n     * The measured width that is used by the parent's layout manager to place this\n     * widget.\n     * @member {number}\n     */\n    get measuredWidth(): number\n    {\n        return this._measuredWidth;\n    }\n\n    /**\n     * The measured height that is used by the parent's layout manager to place this\n     * widget.\n     * @member {number}\n     */\n    get measuredHeight(): number\n    {\n        return this._measuredHeight;\n    }\n\n    /**\n     * Alias for `Widget.measuredWidth`.\n     *\n     * @returns {number} the measured width\n     */\n    getMeasuredWidth(): number\n    {\n        return this._measuredWidth;\n    }\n\n    /**\n     * Alias for `Widget.measuredHeight`.\n     *\n     * @returns {number} the measured height\n     */\n    getMeasuredHeight(): number\n    {\n        return this._measuredHeight;\n    }\n\n    /**\n     * Override this method to measure the dimensions for your widget. By default, it\n     * will use the natural width/height of this widget's content (`contentContainer`)\n     * plus any padding.\n     *\n     * @param {number} width - width of region provided by parent\n     * @param {number} height - height of region provided by parent\n     * @param {PUXI.MeasureMode} widthMode - mode in which provided width is to be used\n     * @param {PUXI.MeasureMode} heightMode - mode in which provided height is to be used\n     */\n    onMeasure(width: number, height: number, widthMode: MeasureMode, heightMode: MeasureMode): void\n    {\n        const naturalWidth = this.contentContainer.width + this.paddingHorizontal;\n        const naturalHeight = this.contentContainer.height + this.paddingVertical;\n\n        switch (widthMode)\n        {\n            case MeasureMode.EXACTLY:\n                this._measuredWidth = width;\n                break;\n            case MeasureMode.UNBOUNDED:\n                this._measuredWidth = naturalWidth;\n                break;\n            case MeasureMode.AT_MOST:\n                this._measuredWidth = Math.min(width, naturalWidth);\n                break;\n        }\n\n        switch (heightMode)\n        {\n            case MeasureMode.EXACTLY:\n                this._measuredHeight = height;\n                break;\n            case MeasureMode.UNBOUNDED:\n                this._measuredHeight = naturalHeight;\n                break;\n            case MeasureMode.AT_MOST:\n                this._measuredHeight = Math.min(height, naturalHeight);\n                break;\n        }\n    }\n\n    /**\n     * This method calls `Widget.onMeasure` and should not be overriden. It does internal\n     * bookkeeping.\n     *\n     * @param {number} width\n     * @param {number} height\n     * @param {PUXI.MeasureMode} widthMode\n     * @param {PUXI.MeasureMode} heightMode\n     */\n    measure(width: number, height: number, widthMode: MeasureMode, heightMode: MeasureMode): void\n    {\n        this.onMeasure(width, height, widthMode, heightMode);\n    }\n\n    /**\n     * This method should set the frame in which rendering will occur and lay out\n     * child widgets in that frame.\n     *\n     * @param l\n     * @param t\n     * @param r\n     * @param b\n     * @param dirty\n     * @protected\n     */\n    onLayout(l: number, t: number = l, r: number = l, b: number = t, dirty = true): void\n    {\n        this.layoutMeasure.left = l;\n        this.layoutMeasure.top = t;\n        this.layoutMeasure.right = r;\n        this.layoutMeasure.bottom = b;\n\n        this._width = r - l;\n        this._height = b - t;\n\n        if (this.background)\n        {\n            this.background.x = 0;\n            this.background.y = 0;\n            this.background.width = r - l;\n            this.background.height = b - t;\n        }\n\n        // Update parallel PIXI node too!\n        this.insetContainer.x = l;\n        this.insetContainer.y = t;\n        this.contentContainer.x = this._paddingLeft;\n        this.contentContainer.y = this._paddingTop;\n\n        // Don't set width/height on inset, content because that would scale\n        // the contents (we don't want that).\n\n        this._layoutDirty = false;\n    }\n\n    layout(l: number, t: number = l, r: number = l, b: number = t, dirty = true): void\n    {\n        this.onLayout(l, t, r, b, dirty);\n    }\n\n    /**\n     * Use this to specify how you want to layout this widget w.r.t its parent.\n     * The specific layout options class depends on which layout you are\n     * using in the parent widget.\n     *\n     * @param {PUXI.LayoutOptions} lopt\n     * @returns {Widget} this\n     */\n    setLayoutOptions(lopt: LayoutOptions): Widget\n    {\n        this.layoutOptions = lopt;\n\n        return this;\n    }\n\n    /**\n     * This is invoked when a style is applied on the widget. If you override it, you must pass through the superclass\n     * implementation.\n     *\n     * @param style\n     */\n    protected onStyleChange(style: Style): void\n    {\n        const styleData = style.getProperties(\n            'backgroundColor',\n            'background',\n            'elevation',\n            'padding',\n            'paddingHorizontal',\n            'paddingVertical',\n            'paddingLeft',\n            'paddingTop',\n            'paddingRight',\n            'paddingBottom',\n        );\n\n        // Set background of widget\n        if (styleData.background)\n        {\n            this.setBackground(styleData.background);\n        }\n        else if (typeof styleData.backgroundColor !== 'undefined')\n        {\n            this.setBackground(styleData.backgroundColor);\n        }\n\n        // Set elevation\n        if (typeof styleData.elevation !== 'undefined')\n        {\n            this.setElevation(styleData.elevation);\n        }\n\n        // Set _paddingLeft, _paddingTop, _paddingRight, _paddingBottom\n        PADDING_PROPERTIES.forEach((propName, i) =>\n        {\n            if (typeof styleData[propName] === 'number')\n            {\n                this[`_${propName}`] = styleData[propName];\n            }\n            else if (typeof styleData[PADDING_AXIS_PROPERTIES[i % 2]] === 'number')\n            {\n                this[`_${propName}`] = styleData[PADDING_AXIS_PROPERTIES[i % 2]];\n            }\n            else if (typeof styleData.padding === 'number')\n            {\n                this[`_${propName}`] = styleData.padding;\n            }\n        });\n\n        this.dirty = true;\n    }\n\n    /**\n     * Handles the pointer-entered event.\n     *\n     * If you override this method, you must call through to the superclass implementation.\n     *\n     * @param e - the triggering interaction event\n     */\n    onPointerEnter(e: PIXI.InteractionEvent): void\n    {\n        this.onHoverChange(e, true);\n    }\n\n    /**\n     * Handles the pointer-exited event.\n     *\n     * If you override this method, you must call through to the superclass implementation.\n     *\n     * @param e\n     */\n    onPointerExit(e: PIXI.InteractionEvent): void\n    {\n        this.onHoverChange(e, false);\n    }\n\n    /**\n     * Handles the pointer-down event. If you override this method, you must call through to the superclass\n     * implementation.\n     */\n    onPointerPress(e: PIXI.InteractionEvent): void\n    {\n        return;\n    }\n\n    /**\n     * Handles the pointer-move event. If you override this method, you must call through to the superclass\n     * implementation.\n     */\n    onPointerMove(e: PIXI.InteractionEvent): void\n    {\n        return;\n    }\n\n    onPointerRelease(e: PIXI.InteractionEvent): void\n    {\n        if (!this.singleClickTimeout)\n        {\n            // Invoke onClick after ~300ms only if it isn't a double-click.\n            this.singleClickTimeout = setTimeout(() =>\n            {\n                this.singleClickTimeout = null;\n            }, Widget.CLICK_DELAY);\n\n            this.onClick(e);\n        }\n        else\n        {\n            clearTimeout(this.singleClickTimeout);\n\n            this.singleClickTimeout = null;\n\n            // Invoke onDoubleClick after the onPointerPress handler.\n            setTimeout(() => { this.onDoubleClick(e); }, 0);\n        }\n\n        return;\n    }\n\n    /**\n     * Event handler for change in the hover state.\n     *\n     * @param e\n     * @param hover\n     */\n    onHoverChange(e: PIXI.InteractionEvent, hover: boolean): void\n    {\n        return;\n    }\n\n    onClick(e: PIXI.InteractionEvent): void\n    {\n        return;\n    }\n\n    onDoubleClick(e: PIXI.InteractionEvent): void\n    {\n        return;\n    }\n\n    onRightClick(e: PIXI.InteractionEvent): void\n    {\n        console.log('RIGHT_CLICK');\n        e.data.originalEvent.preventDefault();\n\n        if (this.contextMenu)\n        {\n            if (!this.contextPopup)\n            {\n                //  this.contextPopup = new PopupMenu(this.contextMenu);\n            }\n\n            const location = e.data.getLocalPosition(this.stage);\n\n            //  this.openPopupMenu(location.x, location.y);\n        }\n\n        return;\n    }\n\n    /**\n     * The event broker for this widget that holds all the event managers. This can\n     * be used to start/stop clicks, drags, scrolls and configure how those events\n     * are handled/interpreted.\n     * @member PUXI.EventBroker\n     */\n    get eventBroker(): EventBroker\n    {\n        if (!this._eventBroker)\n        {\n            this._eventBroker = new EventBroker(this);\n        }\n\n        return this._eventBroker;\n    }\n\n    /**\n     * Padding on left side.\n     * @member {number}\n     */\n    get paddingLeft(): number\n    {\n        return this._paddingLeft;\n    }\n    set paddingLeft(val: number)\n    {\n        this._paddingLeft = val;\n        this.dirty = true;\n    }\n\n    /**\n     * Padding on top side.\n     * @member {number}\n     */\n    get paddingTop(): number\n    {\n        return this._paddingTop;\n    }\n    set paddingTop(val: number)\n    {\n        this._paddingTop = val;\n        this.dirty = true;\n    }\n\n    /**\n     * Padding on right side.\n     * @member {number}\n     */\n    get paddingRight(): number\n    {\n        return this._paddingRight;\n    }\n    set paddingRight(val: number)\n    {\n        this._paddingRight = val;\n        this.dirty = true;\n    }\n\n    /**\n     * Padding on bottom side.\n     * @member {number}\n     */\n    get paddingBottom(): number\n    {\n        return this._paddingBottom;\n    }\n    set paddingBottom(val: number)\n    {\n        this._paddingBottom = val;\n        this.dirty = true;\n    }\n\n    /**\n     * Sum of left & right padding.\n     * @member {number}\n     * @readonly\n     */\n    get paddingHorizontal(): number\n    {\n        return this._paddingLeft + this._paddingRight;\n    }\n\n    /**\n     * Sum of top & bottom padding.\n     * @member {number}\n     * @readonly\n     */\n    get paddingVertical(): number\n    {\n        return this._paddingTop + this._paddingBottom;\n    }\n\n    /**\n     * Whether this widget is interactive in the PixiJS scene graph.\n     * @member {boolean}\n     */\n    get interactive(): boolean\n    {\n        return this.insetContainer.interactive;\n    }\n    set interactive(val: boolean)\n    {\n        this.insetContainer.interactive = true;\n        this.contentContainer.interactive = true;\n    }\n\n    /**\n     * Layout width of this widget.\n     * @member {number}\n     * @readonly\n     */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    /**\n     * Layout height of this widget.\n     * @member {number}\n     * @readonly\n     */\n    get height(): number\n    {\n        return this._height;\n    }\n\n    /**\n     * Layout width of this widget's content, which is the width minus horizontal padding.\n     * @member {number}\n     * @readonly\n     */\n    get contentWidth(): number\n    {\n        return this._width - this.paddingHorizontal;\n    }\n\n    /**\n     * Layout height of this widget's content, which is the height minus vertical padding.\n     * @member {number}\n     * @readonly\n     */\n    get contentHeight(): number\n    {\n        return this._height - this.paddingVertical;\n    }\n\n    /**\n     * Alpha of this widget & its contents.\n     * @member {number}\n     */\n    get alpha(): number\n    {\n        return this.insetContainer.alpha;\n    }\n    set alpha(val: number)\n    {\n        this.insetContainer.alpha = val;\n    }\n\n    /**\n     * Sets the padding values.\n     *\n     * To set all paddings to one value:\n     * ```\n     * widget.setPadding(8);\n     * ```\n     *\n     * To set horizontal & vertical padding separately:\n     * ```\n     * widget.setPadding(4, 12);\n     * ```\n     *\n     * @param {number}[l=0] - left padding\n     * @param {number}[t=l] - top padding (default is equal to left padding)\n     * @param {number}[r=l] - right padding (default is equal to right padding)\n     * @param {number}[b=t] - bottom padding (default is equal to top padding)\n     */\n    setPadding(l: number, t: number = l, r: number = l, b: number = t): Widget\n    {\n        this._paddingLeft = l;\n        this._paddingTop = t;\n        this._paddingRight = r;\n        this._paddingBottom = b;\n        this.dirty = true;\n\n        return this;\n    }\n\n    /**\n     * @returns {PIXI.Container} - the background display-object\n     */\n    getBackground(): PIXI.Container\n    {\n        return this.background;\n    }\n\n    /**\n     * The background of a widget is a `PIXI.DisplayObject` that is rendered before\n     * all of its children.\n     *\n     * @param {PIXI.Container | number | string} bg - the background display-object or\n     *     a color that will be used to generate a `PIXI.Graphics` as the background.\n     */\n    setBackground(bg: PIXI.Container | number | string): Widget\n    {\n        if (this.background)\n        {\n            this.insetContainer.removeChild(this.background);\n        }\n\n        if (typeof bg === 'string')\n        {\n            bg = PIXI.utils.string2hex(bg);\n        }\n        if (typeof bg === 'number')\n        {\n            bg = new PIXI.Graphics()\n                .beginFill(bg)\n                .drawRect(0, 0, 1, 1)\n                .endFill();\n        }\n\n        this.background = bg;\n\n        if (bg)\n        {\n            bg.width = this.width;\n            bg.height = this.height;\n            this.insetContainer.addChildAt(bg, 0);\n        }\n\n        if (bg && this._elevation && this._dropShadow)\n        {\n            if (!this.background.filters)\n            {\n                this.background.filters = [];\n            }\n\n            this.background.filters.push(this._dropShadow);\n        }\n\n        return this;\n    }\n\n    /**\n     * @returns {number} the alpha on the background display-object.\n     */\n    getBackgroundAlpha(): number\n    {\n        return this.background ? this.background.alpha : 1;\n    }\n\n    /**\n     * This can be used to set the alpha on the _background_ of this widget. This\n     * does not affect the widget's contents nor individual components of the\n     * background display-object.\n     *\n     * @param {number} val - background alpha\n     */\n    setBackgroundAlpha(val: number): Widget\n    {\n        if (!this.background)\n        {\n            this.setBackground(0xffffff);\n        }\n\n        this.background.alpha = val;\n\n        return this;\n    }\n\n    /**\n     * Set the context-menu to be shown on right-clicks.\n     *\n     * This feature is not released yet, i.e. does not work!\n     *\n     * @param menu\n     * @alpha\n     */\n    setContextMenu(menu: Menu): void\n    {\n        this.contextMenu = menu;\n    }\n\n    /**\n     * @return {number} the elevation set on this widget\n     */\n    getElevation(): number\n    {\n        return this._elevation;\n    }\n\n    /**\n     * This can be used add a drop-shadow that will appear to raise this widget by\n     * the given elevation against its parent.\n     *\n     * @param {number} val - elevation to use. 2px is good for most widgets.\n     */\n    setElevation(val: number): Widget\n    {\n        this._elevation = val;\n\n        if (val === 0 && this._dropShadow)\n        {\n            if (!this.background)\n            {\n                return this;\n            }\n\n            const i = this.background.filters.indexOf(this._dropShadow);\n\n            if (i > 0)\n            {\n                this.background.filters.splice(i, 1);\n            }\n        }\n        else if (val > 0)\n        {\n            if (!this._dropShadow)\n            {\n                if (this.background && !this.background.filters)\n                {\n                    this.background.filters = [];\n                }\n\n                this._dropShadow = new DropShadowFilter({ distance: val });\n\n                if (this.background)\n                {\n                    this.background.filters.push(this._dropShadow);\n                }\n            }\n\n            this._dropShadow.distance = val;\n        }\n\n        return this;\n    }\n\n    /**\n     * Set the style applied on this widget. To unset a style, simply pass {@code null}.\n     *\n     * @param style\n     */\n    setStyle(style?: Style): this\n    {\n        this.style = style;\n        this.styleID = -1;\n\n        return this;\n    }\n\n    /**\n     * Will trigger a full layout pass next animation frame.\n     */\n    requestLayout(): void\n    {\n        this._layoutDirty = true;\n    }\n\n    /**\n     * Adds the widgets as children of this one.\n     *\n     * @param {PUXI.Widget[]} widgets\n     * @returns {Widget} - this widget\n     */\n    addChild(...widgets: Widget[]): Widget\n    {\n        for (let i = 0; i < widgets.length; i++)\n        {\n            const widget = widgets[i];\n\n            if (widget.parent)\n            {\n                widget.parent.removeChild(widget);\n            }\n\n            widget.parent = this;\n            this.contentContainer.addChild(widget.insetContainer);\n            this.widgetChildren.push(widget);\n        }\n\n        return this;\n    }\n\n    /**\n     * Orphans the widgets that are children of this one.\n     *\n     * @param {PUXI.Widget[]} widgets\n     * @returns {Widget} - this widget\n     */\n    removeChild(...widgets: Widget[]): Widget\n    {\n        for (let i = 0; i < widgets.length; i++)\n        {\n            const widget = widgets[i];\n            const index = this.widgetChildren.indexOf(widget);\n\n            if (index !== -1)\n            {\n                widget.insetContainer.parent.removeChild(widget.insetContainer);\n                this.widgetChildren.splice(index, 1);\n                widget.parent = null;\n            }\n        }\n\n        return this;\n    }\n\n    private openPopupMenu(x: number, y: number): void\n    {\n        const stage = this.stage;\n        const lopt = this.contextPopup.layoutOptions as FastLayoutOptions;\n\n        lopt.x = x;\n        lopt.y = y;\n\n        this.stage.addChild(this.contextPopup);\n    }\n\n    private closePopupMenu(): void\n    {\n        this.stage.removeChild(this.contextPopup);\n    }\n\n    /**\n     * Makes this widget `draggable`.\n     */\n    makeDraggable(): Widget\n    {\n        this.draggable = true;\n\n        if (this.initialized)\n        {\n            this.initDraggable();\n        }\n\n        return this;\n    }\n\n    /**\n     * Makes this widget not `draggable`.\n     */\n    clearDraggable(): void\n    {\n        if (this.dragInitialized)\n        {\n            this.dragInitialized = false;\n            (this.eventBroker.dnd as DragManager).stopEvent();\n        }\n    }\n\n    /**\n     * Widget initialization related to the stage. This method should always call\n     * `super.initialize()`.\n     *\n     * This method expects `stage` to be set before calling it. This is handled\n     * by the `Stage` itself.\n     *\n     * This will set `initialized` to true. If it was already set to true, it _should\n     * do nothing_.\n     *\n     * @protected\n     */\n    initialize(): void\n    {\n        if (this.initialized)\n        {\n            return;\n        }\n\n        if (this.draggable)\n        {\n            this.initDraggable();\n        }\n        if (this.droppable)\n        {\n            this.initDroppable();\n        }\n\n        this.initialized = true;\n    }\n\n    private initDraggable(): void\n    {\n        if (this.dragInitialized)\n        {\n            return;\n        }\n\n        this.dragInitialized = true;\n\n        const realPosition = new PIXI.Point();\n        const dragPosition = new PIXI.Point();\n\n        const dnd: DragManager = this.eventBroker.dnd as DragManager;\n        const { insetContainer } = this;\n\n        dnd.onDragStart = (e: PIXI.InteractionEvent): void =>\n        {\n            const added = DragDropController.add(this, e);\n\n            if (!this.isDragging && added)\n            {\n                this.isDragging = true;\n                insetContainer.interactive = false;\n                realPosition.copyFrom(insetContainer.position);\n\n                this.emit('draggablestart', e);\n            }\n        };\n\n        dnd.onDragMove = (e: PIXI.InteractionEvent, offset: PIXI.Point): void =>\n        {\n            if (this.isDragging)\n            {\n                dragPosition.set(realPosition.x + offset.x, realPosition.y + offset.y);\n\n                insetContainer.x = dragPosition.x;\n                insetContainer.y = dragPosition.y;\n\n                this.emit('draggablemove', e);\n            }\n        };\n\n        dnd.onDragEnd = (e: PIXI.InteractionEvent): void =>\n        {\n            if (this.isDragging)\n            {\n                this.isDragging = false;\n                DragDropController.getItem(this);\n\n                // Return to container after 0ms if not picked up by a droppable\n                setTimeout((): void =>\n                {\n                    this.insetContainer.interactive = true;\n                    this.insetContainer.position.copyFrom(realPosition);\n\n                    this.emit('draggableend', e);\n                }, 0);\n            }\n        };\n    }\n\n    /**\n     * Makes this widget `droppable`.\n     */\n    makeDroppable(): Widget\n    {\n        this.droppable = true;\n\n        if (this.initialized)\n        {\n            this.initDroppable();\n        }\n\n        return this;\n    }\n\n    protected onDrop: (e: PIXI.interaction.InteractionEvent) => void;\n\n    /**\n     * Makes this widget not `droppable`.\n     */\n    clearDroppable(): void\n    {\n        if (this.dropInitialized)\n        {\n            this.dropInitialized = false;\n            this.contentContainer.removeListener('mouseup', this.onDrop);\n            this.contentContainer.removeListener('touchend', this.onDrop);\n        }\n    }\n\n    private initDroppable(): void\n    {\n        if (!this.dropInitialized)\n        {\n            this.dropInitialized = true;\n            const container = this.contentContainer;\n\n            this.contentContainer.interactive = true;\n\n            this.onDrop = (event): void =>\n            {\n                const item = DragDropController.getEventItem(event, this.dropGroup);\n\n                if (item && item.isDragging)\n                {\n                    item.isDragging = false;\n                    item.insetContainer.interactive = true;\n                    const parent = this.droppableReparent !== null ? this.droppableReparent : self;\n\n                    parent.container.toLocal(item.container.position, item.container.parent, item);\n                    if (parent.container != item.container.parent) { parent.addChild(item); }\n                }\n            };\n\n            container.on('mouseup', this.onDrop);\n            container.on('touchend', this.onDrop);\n        }\n    }\n\n    /**\n     * Creates a widget that holds the display-object as its content. If `content` is\n     * a `PUXI.Widget`, then it will be returned.\n     * @param {PIXI.Container | Widget} content\n     * @static\n     */\n    static fromContent(content: PIXI.Container | Widget): Widget\n    {\n        if (content instanceof Widget)\n        {\n            return content;\n        }\n\n        const widget = new Widget();\n\n        widget.contentContainer.addChild(content);\n\n        return widget;\n    }\n\n    /**\n     * Easy utility to resolve measured dimension.\n     * @param {number} natural - your widget's natural dimension\n     * @param {number} limit - width/height limit passed by parent\n     * @param {PUXI.MeasureMode} mode - measurement mode passed by parent\n     */\n    static resolveMeasuredDimen(natural: number, limit: number, mode: MeasureMode): number\n    {\n        if (mode === MeasureMode.EXACTLY)\n        {\n            return limit;\n        }\n        else if (mode === MeasureMode.AT_MOST)\n        {\n            return Math.min(limit, natural);\n        }\n\n        return natural;\n    }\n}\n","/**\n * Alignments supported by layout managers in PuxiJS core.\n *\n * @memberof PUXI\n * @enum\n */\nexport enum ALIGN\n{\n    LEFT = 0,\n    TOP = 0,\n    MIDDLE = 0xff1,\n    CENTER = 0xff1,\n    RIGHT = 0xffff1,\n    BOTTOM = 0xffff1,\n    NONE = 0xffffffff\n}\n","/**\n * This are the base constraints that you can apply on a `PUXI.Widget` under any\n * layout manager. It specifies the dimensions of a widget, while the position\n * of the widget is left to the parent to decide. If a dimension (width or height)\n * is set to a value between -1 and 1, then it is interpreted as a percentage\n * of the parent's dimension.\n *\n * The following example will render a widget at 50% of the parent's width and 10px height:\n *\n * ```js\n * const widget = new PUXI.Widget();\n * const parent = new PUXI.Widget();\n *\n * widget.layoutOptions = new PUXI.LayoutOptions(\n *      .5,\n *      10\n * );\n * parent.addChild(widget);\n * ```\n *\n * @memberof PUXI\n * @class\n */\nexport class LayoutOptions\n{\n    public static FILL_PARENT = 0xfffffff1;\n    public static WRAP_CONTENT = 0xfffffff2;\n    public static MAX_DIMEN = 0xfffffff0;\n\n    public static DEFAULT = new LayoutOptions();\n\n    public width: number;\n    public height: number;\n    public cache: any;\n\n    private _marginLeft: number;\n    private _marginTop: number;\n    private _marginRight: number;\n    private _marginBottom: number;\n\n    /**\n     * @param {number}[width = LayoutOptions.WRAP_CONTENT]\n     * @param {number}[height = LayoutOptions.WRAP_CONTENT]\n     */\n    constructor(width: number | string = LayoutOptions.WRAP_CONTENT, height: number | string = LayoutOptions.WRAP_CONTENT)\n    {\n        this.setWidth(width);\n        this.setHeight(height);\n\n        /**\n         * Used by the layout manager to cache calculations.\n         * @member {object}\n         */\n        this.cache = {};\n    }\n\n    /**\n     * Utility method to store width that converts strings to their number format.\n     *\n     * @param {number | string} val\n     * @example\n     * ```\n     * lopt.setWidth('68.7%');// 68.7% of parent's width\n     * lopt.setWidth('96px');// 96px\n     * lopt.setWidth(34);// 34px\n     * lopt.setWidth(.45);// 45% of parent's width\n     * ```\n     */\n    setWidth(val: number | string): void\n    {\n        /**\n         * Preferred height of the widget in pixels. If its value is between -1 and 1, it\n         * is interpreted as a percentage of the parent's height.\n         * @member {number}\n         * @default {PUXI.LayoutOptions.WRAP_CONTENT}\n         */\n        this.width = LayoutOptions.parseDimen(val);\n    }\n\n    /**\n     * Utility method to store height that converts strings to their number format.\n     *\n     * @param {number | string} val\n     * @example\n     * ```\n     * lopt.setHeight('68.7%');// 68.7% of parent's height\n     * lopt.setHeight('96px');// 96px\n     * lopt.setHeight(34);// 34px\n     * lopt.setHeight(.45);// 45% of parent's height\n     * ```\n     */\n    setHeight(val: number | string): void\n    {\n        /**\n         * Preferred width of the widget in pixels. If its value is between -1 and 1, it\n         * is interpreted as a percentage of the parent's width.\n         * @member {number}\n         * @default {PUXI.LayoutOptions.WRAP_CONTENT}\n         */\n        this.height = LayoutOptions.parseDimen(val);\n    }\n\n    /**\n     * @member {boolean} - whether the specified width is a constant\n     *      (not a percentage, `WRAP_CONTENT`, or `FILL_PARENT`)\n     */\n    get isWidthPredefined(): boolean\n    {\n        return this.width > 1 && this.width <= LayoutOptions.MAX_DIMEN;\n    }\n\n    /**\n     * @member {boolean} - whether the specified height is a constant\n     *      (not a percentage, `WRAP_CONTENT`, or `FILL_PARENT`)\n     */\n    get isHeightPredefined(): boolean\n    {\n        return this.height > 1 && this.height <= LayoutOptions.MAX_DIMEN;\n    }\n\n    /**\n     * The left margin in pixels of the widget.\n     * @member {number}\n     * @default 0\n     */\n    get marginLeft(): number\n    {\n        return this._marginLeft || 0;\n    }\n    set marginLeft(val: number)\n    {\n        this._marginLeft = val;\n    }\n\n    /**\n     * This top margin in pixels of the widget.\n     * @member {number}\n     * @default 0\n     */\n    get marginTop(): number\n    {\n        return this._marginTop || 0;\n    }\n    set marginTop(val: number)\n    {\n        this._marginTop = val;\n    }\n\n    /**\n     * The right margin in pixels of the widget.\n     * @member {number}\n     * @default 0\n     */\n    get marginRight(): number\n    {\n        return this._marginRight || 0;\n    }\n    set marginRight(val: number)\n    {\n        this._marginRight = val;\n    }\n\n    /**\n     * The bottom margin in pixels of the widget.\n     * @member {number}\n     * @default 0\n     */\n    get marginBottom(): number\n    {\n        return this._marginBottom || 0;\n    }\n    set marginBottom(val: number)\n    {\n        this._marginBottom = val;\n    }\n\n    /**\n     * @param left\n     * @param top\n     * @param right\n     * @param bottom\n     */\n    setMargin(left: number, top: number, right: number, bottom: number): void\n    {\n        this._marginLeft = left;\n        this._marginTop = top;\n        this._marginRight = right;\n        this._marginBottom = bottom;\n    }\n\n    static parseDimen(val: number | string): number\n    {\n        if (typeof val === 'string')\n        {\n            if (val.endsWith('%'))\n            {\n                val = parseFloat(val.replace('%', '')) / 100;\n            }\n            else if (val.endsWith('px'))\n            {\n                val = parseFloat(val.replace('px', ''));\n            }\n\n            if (typeof val === 'string' || isNaN(val))\n            {\n                throw new Error('Width could not be parsed!');\n            }\n        }\n\n        return val;\n    }\n}\n","import { LayoutOptions } from './LayoutOptions';\nimport * as PIXI from 'pixi.js';\n\nexport interface IFastLayoutParams\n{\n    width?: number | string;\n    height?: number | string;\n    x?: number;\n    y?: number;\n    anchor?: PIXI.Point;\n}\n\n/**\n * @memberof PUXI\n * @interface\n * @property {number} width\n * @property {number} height\n * @property {number} x\n * @property {number} y\n * @property {PIXI.Point} anchor\n */\n\n/**\n * `PUXI.FastLayoutOptions` is an extension to `PUXI.LayoutOptions` that also\n * defines the x & y coordinates. It is accepted by the stage and `PUXI.FastLayout`.\n *\n * If x or y is between -1 and 1, then that dimension will be interpreted as a\n * percentage of the parent's width or height.\n *\n * @memberof PUXI\n * @extends PUXI.LayoutOptions\n * @class\n */\nexport class FastLayoutOptions extends LayoutOptions\n{\n    static DEFAULT_ANCHOR = new PIXI.Point(0, 0);\n    static CENTER_ANCHOR = new PIXI.Point(0.5, 0.5);// fragile, shouldn't be modified\n\n    x: number;\n    y: number;\n    anchor: PIXI.Point;\n\n    constructor(options: IFastLayoutParams)\n    {\n        super(options.width, options.height);\n\n        /**\n         * X-coordinate of the widget in its parent's reference frame. If it is\n         * absolutely less than 1, then it will be interpreted as a percent of\n         * the parent's width.\n         * @member {number}\n         * @default 0\n         */\n        this.x = options.x || 0;\n\n        /**\n         * Y-coordinate of the widget in its parent's reference frame. If it is\n         * absolutely less than 1, then it will be interpreted as a percent of\n         * the parent's height.\n         * @member {number}\n         * @default 0\n         */\n        this.y = options.y || 0;\n\n        /**\n         * The anchor is a normalized point telling where the (x,y) position of the\n         * widget lies inside of it. By default, it is (0, 0), which means that the\n         * top-left corner of the widget will be at (x,y); however, setting it to\n         * (.5,.5) will make the _center of the widget_ be at (x,y) in the parent's\n         * reference frame.\n         * @member {PIXI.Point}\n         * @default PUXI.FastLayoutOptions.DEFAULT_ANCHOR\n         */\n        this.anchor = options.anchor || FastLayoutOptions.DEFAULT_ANCHOR.clone();\n    }\n}\n","import { LayoutOptions } from './LayoutOptions';\nimport { ALIGN } from './Align';\n\nexport interface IBorderLayoutParams\n{\n    width?: number;\n    height?: number;\n    region?: number;\n    horizontalAlign?: ALIGN;\n    verticalAlign?: ALIGN;\n}\n\n/**\n * @memberof PUXI\n * @interface IBorderLayoutParams\n * @property {number} width\n * @property {number} height\n * @property {number} region\n * @property {number} horizontalAlign\n * @property {number} verticalAlign\n */\n\n/**\n * `PUXI.BorderLayoutOptions` defines a simple layout with five regions - the center and\n * four regions along each border. The top and bottom regions span the full width of\n * the parent widget-group. The left and right regions span the height of the layout\n * minus the top and bottom region heights.\n *\n * ```\n * ------------------------------------------------\n * |                 TOP REGION                   |\n * ------------------------------------------------\n * |        |                            |        |\n * |  LEFT  |          CENTER            | RIGHT  |\n * | REGION |          REGION            | REGION |\n * |        |                            |        |\n * ------------------------------------------------\n * |                BOTTOM REGION                 |\n * ------------------------------------------------\n * ```\n *\n * The height of the layout is measured as the sum of the heights of the top, center, and bottom\n * regions. Similarly, the width of the layout is measured as the width of the left, center, and\n * right regions.\n *\n * As of now, border layout doesn't support percent widths and heights.\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.LayoutOptions\n */\nexport class BorderLayoutOptions extends LayoutOptions\n{\n    /**\n     * Positions a widget inside the left border of the layout.\n     * @static\n     * @member {number}\n     */\n    static REGION_LEFT = 0xeff1;\n\n    /**\n     * Positions a widget below the top border of the layout.\n     * @static\n     * @member {number}\n     */\n    static REGION_TOP = 0xeff2;\n\n    /**\n     * Positions a widget below the right border of the layout.\n     * @static\n     * @member {number}\n     */\n    static REGION_RIGHT = 0xeff3;\n\n    /**\n     * Positions a widget below the top border of the layout.\n     * @static\n     * @member {number}\n     */\n    static REGION_BOTTOM = 0xeff4;\n\n    /**\n     * Positions a widget in the center of the layout. The main content of the layout\n     * should be in the center.\n     * @static\n     * @member {number}\n     */\n    static REGION_CENTER = 0xeff5;\n\n    region: number;\n    horizontalAlign: number;\n    verticalAlign: number;\n\n    constructor(options: IBorderLayoutParams)\n    {\n        super(options.width, options.height);\n\n        /**\n         * The border along which the widget is to be placed. This can be one of `POS_LEFT`,\n         * `POS_TOP`, `POS_RIGHT`, `POS_BOTTOM`.\n         * @member {number}\n         * @default {PUXI.BorderLayoutOptions#REGION_CENTER}\n         */\n        this.region = options.region || BorderLayoutOptions.REGION_CENTER;\n\n        /**\n         * Alignment of the widget horizontally in its region.\n         * @member {PUXI.ALIGN}\n         * @default {PUXI.ALIGN.LEFT}\n         */\n        this.horizontalAlign = options.horizontalAlign || ALIGN.LEFT;\n\n        /**\n         * Alignment of the widget vertically in its region.\n         * @member {PUXI.ALIGN}\n         * @default {PUXI.ALIGN.TOP}\n         */\n        this.verticalAlign = options.verticalAlign || ALIGN.TOP;\n    }\n}\n","import { MeasureMode } from '../IMeasurable';\nimport { ILayoutManager } from './ILayoutManager';\nimport { LayoutOptions, FastLayoutOptions } from '../layout-options';\nimport { WidgetGroup } from '../WidgetGroup';\n\n/**\n * `PUXI.FastLayout` is used in conjunction with `PUXI.FastLayoutOptions`. It is the\n * default layout for most widget groups.\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.ILayoutManager\n * @example\n * ```\n * parent.useLayout(new PUXI.FastLayout())\n * ```\n */\nexport class FastLayout implements ILayoutManager\n{\n    private host: WidgetGroup;\n    private _measuredWidth: number;\n    private _measuredHeight: number;\n\n    onAttach(host: WidgetGroup): void\n    {\n        this.host = host;\n    }\n\n    onDetach(): void\n    {\n        this.host = null;\n    }\n\n    onLayout(): void\n    {\n        const parent = this.host;\n        const { contentWidth: width, contentHeight: height, widgetChildren: children } = parent;\n\n        for (let i = 0, j = children.length; i < j; i++)\n        {\n            const widget = children[i];\n            const lopt = (widget.layoutOptions || LayoutOptions.DEFAULT) as FastLayoutOptions;\n\n            let x = lopt.x ? lopt.x : 0;\n            let y = lopt.y ? lopt.y : 0;\n\n            if (Math.abs(x) < 1)\n            {\n                x *= width;\n            }\n            if (Math.abs(y) < 1)\n            {\n                y *= height;\n            }\n\n            const anchor = lopt.anchor || FastLayoutOptions.DEFAULT_ANCHOR;\n\n            const l = x - (anchor.x * widget.getMeasuredWidth());\n            const t = y - (anchor.y * widget.getMeasuredHeight());\n\n            widget.layout(l, t,\n                l + widget.getMeasuredWidth(),\n                t + widget.getMeasuredHeight());\n        }\n    }\n\n    onMeasure(maxWidth: number, maxHeight: number, widthMode: MeasureMode, heightMode: MeasureMode): void\n    {\n        // TODO: Passthrough optimization pass, if there is only one child with FILL_PARENT width or height\n        // then don't measure twice.\n\n        this._measuredWidth = maxWidth;\n        this._measuredHeight = maxHeight;\n\n        const children = this.host.widgetChildren;\n\n        // Measure children\n        for (let i = 0, j = children.length; i < j; i++)\n        {\n            const widget = children[i];\n            const lopt = (widget.layoutOptions || LayoutOptions.DEFAULT) as FastLayoutOptions;\n\n            const loptWidth = (Math.abs(lopt.width) < 1) ? lopt.width * maxWidth : lopt.width;\n            const loptHeight = (Math.abs(lopt.height) < 1) ? lopt.height * maxHeight : lopt.height;\n            const widthMeasureMode = this.getChildMeasureMode(lopt.width, widthMode);\n            const heightMeasureMode = this.getChildMeasureMode(lopt.height, heightMode);\n\n            widget.measure(loptWidth, loptHeight, widthMeasureMode, heightMeasureMode);\n        }\n\n        this._measuredWidth = this.measureWidthReach(maxWidth, widthMode);\n        this._measuredHeight = this.measureHeightReach(maxHeight, heightMode);\n\n        this.measureChildFillers();\n    }\n\n    private getChildMeasureMode(dimen: number, parentMeasureMode: MeasureMode): MeasureMode\n    {\n        if (dimen === LayoutOptions.WRAP_CONTENT)\n        {\n            // No MeasureMode.EXACTLY!\n            return parentMeasureMode === MeasureMode.UNBOUNDED ? MeasureMode.UNBOUNDED : MeasureMode.AT_MOST;\n        }\n\n        return parentMeasureMode;\n    }\n\n    private measureWidthReach(parentWidthLimit: number, widthMode: MeasureMode): number\n    {\n        if (widthMode === MeasureMode.EXACTLY)\n        {\n            return parentWidthLimit;\n        }\n\n        const children = this.host.widgetChildren;\n        let measuredWidth = 0;\n\n        for (let i = 0, j = children.length; i < j; i++)\n        {\n            const widget = children[i];\n            const childWidth = widget.getMeasuredWidth();\n            const lopt = (widget.layoutOptions || LayoutOptions.DEFAULT) as FastLayoutOptions;\n            const x = lopt.x ? lopt.x : 0;\n            const anchor = lopt.anchor ? lopt.anchor : FastLayoutOptions.DEFAULT_ANCHOR;\n\n            // If lopt.x is %, then (1 - lopt.x)% of parent width should be as large\n            // as (1 - anchor.x)% child's width.\n            const minr = (Math.abs(x) < 1 ? (1 - anchor.x) * childWidth / (1 - x) : x + childWidth);\n\n            measuredWidth = Math.max(measuredWidth, minr);\n        }\n\n        if (widthMode === MeasureMode.AT_MOST)\n        {\n            measuredWidth = Math.min(parentWidthLimit, measuredWidth);\n        }\n\n        return measuredWidth;\n    }\n\n    private measureHeightReach(parentHeightLimit: number, heightMode: MeasureMode): number\n    {\n        if (heightMode === MeasureMode.EXACTLY)\n        {\n            return parentHeightLimit;\n        }\n\n        const children = this.host.widgetChildren;\n        let measuredHeight = 0;\n\n        for (let i = 0, j = children.length; i < j; i++)\n        {\n            const widget = children[i];\n            const childHeight = widget.getMeasuredHeight();\n            const lopt = (widget.layoutOptions || LayoutOptions.DEFAULT) as FastLayoutOptions;\n            const y = lopt.y ? lopt.y : 0;\n            const anchor = lopt.anchor ? lopt.anchor : FastLayoutOptions.DEFAULT_ANCHOR;\n\n            const minb = (Math.abs(y) < 1 ? (1 - anchor.y) * childHeight / (1 - y) : y + childHeight);\n\n            measuredHeight = Math.max(measuredHeight, minb);\n        }\n\n        if (heightMode === MeasureMode.AT_MOST)\n        {\n            measuredHeight = Math.min(parentHeightLimit, measuredHeight);\n        }\n\n        return measuredHeight;\n    }\n\n    private measureChildFillers(): void\n    {\n        const children = this.host.widgetChildren;\n\n        for (let i = 0, j = children.length; i < j; i++)\n        {\n            const widget = children[i];\n            const lopt = (widget.layoutOptions || LayoutOptions.DEFAULT) as FastLayoutOptions;\n            let loptWidth = (Math.abs(lopt.width) < 1) ? lopt.width * this._measuredWidth : lopt.width;\n            let loptHeight = (Math.abs(lopt.height) < 1) ? lopt.height * this._measuredHeight : lopt.height;\n\n            if (loptWidth === LayoutOptions.WRAP_CONTENT)\n            {\n                loptWidth = widget.getMeasuredWidth();\n            }\n            if (loptHeight === LayoutOptions.WRAP_CONTENT)\n            {\n                loptHeight = widget.getMeasuredHeight();\n            }\n\n            if (lopt.width === LayoutOptions.FILL_PARENT || lopt.height === LayoutOptions.FILL_PARENT)\n            {\n                widget.measure(\n                    lopt.width === LayoutOptions.FILL_PARENT ? this._measuredWidth : loptWidth,\n                    lopt.height === LayoutOptions.FILL_PARENT ? this._measuredHeight : loptHeight,\n                    MeasureMode.EXACTLY,\n                    MeasureMode.EXACTLY,\n                );\n            }\n        }\n    }\n\n    getMeasuredWidth(): number\n    {\n        return this._measuredWidth;\n    }\n\n    getMeasuredHeight(): number\n    {\n        return this._measuredHeight;\n    }\n}\n","import { Widget } from './Widget';\nimport { ILayoutManager } from './layout-manager/ILayoutManager';\nimport { MeasureMode } from './IMeasurable';\nimport { FastLayout } from './layout-manager/FastLayout';\n\n/**\n * A widget group is a layout owner that can position its children according\n * to the layout given to it.\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.Widget\n * @example\n * ```\n * const group = new PUXI.InteractiveGroup();\n *\n * group.useLayout(new PUXI.AnchorLayout());\n *\n * group.addChild(new PUXI.Button({ text: \"Hey\" })\n *  .setLayoutOptions(\n *      new PUXI.AnchorLayoutOptions({\n *             anchorLeft: 100,\n *             anchorTop: 300,\n *             anchorRight: .4,\n *             anchorBottom: 500,\n *             horizontalAlign: PUXI.ALIGN.CENTER\n *      })\n *  )\n * )\n * ```\n */\nexport class WidgetGroup extends Widget\n{\n    public layoutMgr: ILayoutManager;// lazily initialized (via useLayout(), useDefaultLayout())\n\n    /**\n     * Will set the given layout-manager to be used for positioning child widgets.\n     *\n     * @param {PUXI.ILayoutManager} layoutMgr\n     */\n    useLayout(layoutMgr: ILayoutManager): WidgetGroup\n    {\n        if (this.layoutMgr)\n        {\n            this.layoutMgr.onDetach();\n        }\n\n        this.layoutMgr = layoutMgr;\n\n        if (layoutMgr)\n        {\n            this.layoutMgr.onAttach(this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the widget-recommended layout manager. By default (if not overriden by widget\n     * group class), this is a fast-layout.\n     */\n    useDefaultLayout(): void\n    {\n        this.useLayout(new FastLayout());\n    }\n\n    onMeasure(width: number, height: number, widthMode: MeasureMode, heightMode: MeasureMode): void\n    {\n        super.onMeasure(width, height, widthMode, heightMode);\n\n        if (this.widgetChildren.length === 0)\n        {\n            return;\n        }\n        if (!this.layoutMgr)\n        {\n            this.useDefaultLayout();\n        }\n\n        this.layoutMgr.onMeasure(width - this.paddingHorizontal, height - this.paddingVertical, widthMode, heightMode);\n\n        this._measuredWidth = Math.max(this.measuredWidth, this.layoutMgr.getMeasuredWidth());\n        this._measuredHeight = Math.max(this.measuredHeight, this.layoutMgr.getMeasuredHeight());\n    }\n\n    onLayout(l: number, t: number, r: number, b: number, dirty = true): void\n    {\n        super.onLayout(l, t, r, b, dirty);\n\n        if (this.widgetChildren.length === 0)\n        {\n            return;\n        }\n        if (!this.layoutMgr)\n        {\n            this.useDefaultLayout();\n        }\n\n        this.layoutMgr.onLayout();// layoutMgr is attached to this\n    }\n}\n","import { WidgetGroup } from './WidgetGroup';\nimport * as PIXI from 'pixi.js';\n\n/**\n * An interactive container.\n *\n * @class\n * @extends PUXI.WidgetGroup\n * @memberof PUXI\n */\nexport class InteractiveGroup extends WidgetGroup\n{\n    private hitArea: PIXI.Rectangle;\n\n    constructor()\n    {\n        super();\n        this.hitArea = new PIXI.Rectangle();\n        this.insetContainer.hitArea = this.hitArea;\n    }\n\n    update(): void\n    {\n        super.update();\n    }\n\n    layout(l: number, t: number, r: number, b: number, dirty: boolean): void\n    {\n        super.layout(l, t, r, b, dirty);\n\n        this.hitArea.width = this.width;\n        this.hitArea.height = this.height;\n    }\n}\n\n","import * as PIXI from 'pixi.js';\nimport { TabGroup } from './ctl/FocusController';\nimport { InteractiveGroup } from './InteractiveGroup';\n\n/**\n * @namespace PUXI\n * @interface\n * @property {PIXI.Container}[background]\n * @property {number}[tabIndex]\n * @property {PUXI.TabGroup}[tabGroup]\n */\nexport interface IFocusableOptions\n{\n    background?: PIXI.Container;\n    tabIndex?: number;\n    tabGroup?: any;\n}\n\n/**\n * Represents a view that can gain or loose focus. It is primarily subclassed by\n * input/form widgets.\n *\n * Generally, it is a good idea not use layouts on these types of widgets.\n *\n * @class\n * @extends PUXI.Widget\n * @memberof PUXI\n */\nexport abstract class FocusableWidget extends InteractiveGroup\n{\n    _isFocused: boolean;\n    _isMousePressed: boolean;\n\n    tabIndex: number;\n    tabGroup: TabGroup;\n\n    /**\n     * @param {PUXI.IInputBaseOptions} options\n     * @param {PIXI.Container}[options.background]\n     * @param {number}[options.tabIndex]\n     * @param {any}[options.tabGroup]\n     */\n    constructor(options: IFocusableOptions = {})\n    {\n        super();\n\n        if (options.background)\n        {\n            super.setBackground(options.background);\n        }\n\n        // Prevents double focusing/blurring.\n        this._isFocused = false;\n\n        // Used to lose focus when mouse-down outside widget.\n        this._isMousePressed = false;\n\n        this.interactive = true;\n\n        /**\n         * @member {number}\n         * @readonly\n         */\n        this.tabIndex = options.tabIndex;\n\n        /**\n         * The name of the tab group in which this widget's focus will move on\n         * pressing tab.\n         * @member {PUXI.TabGroup}\n         * @readonly\n         */\n        this.tabGroup = options.tabGroup;\n\n        this.insetContainer.on('pointerdown', () =>\n        {\n            this.focus();\n            this._isMousePressed = true;\n        });\n\n        this.insetContainer.on('pointerup', () => { this._isMousePressed = false; });\n        this.insetContainer.on('pointerupoutside', () => { this._isMousePressed = false; });\n    }\n\n    /**\n     * Brings this widget into focus.\n     */\n    focus(): void\n    {\n        if (this.isFocused)\n        {\n            return;\n        }\n\n        this.stage.focusController.notifyFocus(this);\n\n        this._isFocused = true;\n        this.bindEvents();\n\n        this.emit('focusChanged', true);\n        this.emit('focus');\n    }\n\n    /**\n     * Brings this widget out of focus.\n     */\n    blur(): void\n    {\n        if (!this._isFocused)\n        {\n            return;\n        }\n\n        this.stage.focusController.notifyBlur();\n\n        this._isFocused = false;\n        this.clearEvents();\n\n        this.emit('focusChanged', false);\n        this.emit('blur');\n    }\n\n    /**\n     * Whether this widget is in focus.\n     * @member {boolean}\n     * @readonly\n     */\n    get isFocused(): boolean\n    {\n        return this._isFocused;\n    }\n\n    private bindEvents = (): void =>\n    {\n        this.stage.on('pointerdown', this.onDocumentPointerDownImpl);\n        document.addEventListener('keydown', this.onKeyDownImpl);\n    };\n\n    private clearEvents = (): void =>\n    {\n        this.stage.off('pointerdown', this.onDocumentPointerDownImpl);\n        document.removeEventListener('keydown', this.onKeyDownImpl);\n    };\n\n    protected onKeyDownImpl = (e: any): void =>\n    {\n        const focusCtl = this.stage.focusController;\n\n        if (e.which === 9 && focusCtl.useTab)\n        {\n            focusCtl.onTab();\n            e.preventDefault();\n        }\n        else if (e.which === 38 && focusCtl.useBack)\n        {\n            focusCtl.onBack();\n            e.preventDefault();\n        }\n        else if (e.which === 40 && focusCtl.useForward)\n        {\n            focusCtl.onForward();\n            e.preventDefault();\n        }\n\n        this.emit('keydown');\n    };\n\n    private onDocumentPointerDownImpl = (): void =>\n    {\n        if (!this._isMousePressed)\n        {\n            this.blur();\n        }\n    };\n\n    initialize(): void\n    {\n        super.initialize();\n        this.stage.focusController.in(this, this.tabIndex, this.tabGroup);\n    }\n\n    /**\n     * Fired when the widget comes into focus.\n     * @event focus\n     */\n\n    /**\n     * Fired when the widget goes out of focus.\n     * @event blur\n     */\n\n    /**\n     * Fired when the widgets comes into or goes out of focus.\n     * @event focusChanged\n     * @param {boolean} isFocused - whether the widget is in focus.\n     */\n}\n","import { Widget, TEXT_STYLE_PROPERTIES } from './Widget';\nimport * as PIXI from 'pixi.js';\nimport { Style } from './Style';\n\n/**\n * A static text widget. It cannot retain children.\n *\n * @memberof PUXI\n * @public\n */\nexport class TextWidget extends Widget\n{\n    private textDisplay: PIXI.Text;\n\n    /**\n     * @param {string} text - text content\n     * @param {PIXI.TextStyle} textStyle - styled used for text\n     */\n    constructor(text: string, textStyle?: PIXI.TextStyle)\n    {\n        super();\n\n        this.textDisplay = new PIXI.Text(text, textStyle);\n        this.contentContainer.addChild(this.textDisplay);\n    }\n\n    update(): void\n    {\n        super.update();\n\n        if (this.tint !== null)\n        {\n            this.textDisplay.tint = this.tint;\n        }\n\n        if (this.blendMode !== null)\n        {\n            this.textDisplay.blendMode = this.blendMode;\n        }\n    }\n\n    /**\n     * @deprecated\n     */\n    get value(): string\n    {\n        return this.textDisplay.text;\n    }\n    set value(val: string)\n    {\n        this.textDisplay.text = val;\n    }\n\n    get text(): string\n    {\n        return this.value;\n    }\n    set text(val: string)\n    {\n        this.value = val;\n    }\n\n    /**\n     * Get the text style. You can set properties directly on the style.\n     */\n    getTextStyle(): PIXI.TextStyle\n    {\n        return this.textDisplay.style;\n    }\n\n    /**\n     * Set the text style directly\n     *\n     * @param textStyle\n     * @example\n     * textWidget.setTextStyle({\n     *     fontFamily: 'Roboto',\n     *     fontSize: 14\n     * })\n     */\n    setTextStyle(textStyle: PIXI.TextStyle): this\n    {\n        this.textDisplay.style = textStyle;\n\n        return this;\n    }\n\n    protected onStyleChange(style: Style): void\n    {\n        super.onStyleChange(style);\n\n        const styleData = style.getProperties(...TEXT_STYLE_PROPERTIES);\n        const textStyle = this.textDisplay.style;\n\n        TEXT_STYLE_PROPERTIES.forEach((propName: string) =>\n        {\n            if (styleData[propName] !== undefined)\n            {\n                textStyle[propName] = styleData[propName];\n            }\n        });\n    }\n}\n","import { ClickManager } from './event/ClickManager';\nimport { FocusableWidget, IFocusableOptions } from './FocusableWidget';\nimport { TextWidget } from './TextWidget';\nimport * as PIXI from 'pixi.js';\nimport { LayoutOptions, FastLayoutOptions } from './layout-options';\nimport { Style } from './Style';\n\n/**\n * @memberof PUXI\n * @interface\n * @extends PUXI.IFocusableOptions\n * @property {PUXI.TextWidget | string} text\n */\nexport interface IButtonOptions extends IFocusableOptions\n{\n    background?: PIXI.Container;\n    text?: TextWidget | string;\n    tabIndex?: number;\n    tabGroup?: any;\n}\n\n/**\n * Button that can be clicked.\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.FocusableWidget\n */\nexport class Button extends FocusableWidget\n{\n    isHover: boolean;\n\n    protected textWidget: TextWidget;\n\n    click: () => void;\n    /**\n     * @param [options.background}] {(PIXI.UI.SliceSprite|PIXI.UI.Sprite)} will be used as background for Button\n     * @param [options.text=null] {PIXI.UI.Text} optional text\n     * @param [options.tabIndex=0] {Number} input tab index\n     * @param [options.tabGroup=0] {Number|String} input tab group\n     * @param [options.width=options.background.width] {Number|String} width\n     * @param [options.height=options.background.height] {Number|String} height\n     */\n    constructor(options: IButtonOptions)\n    {\n        super(options);\n\n        this.isHover = false;\n\n        if (typeof options.text === 'string')\n        {\n            options.text = new TextWidget(options.text, new PIXI.TextStyle());\n        }\n\n        this.textWidget = options.text.setLayoutOptions(\n            new FastLayoutOptions({\n                width: LayoutOptions.WRAP_CONTENT,\n                height: LayoutOptions.WRAP_CONTENT,\n                x: 0.5,\n                y: 0.5,\n                anchor: FastLayoutOptions.CENTER_ANCHOR,\n            }),\n        ) as TextWidget;\n\n        if (this.textWidget)\n        {\n            this.addChild(this.textWidget);\n        }\n\n        this.contentContainer.buttonMode = true;\n    }\n\n    onClick(e: PIXI.InteractionEvent): void\n    {\n        super.onClick(e);\n\n        this.emit('click', e);\n    }\n\n    onDoubleClick(e: PIXI.InteractionEvent): void\n    {\n        super.onDoubleClick(e);\n\n        this.emit('doubleclick', e);\n    }\n\n    update(): void\n    {\n        super.update();\n        // No update needed\n    }\n\n    initialize(): void\n    {\n        super.initialize();\n\n        this.insetContainer.interactiveChildren = false;\n        // lazy to make sure all children is initialized (trying to get the bedst hitArea possible)\n    }\n\n    /**\n     * Label for this button.\n     * @member {string}\n     */\n    get value(): string\n    {\n        if (this.textWidget)\n        {\n            return this.textWidget.text;\n        }\n\n        return '';\n    }\n    set value(val: string)\n    {\n        if (this.textWidget)\n        {\n            this.textWidget.text = val;\n        }\n    }\n\n    get text(): any\n    {\n        return this.textWidget;\n    }\n    set text(val: any)\n    {\n        this.value = val;\n    }\n\n    onStyleChange(style: Style): void\n    {\n        // eslint-disable-next-line\n        // @ts-ignore\n        this.textWidget.onStyleChange(style);\n    }\n}\n\n/*\n * Features:\n * Button, radio button (checkgroups)\n *\n * Methods:\n * blur()\n * focus()\n *\n * Properties:\n * checked: get/set Button checked\n * value: get/set Button value\n *\n * Events:\n * \"hover\"          param: [bool]isHover (hover/leave)\n * \"press\"          param: [bool]isPressed (pointerdown/pointerup)\n * \"click\"\n * \"blur\"\n * \"focus\"\n * \"focusChanged\"   param: [bool]isFocussed\n *\n */\n","class EaseBase\n{\n    getPosition(p)\n    {\n        return p;\n    }\n}\n\nexport { EaseBase };\n","import { EaseBase } from './EaseBase';\n\nfunction ExponentialEase(power, easeIn, easeOut)\n{\n    const pow = power;\n    const t = easeIn && easeOut ? 3 : easeOut ? 1 : 2;\n\n    this.getPosition = function (p)\n    {\n        let r = (t === 1) ? 1 - p : (t === 2) ? p : (p < 0.5) ? p * 2 : (1 - p) * 2;\n\n        if (pow === 1)\n        {\n            r *= r;\n        }\n        else if (pow === 2)\n        {\n            r *= r * r;\n        }\n        else if (pow === 3)\n        {\n            r *= r * r * r;\n        }\n        else if (pow === 4)\n        {\n            r *= r * r * r * r;\n        }\n\n        return (t === 1) ? 1 - r : (t === 2) ? r : (p < 0.5) ? r / 2 : 1 - (r / 2);\n    };\n}\n\nExponentialEase.prototype = Object.create(EaseBase.prototype);\nExponentialEase.prototype.constructor = ExponentialEase;\n\nexport { ExponentialEase };\n\n","import { EaseBase } from './EaseBase';\nimport { ExponentialEase } from './ExponentialEase';\n\nconst Ease = {};\n\nconst HALF_PI = Math.PI * 0.5;\n\nexport function create(fn)\n{\n    const e = Object.create(EaseBase.prototype);\n\n    e.getPosition = fn;\n\n    return e;\n}\n\nconst Linear = new EaseBase();\n\n// Liear\nEase.Linear = Linear;\n\n// Exponetial Eases\nexport function wrapEase(easeInFunction, easeOutFunction, easeInOutFunction)\n{\n    return {\n        easeIn: easeInFunction,\n        easeOut: easeOutFunction,\n        easeInOut: easeInOutFunction,\n    };\n}\n\nEase.Power0 = {\n    easeNone: Linear,\n};\n\nEase.Power1 = Ease.Quad = wrapEase(\n    new ExponentialEase(1, 1, 0),\n    new ExponentialEase(1, 0, 1),\n    new ExponentialEase(1, 1, 1));\n\nEase.Power2 = Ease.Cubic = wrapEase(\n    new ExponentialEase(2, 1, 0),\n    new ExponentialEase(2, 0, 1),\n    new ExponentialEase(2, 1, 1));\n\nEase.Power3 = Ease.Quart = wrapEase(\n    new ExponentialEase(3, 1, 0),\n    new ExponentialEase(3, 0, 1),\n    new ExponentialEase(3, 1, 1));\n\nEase.Power4 = Ease.Quint = wrapEase(\n    new ExponentialEase(4, 1, 0),\n    new ExponentialEase(4, 0, 1),\n    new ExponentialEase(4, 1, 1));\n\n// Bounce\nEase.Bounce = {\n    BounceIn: create(function (p)\n    {\n        if ((p = 1 - p) < 1 / 2.75)\n        {\n            return 1 - (7.5625 * p * p);\n        }\n        else if (p < 2 / 2.75)\n        {\n            return 1 - (7.5625 * (p -= 1.5 / 2.75) * p + 0.75);\n        }\n        else if (p < 2.5 / 2.75)\n        {\n            return 1 - (7.5625 * (p -= 2.25 / 2.75) * p + 0.9375);\n        }\n\n        return 1 - (7.5625 * (p -= 2.625 / 2.75) * p + 0.984375);\n    }),\n    BounceOut: create(function (p)\n    {\n        if (p < 1 / 2.75)\n        {\n            return 7.5625 * p * p;\n        }\n        else if (p < 2 / 2.75)\n        {\n            return 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;\n        }\n        else if (p < 2.5 / 2.75)\n        {\n            return 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;\n        }\n\n        return 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;\n    }),\n    BounceInOut: create(function (p)\n    {\n        const invert = (p < 0.5);\n\n        if (invert)\n        {\n            p = 1 - (p * 2);\n        }\n        else\n        {\n            p = (p * 2) - 1;\n        }\n        if (p < 1 / 2.75)\n        {\n            p = 7.5625 * p * p;\n        }\n        else if (p < 2 / 2.75)\n        {\n            p = 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;\n        }\n        else if (p < 2.5 / 2.75)\n        {\n            p = 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;\n        }\n        else\n        {\n            p = 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;\n        }\n\n        return invert ? (1 - p) * 0.5 : p * 0.5 + 0.5;\n    }),\n};\n\n// Circ\nEase.Circ = {\n    CircIn: create(function (p)\n    {\n        return -(Math.sqrt(1 - (p * p)) - 1);\n    }),\n    CircOut: create(function (p)\n    {\n        return Math.sqrt(1 - (p = p - 1) * p);\n    }),\n    CircInOut: create(function (p)\n    {\n        return ((p *= 2) < 1) ? -0.5 * (Math.sqrt(1 - p * p) - 1) : 0.5 * (Math.sqrt(1 - (p -= 2) * p) + 1);\n    }),\n};\n\n// Expo\nEase.Expo = {\n    ExpoIn: create(function (p)\n    {\n        return Math.pow(2, 10 * (p - 1)) - 0.001;\n    }),\n    ExpoOut: create(function (p)\n    {\n        return 1 - Math.pow(2, -10 * p);\n    }),\n    ExpoInOut: create(function (p)\n    {\n        return ((p *= 2) < 1) ? 0.5 * Math.pow(2, 10 * (p - 1)) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n    }),\n};\n\n// Sine\nEase.Sine = {\n    SineIn: create(function (p)\n    {\n        return -Math.cos(p * HALF_PI) + 1;\n    }),\n    SineOut: create(function (p)\n    {\n        return Math.sin(p * HALF_PI);\n    }),\n    SineInOut: create(function (p)\n    {\n        return -0.5 * (Math.cos(Math.PI * p) - 1);\n    }),\n};\n\nexport { Ease };\n","export const Helpers = {\n    Lerp(start: number, stop: number, amt: number): number\n    {\n        if (amt > 1) amt = 1;\n        else if (amt < 0) amt = 0;\n\n        return start + (stop - start) * amt;\n    },\n    Round(number: number, decimals: number): number\n    {\n        const pow = Math.pow(10, decimals);\n\n        return Math.round(number * pow) / pow;\n    },\n    componentToHex(c: any): string\n    {\n        const hex = c.toString(16);\n\n        return hex.length == 1 ? `0${hex}` : hex;\n    },\n    rgbToHex(r: number, g: number, b: number): string\n    {\n        return `#${this.componentToHex(r)}${this.componentToHex(g)}${this.componentToHex(b)}`;\n    },\n    rgbToNumber(r: number, g: number, b: number): number\n    {\n        return r * 65536 + g * 256 + b;\n    },\n    numberToRgb(c: number): any\n    {\n        return {\n            r: Math.floor(c / (256 * 256)),\n            g: Math.floor(c / 256) % 256,\n            b: c % 256,\n        };\n    },\n    hexToRgb(hex: any): any\n    {\n        if (hex === null)\n        {\n            hex = 0xffffff;\n        }\n        if (!isNaN(hex))\n        {\n            return this.numberToRgb(hex);\n        }\n\n        // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n        const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n\n        hex = hex.replace(shorthandRegex, function (m, r, g, b)\n        {\n            return r + r + g + g + b + b;\n        });\n\n        const result = (/^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i).exec(hex);\n\n        return result ? {\n            r: parseInt(result[1], 16),\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16),\n        } : null;\n    },\n};\n","import { Widget } from './Widget';\nimport * as PIXI from 'pixi.js';\n\n/**\n * An UI sprite object\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.Widget\n */\nexport class Sprite extends Widget\n{\n    private spriteDisplay: PIXI.Sprite;\n\n    constructor(texture: PIXI.Texture)\n    {\n        super();\n\n        this.spriteDisplay = new PIXI.Sprite(texture);\n        this.contentContainer.addChild(this.spriteDisplay);\n    }\n\n    update(): void\n    {\n        if (this.tint !== null)\n        {\n            this.spriteDisplay.tint = this.tint;\n        }\n\n        if (this.blendMode !== null)\n        {\n            this.spriteDisplay.blendMode = this.blendMode;\n        }\n    }\n\n    static fromImage(imageUrl): Sprite\n    {\n        return new Sprite(new PIXI.Texture(new PIXI.BaseTexture(imageUrl)));\n    }\n}\n\nexport type ImageWidget = Sprite;\nexport const ImageWidget = Sprite;\n","import { ILayoutManager } from './ILayoutManager';\nimport { WidgetGroup } from '../WidgetGroup';\nimport { Widget } from '../Widget';\nimport { LayoutOptions, ALIGN } from '../layout-options';\nimport { BorderLayoutOptions } from '../layout-options/BorderLayoutOptions';\nimport { MeasureMode } from '../IMeasurable';\n\nconst {\n    REGION_LEFT,\n    REGION_TOP,\n    REGION_RIGHT,\n    REGION_BOTTOM,\n    REGION_CENTER,\n} = BorderLayoutOptions;\n\nconst {\n    FILL_PARENT,\n} = LayoutOptions;\n\nconst {\n    EXACTLY,\n    AT_MOST,\n} = MeasureMode;\n\n/**\n * `PUXI.BorderLayout` is used in conjunction with `PUXI.BorderLayoutOptions`.\n *\n * This layout guarantees that the \"center\" region will always be in the center of\n * the widget-group.\n *\n * WARNING: This layout may have some bugs in edge cases that haven't been reported.\n *\n * @memberof PUXI\n * @class\n * @implements PUXI.ILayoutManager\n */\nexport class BorderLayout implements ILayoutManager\n{\n    protected host: WidgetGroup;\n\n    protected leftWidgets: Widget[];\n    protected topWidgets: Widget[];\n    protected rightWidgets: Widget[];\n    protected bottomWidgets: Widget[];\n    protected centerWidgets: Widget[];\n\n    protected measuredLeftWidth: number;\n    protected measuredRightWidth: number;\n    protected measuredCenterWidth: number;\n    protected measuredWidth: number;\n\n    protected measuredTopHeight: number;\n    protected measuredBottomHeight: number;\n    protected measuredCenterHeight: number;\n    protected measuredHeight: number;\n\n    constructor()\n    {\n        this.leftWidgets = [];\n        this.topWidgets = [];\n        this.rightWidgets = [];\n        this.bottomWidgets = [];\n        this.centerWidgets = [];\n    }\n\n    onAttach(host: WidgetGroup): void\n    {\n        this.host = host;\n    }\n\n    onDetach(): void\n    {\n        this.host = null;\n        this.clearMeasureCache();\n        this.clearRegions();\n    }\n\n    onLayout(): void\n    {\n        this.layoutChildren(\n            this.leftWidgets,\n            0,\n            this.measuredTopHeight,\n            this.measuredLeftWidth,\n            this.measuredCenterHeight);\n        this.layoutChildren(this.topWidgets, 0, 0, this.measuredWidth, this.measuredTopHeight);\n        this.layoutChildren(\n            this.rightWidgets,\n            this.measuredWidth - this.measuredRightWidth,\n            this.measuredTopHeight,\n            this.measuredRightWidth,\n            this.measuredCenterHeight,\n        );\n        this.layoutChildren(\n            this.bottomWidgets,\n            0,\n            this.measuredTopHeight + this.measuredCenterHeight,\n            this.measuredWidth,\n            this.measuredBottomHeight,\n        );\n        this.layoutChildren(\n            this.centerWidgets,\n            this.measuredLeftWidth,\n            this.measuredTopHeight,\n            this.measuredCenterWidth,\n            this.measuredCenterHeight,\n        );\n    }\n\n    layoutChildren(\n        widgets: Widget[],\n        regionX: number,\n        regionY: number,\n        regionWidth: number,\n        regionHeight: number,\n    ): void\n    {\n        for (let i = 0, j = widgets.length; i < j; i++)\n        {\n            const widget = widgets[i];\n\n            let x = 0;\n            let y = 0;\n\n            switch ((widget.layoutOptions as BorderLayoutOptions)?.horizontalAlign)\n            {\n                case ALIGN.CENTER: x = (regionWidth - widget.getMeasuredWidth()) / 2; break;\n                case ALIGN.RIGHT: x = regionWidth - widget.getMeasuredWidth(); break;\n                default: x = 0; break;\n            }\n\n            switch ((widget.layoutOptions as BorderLayoutOptions)?.verticalAlign)\n            {\n                case ALIGN.CENTER: y = (regionHeight - widget.getMeasuredHeight()) / 2; break;\n                case ALIGN.BOTTOM: y = regionHeight - widget.getMeasuredHeight(); break;\n                default: y = 0; break;\n            }\n\n            x += regionX;\n            y += regionY;\n\n            widget.layout(x, y, x + widget.getMeasuredWidth(), y + widget.getMeasuredHeight(), true);\n        }\n    }\n\n    /**\n     * @param {number} maxWidth\n     * @param {number} maxHeight\n     * @param {PUXI.MeasureMode} widthMode\n     * @param {PUXI.MeasureMode} heightMode\n     * @override\n     */\n    onMeasure(maxWidth: number, maxHeight: number, widthMode: MeasureMode, heightMode: MeasureMode): void\n    {\n        this.indexRegions();\n        this.clearMeasureCache();\n\n        // Children can be aligned inside region if smaller\n        const childWidthMode = widthMode === MeasureMode.EXACTLY ? MeasureMode.AT_MOST : widthMode;\n        const childHeightMode = heightMode === MeasureMode.EXACTLY ? MeasureMode.AT_MOST : widthMode;\n\n        // Measure top, bottom, and center. The max. of each row's width will be our \"reference\".\n        let [tw, th, , thmin] = this.measureChildren(// eslint-disable-line prefer-const\n            this.topWidgets,\n            maxWidth,\n            maxHeight,\n            childWidthMode, childHeightMode,\n        );\n        let [bw, bh,, bhmin] = this.measureChildren(// eslint-disable-line prefer-const\n            this.bottomWidgets,\n            maxWidth,\n            maxHeight,\n            childWidthMode, childHeightMode,\n        );\n        let [cw, ch, cwmin, chmin] = this.measureChildren(// eslint-disable-line prefer-const\n            this.centerWidgets,\n            maxWidth,\n            maxHeight,\n            childWidthMode,\n            heightMode);\n\n        // Measure left & right regions. Their heights will equal center's height.\n        let [lw, , lwmin] = this.measureChildren(// eslint-disable-line prefer-const\n            this.leftWidgets,\n            maxWidth,\n            ch,\n            childWidthMode, MeasureMode.AT_MOST);\n        let [rw, , rwmin] = this.measureChildren(// eslint-disable-line prefer-const\n            this.rightWidgets,\n            maxWidth,\n            ch,\n            childWidthMode, MeasureMode.AT_MOST);\n\n        // Check if total width/height is greater than our limit. If so, then downscale\n        // each row's height or each column's (in middle row) width.\n\n        const middleRowWidth = lw + rw + cw;\n        const netWidth = Math.max(tw, bw, middleRowWidth);\n        const netHeight = th + bh + ch;\n\n        // Resolve our limits.\n        if (widthMode === MeasureMode.EXACTLY)\n        {\n            this.measuredWidth = maxWidth;\n        }\n        else if (widthMode === MeasureMode.AT_MOST)\n        {\n            this.measuredWidth = Math.min(netWidth, maxWidth);\n        }\n        else\n        {\n            this.measuredWidth = netWidth;\n        }\n\n        if (heightMode === MeasureMode.EXACTLY)\n        {\n            this.measuredHeight = maxHeight;\n        }\n        else if (heightMode === MeasureMode.AT_MOST)\n        {\n            this.measuredHeight = Math.min(netHeight, maxHeight);\n        }\n        else\n        {\n            this.measuredHeight = netHeight;\n        }\n\n        tw = this.measuredWidth;\n        bw = this.measuredWidth;\n\n        if (netHeight > this.measuredHeight)\n        {\n            const hmin = (thmin + chmin + bhmin);\n\n            // Redistribute heights minus min-heights.\n            if (hmin < this.measuredHeight)\n            {\n                const downscale = (this.measuredHeight - hmin) / (netHeight - hmin);\n\n                th = thmin + ((th - thmin) * downscale);\n                bh = bhmin + ((bh - bhmin) * downscale);\n                ch = chmin + ((ch - chmin) * downscale);\n            }\n            // Redistribute full heights.\n            else\n            {\n                const downscale = this.measuredHeight / netHeight;\n\n                th *= downscale;\n                bh *= downscale;\n                ch *= downscale;\n            }\n        }\n\n        if (netWidth > this.measuredWidth)\n        {\n            const wmin = lwmin + cwmin + rwmin;\n\n            // Redistribute widths minus min. widths\n            if (wmin < this.measuredWidth)\n            {\n                const downscale = (this.measuredWidth - wmin) / (netWidth - wmin);\n\n                lw = lwmin + ((lw - lwmin) * downscale);\n                cw = cwmin + ((cw - cwmin) * downscale);\n                rw = rwmin + ((rw - rwmin) * downscale);\n            }\n            // Redistribute full widths\n            else\n            {\n                const downscale = this.measuredWidth / netWidth;\n\n                lw *= downscale;\n                cw *= downscale;\n                rw *= downscale;\n            }\n        }\n\n        // Useful to know!\n        this.measuredLeftWidth = lw;\n        this.measuredRightWidth = rw;\n        this.measuredCenterWidth = cw;\n        this.measuredTopHeight = th;\n        this.measuredBottomHeight = bh;\n        this.measuredCenterHeight = ch;\n\n        this.fitChildren(this.leftWidgets, this.measuredLeftWidth, this.measuredCenterHeight);\n        this.fitChildren(this.topWidgets, this.measuredWidth, this.measuredTopHeight);\n        this.fitChildren(this.rightWidgets, this.measuredRightWidth, this.measuredCenterHeight);\n        this.fitChildren(this.bottomWidgets, this.measuredWidth, this.measuredBottomHeight);\n        this.fitChildren(this.centerWidgets, this.measuredCenterWidth, this.measuredCenterHeight);\n    }\n\n    /**\n     * This measures the list of widgets given the constraints. The max width and\n     * height amongst the children is returned.\n     *\n     * @param {PUXI.Widget[]} list\n     * @param {number} maxWidth\n     * @param {number} maxHeight\n     * @param {PUXI.MeasureMode} widthMode\n     * @param {PUXI.MeasureMode} heightMode\n     * @returns {number[]} - [width, height, widthFixedLowerBound, heightFixedLowerBound] -\n     *    the max. width and height amongst children. Also, the minimum required width/height\n     *    for the region (as defined in layout-options).\n     */\n    protected measureChildren(\n        list: Widget[],\n        maxWidth: number,\n        maxHeight: number,\n        widthMode: MeasureMode,\n        heightMode: MeasureMode,\n    ): number[]\n    {\n        let width = 0;\n        let height = 0;\n        let widthFixedLowerBound = 0;\n        let heightFixedLowerBound = 0;\n\n        for (let i = 0, j = list.length; i < j; i++)\n        {\n            const widget = list[i];\n            const lopt = widget.layoutOptions || LayoutOptions.DEFAULT;\n\n            let w = maxWidth;\n            let h = maxHeight;\n            let wmd = widthMode;\n            let hmd = heightMode;\n\n            if (lopt.width <= LayoutOptions.MAX_DIMEN)\n            {\n                w = lopt.width;\n                wmd = EXACTLY;\n\n                widthFixedLowerBound = Math.max(widthFixedLowerBound, w);\n            }\n            if (lopt.height <= LayoutOptions.MAX_DIMEN)\n            {\n                h = lopt.height;\n                hmd = EXACTLY;\n\n                heightFixedLowerBound = Math.max(heightFixedLowerBound, h);\n            }\n\n            widget.measure(w, h, wmd, hmd);\n\n            width = Math.max(width, widget.getMeasuredWidth());\n            height = Math.max(height, widget.getMeasuredHeight());\n        }\n\n        return [width, height, widthFixedLowerBound, heightFixedLowerBound];\n    }\n\n    /**\n     * Ensures all widgets in the list measured their dimensions below the region\n     * width & height. Widgets that are too large are remeasured in the those\n     * limits (using `MeasureMode.AT_MOST`).\n     *\n     * This will handle widgets that have \"FILL_PARENT\" width or height.\n     *\n     * @param {PUXI.Widget[]} list\n     * @param {number} measuredRegionWidth\n     * @param {number} measuredRegionHeight\n     */\n    protected fitChildren(\n        list: Widget[],\n        measuredRegionWidth: number,\n        measuredRegionHeight: number,\n    ): void\n    {\n        for (let i = 0, j = list.length; i < j; i++)\n        {\n            const widget = list[i];\n\n            if (widget.getMeasuredWidth() <= measuredRegionWidth\n                && widget.getMeasuredHeight() <= measuredRegionHeight\n                && widget.getMeasuredWidth() > 0\n                && widget.getMeasuredHeight() > 0\n                && widget.layoutOptions?.width !== FILL_PARENT\n                && widget.layoutOptions?.height !== FILL_PARENT)\n            {\n                continue;\n            }\n\n            if (measuredRegionWidth > 0 && measuredRegionHeight > 0)\n            {\n                const wm = widget.layoutOptions?.width === FILL_PARENT ? EXACTLY : AT_MOST;\n                const hm = widget.layoutOptions?.height === FILL_PARENT ? EXACTLY : AT_MOST;\n\n                widget.measure(measuredRegionWidth, measuredRegionHeight, wm, hm);\n            }\n        }\n    }\n\n    /**\n     * Indexes the list of left, top, right, bottom, and center widget lists.\n     */\n    protected indexRegions(): void\n    {\n        this.clearRegions();\n        const { widgetChildren: children } = this.host;\n\n        for (let i = 0, j = children.length; i < j; i++)\n        {\n            const widget = children[i];\n            const lopt = (widget.layoutOptions || LayoutOptions.DEFAULT) as BorderLayoutOptions;\n\n            const region = lopt.region || REGION_CENTER;\n\n            switch (region)\n            {\n                case REGION_LEFT: this.leftWidgets.push(widget); break;\n                case REGION_TOP: this.topWidgets.push(widget); break;\n                case REGION_RIGHT: this.rightWidgets.push(widget); break;\n                case REGION_BOTTOM: this.bottomWidgets.push(widget); break;\n                default: this.centerWidgets.push(widget);\n            }\n        }\n    }\n\n    /**\n     * Clears the left, top, right, bottom, and center widget lists.\n     */\n    protected clearRegions(): void\n    {\n        this.leftWidgets.length = 0;\n        this.topWidgets.length = 0;\n        this.rightWidgets.length = 0;\n        this.bottomWidgets.length = 0;\n    }\n\n    /**\n     * Zeros the measured dimensions.\n     */\n    protected clearMeasureCache(): void\n    {\n        this.measuredLeftWidth = 0;\n        this.measuredRightWidth = 0;\n        this.measuredCenterWidth = 0;\n        this.measuredTopHeight = 0;\n        this.measuredBottomHeight = 0;\n        this.measuredCenterHeight = 0;\n    }\n\n    getMeasuredWidth(): number\n    {\n        return this.measuredWidth;\n    }\n\n    getMeasuredHeight(): number\n    {\n        return this.measuredHeight;\n    }\n}\n","import { ILayoutManager } from './ILayoutManager';\nimport { WidgetGroup } from '../WidgetGroup';\nimport { MeasureMode } from '../IMeasurable';\nimport { LayoutOptions } from '../layout-options';\n\ntype Gravity = 'left' | 'center' | 'right' | 'top' | 'middle' | 'bottom';\n\nexport class LinearLayout implements ILayoutManager\n{\n    private host: WidgetGroup;\n    private orientation: 'vertical' | 'horizontal';\n    private gravity: Gravity;\n    private measuredWidth: number;\n    private measuredHeight: number;\n\n    constructor(orientation: 'vertical' | 'horizontal' = 'vertical', gravity: Gravity = 'center')\n    {\n        this.orientation = orientation;\n        this.gravity = gravity;\n    }\n\n    onAttach(host: WidgetGroup): void\n    {\n        this.host = host;\n    }\n\n    onDetach(): void\n    {\n        this.host = null;\n    }\n\n    onLayout(): void\n    {\n        let position = 0;\n        const children = this.host.widgetChildren;\n        const breadth = this.orientation === 'vertical'\n            ? this.measuredWidth\n            : this.measuredHeight;\n\n        for (let i = 0, j = children.length; i < j; i++)\n        {\n            const widget = children[i];\n\n            // along axis\n            const u = this.orientation === 'vertical'\n                ? widget.getMeasuredWidth()\n                : widget.getMeasuredHeight();\n            const v = this.orientation === 'vertical'\n                ? widget.getMeasuredHeight()\n                : widget.getMeasuredWidth();\n\n            let p = 0;\n\n            if (u < breadth)\n            {\n                switch (this.gravity)\n                {\n                    case 'center':\n                    case 'middle':\n                        p = (breadth - u) / 2;\n                        break;\n                    case 'right':\n                    case 'bottom':\n                        p = breadth - u;\n                        break;\n                }\n            }\n\n            if (this.orientation === 'vertical')\n            {\n                widget.layout(p, position, p + u, position + v);\n            }\n            else\n            {\n                widget.layout(position, p, position + v, p + u);\n            }\n\n            position += v;\n        }\n    }\n\n    onMeasure(widthLimit: number, heightLimit: number, widthMode: MeasureMode, heightMode: MeasureMode): void\n    {\n        const children = this.host.widgetChildren;\n        const baseWidthMode = widthMode === MeasureMode.EXACTLY ? MeasureMode.AT_MOST : widthMode;\n        const baseHeightMode = heightMode === MeasureMode.EXACTLY ? MeasureMode.AT_MOST : heightMode;\n\n        let length = 0;\n        let breadth = 0;\n\n        for (let i = 0, j = children.length; i < j; i++)\n        {\n            const widget = children[i];\n            const lopt = (widget.layoutOptions || LayoutOptions.DEFAULT);\n\n            const widgetWidthLimit = lopt.isWidthPredefined ? lopt.width : widthLimit;\n            const widgetHeightLimit = lopt.isHeightPredefined ? lopt.height : heightLimit;\n            const widgetWidthMode = lopt.isWidthPredefined ? MeasureMode.EXACTLY : baseWidthMode;\n            const widgetHeightMode = lopt.isHeightPredefined ? MeasureMode.EXACTLY : baseHeightMode;\n\n            widget.measure(widgetWidthLimit, widgetHeightLimit, widgetWidthMode, widgetHeightMode);\n\n            if (this.orientation === 'vertical')\n            {\n                breadth = Math.max(breadth, widget.getMeasuredWidth());\n                length += widget.getMeasuredHeight();\n            }\n            else\n            {\n                breadth = Math.max(breadth, widget.getMeasuredHeight());\n                length += widget.getMeasuredWidth();\n            }\n        }\n\n        if (this.orientation === 'vertical')\n        {\n            this.measuredWidth = breadth;\n            this.measuredHeight = length;\n        }\n        else\n        {\n            this.measuredWidth = length;\n            this.measuredHeight = breadth;\n        }\n    }\n\n    getMeasuredWidth(): number\n    {\n        return this.measuredWidth;\n    }\n\n    getMeasuredHeight(): number\n    {\n        return this.measuredHeight;\n    }\n}\n","import { Widget } from './Widget';\nimport { DragManager } from './event/DragManager';\nimport { Tween } from './Tween';\nimport { Ease } from './Ease/Ease';\nimport { Helpers } from './Helpers';\nimport { Sprite } from './Sprite';\nimport * as PIXI from 'pixi.js';\nimport { MeasureMode } from './IMeasurable';\n\nexport interface ISliderOptions\n{\n    track?: PIXI.Container | Widget;\n    handle?: PIXI.Container | Widget;\n    fill?: Sprite;\n    orientation?: number;\n    value?: number;\n    minValue?: number;\n    maxValue?: number;\n    decimals?: number;\n    onValueChange?: () => void;\n    onValueChanging?: () => void;\n}\n\n/**\n * @memberof PUXI\n * @interface ISliderOptions\n * @property {PIXI.Container}[track]\n * @property {PIXI.Container}[handle]\n */\n\n/**\n * These options are used to configure a `PUXI.Slider`.\n *\n * @memberof PUXI\n * @interface ISliderOptions\n * @property {PIXI.Container}[track]\n * @property {PIXI.Container}[fill]\n * @property {boolean}[vertical]\n * @property {number}[value]\n * @property {number}[minValue]\n * @property {number}[maxValue]\n * @property {number}[decimals]\n * @property {Function}[onValueChange]\n * @property {Function}[onValueChanging]\n */\n\n/**\n * A slider is a form of input to set a variable to a value in a continuous\n * range. It cannot have its own children.\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.Widget\n */\nexport class Slider extends Widget\n{\n    protected _disabled: boolean;\n\n    track: Widget;\n    handle: Widget;\n    fill: Sprite;\n\n    public readonly orientation: number;\n\n    protected percentValue: number;\n    protected _minValue: number;\n    protected _maxValue: number;\n\n    private _localCursor: PIXI.Point;\n\n    decimals: number;\n    vertical: boolean;\n\n    _lastChange: number;\n    _lastChanging: number;\n\n    onValueChange: (n: number) => void;\n    onValueChanging: (n: number) => void;\n\n    /**\n     * @param options {Object} Slider settings\n     * @param options.track {(PIXI.UI.SliceSprite|PIXI.UI.Sprite)}  Any type of UIOBject, will be used for the slider track\n     * @param options.handle {(PIXI.UI.SliceSprite|PIXI.UI.Sprite)} will be used as slider handle\n     * @param [options.fill=null] {(PIXI.UI.SliceSprite|PIXI.UI.Sprite)} will be used for slider fill\n     * @param [options.vertical=false] {boolean} Direction of the slider\n     * @param [options.value=0] {number} value of the slider\n     * @param [options.minValue=0] {number} minimum value\n     * @param [options.maxValue=100] {number} max value\n     * @param [options.decimals=0] {boolean} the decimal precision (use negative to round tens and hundreds)\n     * @param [options.onValueChange=null] {callback} Callback when the value has changed\n     * @param [options.onValueChanging=null] {callback} Callback while the value is changing\n     */\n    constructor(options: ISliderOptions)\n    {\n        super();\n\n        /**\n         * The value expressed as a percentage from min. to max. This will always\n         * be between 0 and 1.\n         *\n         * The actual value is: `this.minValue + this.percentValue * (this.maxValue - this.minValue`).\n         *\n         * @member {number}\n         */\n        this.percentValue = 0;\n        this._disabled = false;\n\n        this.fill = options.fill || null;\n        this.percentValue = this._minValue;\n        this._minValue = options.minValue || 0;\n        this._maxValue = options.maxValue || 100;\n        this.decimals = options.decimals || 0;\n        this.orientation = options.orientation || Slider.HORIZONTAL;\n        this.onValueChange = options.onValueChange || null;\n        this.onValueChanging = options.onValueChanging || null;\n        this.value = options.value || 50;\n\n        // set options\n        this.track = Widget.fromContent(options.track\n            || (this.orientation === Slider.HORIZONTAL\n                ? Slider.DEFAULT_HORIZONTAL_TRACK.clone()\n                : Slider.DEFAULT_VERTICAL_TRACK.clone()));\n        this.handle = Widget.fromContent(options.handle || Slider.DEFAULT_HANDLE.clone());\n\n        this.addChild(this.track, this.handle);// initialize(), update() usage\n\n        this._localCursor = new PIXI.Point();\n        this.handle.contentContainer.buttonMode = true;\n    }\n\n    initialize(): void\n    {\n        super.initialize();\n\n        let startValue = 0;\n        let trackSize;\n\n        const triggerValueChange = (): void =>\n        {\n            this.emit('change', this.value);\n\n            if (this._lastChange != this.value)\n            {\n                this._lastChange = this.value;\n\n                if (typeof this.onValueChange === 'function')\n                {\n                    this.onValueChange(this.value);\n                }\n            }\n        };\n\n        const triggerValueChanging = (): void =>\n        {\n            this.emit('changing', this.value);\n\n            if (this._lastChanging != this.value)\n            {\n                this._lastChanging = this.value;\n\n                if (typeof this.onValueChanging === 'function')\n                {\n                    this.onValueChanging(this.value);\n                }\n            }\n        };\n\n        const updatePositionToMouse = (mousePosition, soft): void =>\n        {\n            this.percentValue = this.getValueAtPhysicalPosition(mousePosition);\n            this.layoutHandle();\n            triggerValueChanging();\n        };\n\n        // Handles dragging\n        const handleDrag: DragManager = this.handle.eventBroker.dnd as DragManager;\n\n        handleDrag.onPress = (event: PIXI.interaction.InteractionEvent): void =>\n        {\n            event.stopPropagation();\n        };\n\n        handleDrag.onDragStart = (): void =>\n        {\n            startValue = this.percentValue;\n            trackSize = this.orientation === Slider.HORIZONTAL\n                ? this.track.width\n                : this.track.height;\n        };\n\n        handleDrag.onDragMove = (event, offset: PIXI.Point): void =>\n        {\n            this.percentValue = Math.max(0, Math.min(\n                1,\n                startValue + ((this.orientation === Slider.HORIZONTAL ? offset.x : offset.y) / trackSize\n                )));\n\n            triggerValueChanging();\n            this.layoutHandle();\n        };\n\n        handleDrag.onDragEnd = (): void =>\n        {\n            triggerValueChange();\n            this.layoutHandle();\n        };\n\n        // Bar pressing/dragging\n        const trackDrag: DragManager = this.track.eventBroker.dnd as DragManager;\n\n        trackDrag.onPress = (event, isPressed): void =>\n        {\n            if (isPressed)\n            {\n                updatePositionToMouse(event.data.global, true);\n            }\n\n            event.stopPropagation();\n        };\n\n        trackDrag.onDragMove = (event: PIXI.interaction.InteractionEvent): void =>\n        {\n            updatePositionToMouse(event.data.global, false);\n        };\n\n        trackDrag.onDragEnd = (): void =>\n        {\n            triggerValueChange();\n        };\n\n        this.layoutHandle();\n    }\n\n    get value(): number\n    {\n        return Helpers.Round(Helpers.Lerp(this._minValue, this._maxValue, this.percentValue), this.decimals);\n    }\n    set value(val: number)\n    {\n        if (val === this.value)\n        {\n            return;\n        }\n        if (isNaN(val))\n        {\n            throw new Error('Cannot use NaN as a value');\n        }\n\n        this.percentValue = (Math.max(this._minValue, Math.min(this._maxValue, val)) - this._minValue) / (this._maxValue - this._minValue);\n\n        if (typeof this.onValueChange === 'function')\n        {\n            this.onValueChange(this.value);\n        }\n        if (typeof this.onValueChanging === 'function')\n        {\n            this.onValueChanging(this.value);\n        }\n\n        if (this.handle && this.initialized)\n        {\n            this.layoutHandle();\n        }\n    }\n\n    get minValue(): number\n    {\n        return this._minValue;\n    }\n    set minValue(val: number)\n    {\n        this._minValue = val;\n        this.update();\n    }\n\n    get maxValue(): number\n    {\n        return this._maxValue;\n    }\n    set maxValue(val: number)\n    {\n        this._maxValue = val;\n        this.update();\n    }\n\n    get disabled(): boolean\n    {\n        return this._disabled;\n    }\n    set disabled(val: boolean)\n    {\n        if (val !== this._disabled)\n        {\n            this._disabled = val;\n            this.handle.contentContainer.buttonMode = !val;\n            this.handle.contentContainer.interactive = !val;\n            this.track.contentContainer.interactive = !val;\n        }\n    }\n\n    /**\n     * @protected\n     * @returns the amount of the freedom that handle has in physical units, i.e. pixels. This\n     *      is the width of the track minus the handle's size.\n     */\n    protected getPhysicalRange(): number\n    {\n        return this.orientation === Slider.HORIZONTAL\n            ? this.contentWidth - this.handle.getMeasuredWidth()\n            : this.contentHeight - this.handle.getMeasuredHeight();\n    }\n\n    /**\n     * @protected\n     * @param {PIXI.Point} cursor\n     * @returns the value of the slider if the handle's center were (globally)\n     *      positioned at the given point.\n     */\n    protected getValueAtPhysicalPosition(cursor: PIXI.Point): number\n    {\n        // Transform position\n        const localCursor = this.contentContainer.toLocal(cursor, null, this._localCursor, true);\n\n        let offset: number;\n        let range: number;\n\n        if (this.orientation === Slider.HORIZONTAL)\n        {\n            const handleWidth = this.handle.getMeasuredWidth();\n\n            offset = localCursor.x - this.paddingLeft - (handleWidth / 4);\n            range = this.contentWidth - handleWidth;\n        }\n        else\n        {\n            const handleHeight = this.handle.getMeasuredHeight();\n\n            offset = localCursor.y - this.paddingTop - (handleHeight / 4);\n            range = this.contentHeight - handleHeight;\n        }\n\n        return offset / range;\n    }\n\n    /**\n     * Re-positions the handle. This should be called after `_value` has been changed.\n     */\n    protected layoutHandle(): void\n    {\n        const handle = this.handle;\n\n        const handleWidth = handle.getMeasuredWidth();\n        const handleHeight = handle.getMeasuredHeight();\n        let width = this.width - this.paddingHorizontal;\n        let height = this.height - this.paddingVertical;\n\n        let handleX: number;\n        let handleY: number;\n\n        if (this.orientation === Slider.HORIZONTAL)\n        {\n            width -= handleWidth;\n\n            handleY = (height - handleHeight) / 2;\n            handleX = (width * this.percentValue);\n        }\n        else\n        {\n            height -= handleHeight;\n\n            handleX = (width - handleWidth) / 2;\n            handleY = (height * this.percentValue);\n        }\n\n        handle.layout(handleX, handleY, handleX + handleWidth, handleY + handleHeight);\n    }\n\n    /**\n     * Slider measures itself using the track's natural dimensions in its non-oriented\n     * direction. The oriented direction will be the equal the range's size times\n     * the track's resolution.\n     *\n     * @param width\n     * @param height\n     * @param widthMode\n     * @param heightMode\n     */\n    onMeasure(width: number, height: number, widthMode: number, heightMode: number): void\n    {\n        const naturalWidth = ((this.orientation === Slider.HORIZONTAL)\n            ? this._maxValue - this._minValue\n            : Math.max(this.handle.contentContainer.width, this.track.contentContainer.width))\n                + this.paddingHorizontal;\n        const naturalHeight = ((this.orientation === Slider.VERTICAL)\n            ? this._maxValue - this._minValue\n            : Math.max(this.handle.contentContainer.height, this.track.contentContainer.height))\n                + this.paddingVertical;\n\n        switch (widthMode)\n        {\n            case MeasureMode.EXACTLY:\n                this._measuredWidth = width;\n                break;\n            case MeasureMode.UNBOUNDED:\n                this._measuredWidth = naturalWidth;\n                break;\n            case MeasureMode.AT_MOST:\n                this._measuredWidth = Math.min(width, naturalWidth);\n                break;\n        }\n\n        switch (heightMode)\n        {\n            case MeasureMode.EXACTLY:\n                this._measuredHeight = height;\n                break;\n            case MeasureMode.UNBOUNDED:\n                this._measuredHeight = naturalHeight;\n                break;\n            case MeasureMode.AT_MOST:\n                this._measuredHeight = Math.min(height, naturalHeight);\n                break;\n        }\n    }\n\n    /**\n     * `Slider` lays the track to fill all of its width and height. The handle is aligned\n     * in the middle in the non-oriented direction.\n     *\n     * @param l\n     * @param t\n     * @param r\n     * @param b\n     * @param dirty\n     * @override\n     */\n    onLayout(l: number, t: number, r: number, b: number, dirty: boolean): void\n    {\n        super.onLayout(l, t, r, b, dirty);\n        const { handle, track } = this;\n\n        track.layout(0, 0, this.width - this.paddingHorizontal, this.height - this.paddingVertical);\n\n        // Layout doesn't scale the widget\n        // TODO: Create a Track widget, this won't work for custom tracks that don't wanna\n        // scale (and it looks ugly.)\n        track.insetContainer.width = track.width;\n        track.insetContainer.height = track.height;\n\n        handle.measure(this.width, this.height, MeasureMode.AT_MOST, MeasureMode.AT_MOST);\n\n        this.layoutHandle();\n    }\n\n    /**\n     * The default track for horizontally oriented sliders.\n     * @static\n     */\n    static DEFAULT_HORIZONTAL_TRACK: PIXI.Graphics = new PIXI.Graphics()\n        .beginFill(0xffffff, 1)\n        .drawRect(0, 0, 16, 16) // natural width & height = 16\n        .endFill()\n        .lineStyle(1, 0x000000, 0.7, 1, true) // draw line in middle\n        .moveTo(1, 8)\n        .lineTo(15, 8);\n\n    /**\n     * The default track for vertically oriented sliders.\n     * @static\n     */\n    static DEFAULT_VERTICAL_TRACK: PIXI.Graphics = new PIXI.Graphics()\n        .beginFill(0xffffff, 1)\n        .drawRect(0, 0, 16, 16) // natural width & height = 16\n        .endFill()\n        .lineStyle(1, 0x000000, 0.7, 1, true) // draw line in middle\n        .moveTo(8, 1)\n        .lineTo(8, 15);\n\n    /**\n     * @static\n     */\n    static DEFAULT_HANDLE: PIXI.Graphics = new PIXI.Graphics()\n        .beginFill(0x000000)\n        .drawCircle(16, 16, 8)\n        .endFill()\n        .beginFill(0x000000, 0.5)\n        .drawCircle(16, 16, 16)\n        .endFill();\n    /**\n     * Horizontal orientation\n     * @static\n     */\n    static HORIZONTAL = 0xff5;\n\n    /**\n     * Vertical orientation\n     * @static\n     */\n    static VERTICAL = 0xffe;\n}\n","﻿import { Helpers } from './Helpers';\nconst _tweenItemCache = [];\nconst _callbackItemCache = [];\nconst _tweenObjects = {};\nconst _activeTweenObjects = {};\nlet _currentId = 1;\n\nclass TweenObject<T>\n{\n    public object: T;\n    public tweens: Record<string, T>;\n    public active: boolean;\n    public onUpdate: () => void;\n\n    constructor(object: T)\n    {\n        this.object = object;\n        this.tweens = {};\n        this.active = false;\n        this.onUpdate = null;\n    }\n}\n\nclass CallbackItem\n{\n    key: string;\n    obj: any;\n    parent: any;\n    time: number;\n    callback: Function;\n    currentTime: number;\n\n    private _ready: boolean;\n\n    constructor()\n    {\n        this._ready = false;\n        this.obj = null;\n        this.parent = null;\n        this.key = '';\n        this.time = 0;\n        this.callback = null;\n        this.currentTime = 0;\n    }\n\n    remove(): void\n    {\n        this._ready = true;\n        delete this.parent.tweens[this.key];\n        if (!Object.keys(this.parent.tweens).length)\n        {\n            this.parent.active = false;\n            this.parent.onUpdate = null;\n            delete _activeTweenObjects[this.obj._tweenObjectId];\n        }\n    }\n\n    set(obj, callback, time): void\n    {\n        this.obj = obj.object;\n\n        if (!this.obj._currentCallbackID)\n        { this.obj._currentCallbackID = 1; }\n        else\n        { this.obj._currentCallbackID++; }\n\n        this.time = time;\n        this.parent = obj;\n        this.callback = callback;\n        this._ready = false;\n        this.key = `cb_${this.obj._currentCallbackID}`;\n        this.currentTime = 0;\n        if (!this.parent.active)\n        {\n            this.parent.active = true;\n            _activeTweenObjects[this.obj._tweenObjectId] = this.parent;\n        }\n    }\n\n    update(delta: number): void\n    {\n        this.currentTime += delta;\n        if (this.currentTime >= this.time)\n        {\n            this.remove();\n            this.callback.call(this.parent);\n        }\n    }\n}\n\nclass TweenItem\n{\n    key: string;\n    parent: any;\n    obj: any;\n\n    from: any;\n    to: any;\n    time: number;\n    ease: any;\n    currentTime: number;\n    t: number;\n    isColor: boolean;\n    currentColor: any;\n    surfix: any;\n\n    _ready: boolean;\n\n    constructor()\n    {\n        this._ready = false;\n        this.parent = null;\n        this.obj = null;\n        this.key = '';\n        this.from = 0;\n        this.to = 0;\n        this.time = 0;\n        this.ease = 0;\n        this.currentTime = 0;\n        this.t = 0;\n        this.isColor = false;\n    }\n\n    remove(): void\n    {\n        this._ready = true;\n        delete this.parent.tweens[this.key];\n        if (!Object.keys(this.parent.tweens).length)\n        {\n            this.parent.active = false;\n            delete _activeTweenObjects[this.obj._tweenObjectId];\n        }\n    }\n\n    set(obj: any, key: string, from: any, to: any, time: number, ease: any): void\n    {\n        this.isColor = isNaN(from) && from[0] === '#' || isNaN(to) && to[0] === '#';\n        this.parent = obj;\n        this.obj = obj.object;\n        this.key = key;\n        this.surfix = getSurfix(to);\n\n        if (this.isColor)\n        {\n            this.to = Helpers.hexToRgb(to);\n            this.from = Helpers.hexToRgb(from);\n            this.currentColor = { r: this.from.r, g: this.from.g, b: this.from.b };\n        }\n        else\n        {\n            this.to = getToValue(to);\n            this.from = getFromValue(from, to, this.obj, key);\n        }\n\n        this.time = time;\n        this.currentTime = 0;\n        this.ease = ease;\n        this._ready = false;\n\n        if (!this.parent.active)\n        {\n            this.parent.active = true;\n            _activeTweenObjects[this.obj._tweenObjectId] = this.parent;\n        }\n    }\n\n    update(delta: number): void\n    {\n        this.currentTime += delta;\n        this.t = Math.min(this.currentTime, this.time) / this.time;\n        if (this.ease)\n        { this.t = this.ease.getPosition(this.t); }\n\n        if (this.isColor)\n        {\n            this.currentColor.r = Math.round(Helpers.Lerp(this.from.r, this.to.r, this.t));\n            this.currentColor.g = Math.round(Helpers.Lerp(this.from.g, this.to.g, this.t));\n            this.currentColor.b = Math.round(Helpers.Lerp(this.from.b, this.to.b, this.t));\n            this.obj[this.key] = Helpers.rgbToNumber(this.currentColor.r, this.currentColor.g, this.currentColor.b);\n        }\n        else\n        {\n            const val = Helpers.Lerp(this.from, this.to, this.t);\n\n            this.obj[this.key] = this.surfix ? val + this.surfix : val;\n        }\n\n        if (this.currentTime >= this.time)\n        {\n            this.remove();\n        }\n    }\n}\n\nconst widthKeys = ['width', 'minWidth', 'maxWidth', 'anchorLeft', 'anchorRight', 'left', 'right', 'x'];\nconst heightKeys = ['height', 'minHeight', 'maxHeight', 'anchorTop', 'anchorBottom', 'top', 'bottom', 'y'];\n\nfunction getFromValue(from, to, obj, key): number\n{\n    // both number\n    if (!isNaN(from) && !isNaN(to))\n    { return from; }\n\n    // both percentage\n    if (isNaN(from) && isNaN(to) && from.indexOf('%') !== -1 && to.indexOf('%') !== -1)\n    { return parseFloat(from.replace('%', '')); }\n\n    // convert from to px\n    if (isNaN(from) && !isNaN(to) && from.indexOf('%') !== -1)\n    {\n        if (widthKeys.indexOf(key) !== -1)\n        { return obj.parent._width * (parseFloat(from.replace('%', '')) * 0.01); }\n        else if (heightKeys.indexOf(key) !== -1)\n        { return obj.parent._height * (parseFloat(from.replace('%', '')) * 0.01); }\n\n        return 0;\n    }\n\n    // convert from to percentage\n    if (!isNaN(from) && isNaN(to) && to.indexOf('%') !== -1)\n    {\n        if (widthKeys.indexOf(key) !== -1)\n        { return from / obj.parent._width * 100; }\n        else if (heightKeys.indexOf(key) !== -1)\n        { return from / obj.parent._height * 100; }\n\n        return 0;\n    }\n\n    return 0;\n}\n\nfunction getSurfix(to: number | string): any\n{\n    if (isNaN(to) && to.indexOf('%') !== -1)\n    { return '%'; }\n}\n\nfunction getToValue(to: number | string): any\n{\n    if (!isNaN(to))\n    { return to; }\n    if (isNaN(to) && to.indexOf('%') !== -1)\n    { return parseFloat(to.replace('%', '')); }\n}\n\nfunction getObject(obj: any): any\n{\n    if (!obj._tweenObjectId)\n    {\n        obj._tweenObjectId = _currentId;\n        _currentId++;\n    }\n    let object = _tweenObjects[obj._tweenObjectId];\n\n    if (!object)\n    {\n        object = _tweenObjects[obj._tweenObjectId] = new TweenObject(obj);\n    }\n\n    return object;\n}\n\nfunction getTweenItem(): TweenItem\n{\n    for (let i = 0; i < _tweenItemCache.length; i++)\n    {\n        if (_tweenItemCache[i]._ready)\n        { return _tweenItemCache[i]; }\n    }\n\n    const tween = new TweenItem();\n\n    _tweenItemCache.push(tween);\n\n    return tween;\n}\n\nfunction getCallbackItem(): CallbackItem\n{\n    for (let i = 0; i < _callbackItemCache.length; i++)\n    {\n        if (_callbackItemCache[i]._ready)\n        { return _callbackItemCache[i]; }\n    }\n\n    const cb = new CallbackItem();\n\n    _callbackItemCache.push(cb);\n\n    return cb;\n}\n\nexport const Tween = {\n    to(obj, time, params, ease?)\n    {\n        const object = getObject(obj);\n        let onUpdate = null;\n\n        for (const key in params)\n        {\n            if (key === 'onComplete')\n            {\n                const cb = getCallbackItem();\n\n                cb.set(object, params[key], time);\n                object.tweens[cb.key] = cb;\n                continue;\n            }\n\n            if (key === 'onUpdate')\n            {\n                onUpdate = params[key];\n                continue;\n            }\n\n            if (time)\n            {\n                const match = params[key] === obj[key];\n\n                if (typeof obj[key] === 'undefined') continue;\n\n                if (match)\n                {\n                    if (object.tweens[key]) object.tweens[key].remove();\n                }\n                else\n                {\n                    if (!object.tweens[key])\n                    { object.tweens[key] = getTweenItem(); }\n                    object.tweens[key].set(object, key, obj[key], params[key], time, ease);\n                }\n            }\n        }\n\n        if (time)\n        { object.onUpdate = onUpdate; }\n        else this.set(obj, params);\n    },\n    from(obj, time, params, ease)\n    {\n        const object = getObject(obj);\n        let onUpdate = null;\n\n        for (const key in params)\n        {\n            if (key === 'onComplete')\n            {\n                const cb = getCallbackItem();\n\n                cb.set(object, params[key], time);\n                object.tweens[cb.key] = cb;\n                continue;\n            }\n\n            if (key === 'onUpdate')\n            {\n                onUpdate = params[key];\n                continue;\n            }\n\n            if (time)\n            {\n                const match = params[key] == obj[key];\n\n                if (typeof obj[key] === 'undefined') continue;\n\n                if (match)\n                {\n                    if (object.tweens[key]) object.tweens[key].remove();\n                }\n                else\n                {\n                    if (!object.tweens[key])\n                    { object.tweens[key] = getTweenItem(); }\n                    object.tweens[key].set(object, key, params[key], obj[key], time, ease);\n                }\n            }\n        }\n\n        if (time)\n        { object.onUpdate = onUpdate; }\n        else this.set(obj, params);\n    },\n    fromTo(obj, time, paramsFrom, paramsTo, ease)\n    {\n        const object = getObject(obj);\n        let onUpdate = null;\n\n        for (const key in paramsTo)\n        {\n            if (key === 'onComplete')\n            {\n                const cb = getCallbackItem();\n\n                cb.set(object, paramsTo[key], time);\n                object.tweens[cb.key] = cb;\n                continue;\n            }\n\n            if (key === 'onUpdate')\n            {\n                onUpdate = paramsTo[key];\n                continue;\n            }\n\n            if (time)\n            {\n                const match = paramsFrom[key] == paramsTo[key];\n\n                if (typeof obj[key] === 'undefined' || typeof paramsFrom[key] === 'undefined') continue;\n\n                if (match)\n                {\n                    if (object.tweens[key]) object.tweens[key].remove();\n                    obj[key] = paramsTo[key];\n                }\n                else\n                {\n                    if (!object.tweens[key])\n                    {\n                        object.tweens[key] = getTweenItem();\n                    }\n                    object.tweens[key].set(object, key, paramsFrom[key], paramsTo[key], time, ease);\n                }\n            }\n        }\n\n        if (time)\n        { object.onUpdate = onUpdate; }\n        else this.set(obj, paramsTo);\n    },\n    set(obj, params)\n    {\n        const object = getObject(obj);\n\n        for (const key in params)\n        {\n            if (typeof obj[key] === 'undefined') continue;\n            if (object.tweens[key]) object.tweens[key].remove();\n            obj[key] = params[key];\n        }\n    },\n    _update(delta)\n    {\n        for (const id in _activeTweenObjects)\n        {\n            const object = _activeTweenObjects[id];\n\n            for (const key in object.tweens)\n            {\n                object.tweens[key].update(delta);\n            }\n            if (object.onUpdate)\n            {\n                object.onUpdate.call(object.object, delta);\n            }\n        }\n    },\n};\n","import { Slider, ISliderOptions } from './Slider';\nimport { Tween } from './Tween';\nimport { Sprite } from './Sprite';\nimport { ScrollWidget } from './ScrollWidget';\nimport * as PIXI from 'pixi.js';\n\ninterface IScrollBarOptions extends ISliderOptions\n{\n    track?: Sprite;\n    handle?: Sprite;\n    scrollingContainer: ScrollWidget;\n    orientation: number;\n    autohide?: boolean;\n}\n\n/**\n * @memberof PUXI\n * @interface IScrollBarOptions\n * @property {PUXI.Sprite} track\n * @property {PUXI.Sprite} handle\n */\n\n/**\n * An UI scrollbar to control a ScrollingContainer\n *\n * @class\n * @extends PUXI.Slider\n * @memberof PUXI\n * @param options {Object} ScrollBar settings\n * @param options.track {(PIXI.UI.SliceSprite|PIXI.UI.Sprite)}  Any type of UIOBject, will be used for the scrollbar track\n * @param options.handle {(PIXI.UI.SliceSprite|PIXI.UI.Sprite)} will be used as scrollbar handle\n * @param options.scrollingContainer {PIXI.UI.ScrollingContainer} The container to control\n * @param [options.vertical=false] {boolean} Direction of the scrollbar\n * @param [options.autohide=false] {boolean} Hides the scrollbar when not needed\n */\nexport class ScrollBar extends Slider\n{\n    scrollingContainer: ScrollWidget;\n    autohide: boolean;\n    _hidden: boolean;\n\n    constructor(options: IScrollBarOptions)\n    {\n        super({\n            track: options.track || ScrollBar.DEFAULT_TRACK.clone(),\n            handle: options.handle || ScrollBar.DEFAULT_HANDLE.clone(),\n            fill: null,\n            orientation: options.orientation,\n            minValue: 0,\n            maxValue: 1,\n        });\n\n        this.scrollingContainer = options.scrollingContainer;\n        this.autohide = options.autohide;\n        this._hidden = false;\n    }\n\n    initialize(): void\n    {\n        super.initialize();\n        this.decimals = 3; // up decimals to trigger ValueChanging more often\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this.on('changing', (): void =>\n        {\n            this.scrollingContainer.forcePctPosition(\n                this.orientation === Slider.HORIZONTAL ? 'x' : 'y',\n                this.percentValue);\n        });\n\n        this.on('change', (): void =>\n        {\n            this.scrollingContainer.setScrollPosition();\n        });\n    }\n\n    toggleHidden(hidden: boolean): void\n    {\n        if (this.autohide)\n        {\n            if (hidden && !this._hidden)\n            {\n                Tween.to(this, 0.2, { alpha: 0 });\n                this._hidden = true;\n            }\n            else if (!hidden && this._hidden)\n            {\n                Tween.to(this, 0.2, { alpha: 1 });\n                this._hidden = false;\n            }\n        }\n    }\n\n    /**\n     * @static\n     */\n    static DEFAULT_TRACK = new PIXI.Graphics()\n        .beginFill(0xffffff)\n        .drawRect(0, 0, 8, 8)\n        .endFill();\n\n    /**\n     * @static\n     */\n    static DEFAULT_HANDLE: PIXI.Graphics = new PIXI.Graphics()\n        .beginFill(0x000000)\n        .drawCircle(8, 8, 4)\n        .endFill()\n        .beginFill(0x000000, 0.5)\n        .drawCircle(8, 8, 8)\n        .endFill();\n}\n\n","import { InteractiveGroup } from './InteractiveGroup';\nimport { Helpers }  from './Helpers';\nimport { DragManager } from './event/DragManager';\nimport { ScrollManager } from './event/ScrollManager';\nimport * as PIXI from 'pixi.js';\nimport { Widget } from './Widget';\nimport { WidgetGroup } from './WidgetGroup';\nimport { BorderLayout } from './layout-manager';\nimport { ScrollBar } from './ScrollBar';\nimport { ALIGN, BorderLayoutOptions, LayoutOptions } from './layout-options';\nimport { Slider } from './Slider';\n\n/**\n * @namespace PUXI\n * @interface\n */\ninterface IScrollingContainerOptions\n{\n    scrollX?: boolean;\n    scrollY?: boolean;\n    dragScrolling?: boolean;\n    softness?: number;\n    radius?: number;\n    expandMask?: number;\n    overflowY?: number;\n    overflowX?: number;\n    scrollBars?: boolean;\n}\n\n/**\n * `ScrollWidget` masks its contents to its layout bounds and translates\n * its children when scrolling. It uses the anchor layout.\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.InteractiveGroup\n */\nexport class ScrollWidget extends InteractiveGroup\n{\n    private mask: PIXI.Graphics;\n    public readonly innerContainer: WidgetGroup;\n    private innerBounds: PIXI.Rectangle;\n\n    scrollX: boolean;\n    scrollY: boolean;\n    dragScrolling: boolean;\n    softness: number;\n    radius: number;\n    expandMask: number;\n    overflowY: number;\n    overflowX: number;\n\n    animating: boolean;\n    scrolling: boolean;\n\n    protected scrollBars: ScrollBar[];\n    protected scrollPosition: PIXI.Point;\n    protected scrollVelocity: PIXI.Point;\n    protected targetPosition: PIXI.Point;\n    protected lastPosition: PIXI.Point;\n    protected stop: boolean;\n\n    private boundCached: number;\n    private lastWidth: number;\n    private lastHeight: number;\n\n    /**\n     * @param {PUXI.IScrollingContainerOptions} options\n     * @param [options.scrollX=false] {Boolean} Enable horizontal scrolling\n     * @param [options.scrollY=false] {Boolean} Enable vertical scrolling\n     * @param [options.dragScrolling=true] {Boolean} Enable mousedrag scrolling\n     * @param [options.softness=0.5] {Number} (0-1) softness of scrolling\n     * @param [options.width=0] {Number|String} container width\n     * @param [options.height=0] {Number} container height\n     * @param [options.radius=0] {Number} corner radius of clipping mask\n     * @param [options.expandMask=0] {Number} mask expand (px)\n     * @param [options.overflowY=0] {Number} how much can be scrolled past content dimensions\n     * @param [options.overflowX=0] {Number} how much can be scrolled past content dimensions\n     */\n    constructor(options: IScrollingContainerOptions = {})\n    {\n        super();\n\n        this.mask = new PIXI.Graphics();\n        this.innerContainer = new InteractiveGroup();\n        this.innerBounds = new PIXI.Rectangle();\n        super.addChild(this.innerContainer);\n        this.contentContainer.addChild(this.mask);\n        this.contentContainer.mask = this.mask;\n\n        this.scrollX = options.scrollX !== undefined ? options.scrollX : false;\n        this.scrollY = options.scrollY !== undefined ? options.scrollY : false;\n        this.dragScrolling = options.dragScrolling !== undefined ? options.dragScrolling : true;\n        this.softness = options.softness !== undefined ? Math.max(Math.min(options.softness || 0, 1), 0) : 0.5;\n        this.radius = options.radius || 0;\n        this.expandMask = options.expandMask || 0;\n        this.overflowY = options.overflowY || 0;\n        this.overflowX = options.overflowX || 0;\n\n        this.scrollVelocity = new PIXI.Point();\n\n        /**\n         * Widget's position in a scroll.\n         * @member {PIXI.Point}\n         * @private\n         */\n        this.scrollPosition = new PIXI.Point();\n\n        /**\n         * Position that the cursor is at, i.e. our scroll \"target\".\n         * @member {PIXI.Point}\n         * @private\n         */\n        this.targetPosition = new PIXI.Point();\n        this.lastPosition = new PIXI.Point();\n\n        this.useLayout(new BorderLayout());\n\n        this.animating = false;\n        this.scrolling = false;\n        this.scrollBars = [];\n\n        if (options.scrollBars && this.scrollX)\n        {\n            const horizontalScrollBar: ScrollBar = new ScrollBar({\n                orientation: ScrollBar.HORIZONTAL,\n                scrollingContainer: this,\n                minValue: 0,\n                maxValue: 1,\n            })\n                .setLayoutOptions(\n                    new BorderLayoutOptions({\n                        width: LayoutOptions.FILL_PARENT,\n                        height: LayoutOptions.WRAP_CONTENT,\n                        region: BorderLayoutOptions.REGION_BOTTOM,\n                        horizontalAlign: ALIGN.CENTER,\n                        verticalAlign: ALIGN.BOTTOM,\n                    }),\n                )\n                .setBackground(0xff)\n                .setBackgroundAlpha(0.8) as ScrollBar;\n\n            super.addChild(horizontalScrollBar);\n            this.scrollBars.push(horizontalScrollBar);\n        }\n        if (options.scrollBars && this.scrollY)\n        {\n            const verticalScrollBar: ScrollBar = new ScrollBar({\n                orientation: ScrollBar.VERTICAL,\n                scrollingContainer: this,\n                minValue: 0,\n                maxValue: 1,\n            })\n                .setLayoutOptions(\n                    new BorderLayoutOptions({\n                        width: LayoutOptions.WRAP_CONTENT,\n                        height: LayoutOptions.FILL_PARENT,\n                        region: BorderLayoutOptions.REGION_RIGHT,\n                        horizontalAlign: ALIGN.RIGHT,\n                        verticalAlign: ALIGN.CENTER,\n                    }),\n                )\n                .setBackground(0xff)\n                .setBackgroundAlpha(0.8) as ScrollBar;\n\n            super.addChild(verticalScrollBar);\n            this.scrollBars.push(verticalScrollBar);\n        }\n\n        this.boundCached = 0;\n    }\n\n    /**\n     * Updates the mask and scroll position before rendering.\n     *\n     * @override\n     */\n    update(): void\n    {\n        super.update();\n\n        if (this.lastWidth !== this.width || this.lastHeight !== this.height)\n        {\n            const of = this.expandMask;\n\n            this.mask.clear();\n            this.mask.lineStyle(0);\n            this.mask.beginFill(0xFFFFFF, 1);\n\n            if (this.radius === 0)\n            {\n                this.mask.drawRect(-of, -of, this.width + of, this.height + of);\n            }\n            else\n            {\n                this.mask.drawRoundedRect(-of, -of, this.width + of, this.height + of, this.radius);\n            }\n\n            this.mask.endFill();\n\n            this.lastWidth = this.width;\n            this.lastHeight = this.height;\n        }\n    }\n\n    /**\n     * Adds this scrollbar. It is expected that the given scrollbar has been\n     * given proper border-layout options.\n     *\n     * @todo This only works for TOP, LEFT scrollbars as BOTTOM, RIGHT are occupied.\n     * @param {PUXI.ScrollBar} scrollBar\n     */\n    addScrollBar(scrollBar: ScrollBar): ScrollWidget\n    {\n        super.addChild(scrollBar);\n        this.scrollBars.push(scrollBar);\n\n        return this;\n    }\n\n    /**\n     * @param {PUXI.Widget[]} newChildren\n     * @returns {ScrollWidget} this widget\n     */\n    addChild(...newChildren: Widget[]): Widget\n    {\n        for (let i = 0; i < newChildren.length; i++)\n        {\n            this.innerContainer.addChild(newChildren[i]);\n        }\n\n        this.getInnerBounds(true); // make sure bounds is updated instantly when a child is added\n\n        return this;\n    }\n\n    /**\n     * Updates the scroll bar values, and should be called when scrolled.\n     */\n    updateScrollBars(): void\n    {\n        for (let i = 0, j = this.scrollBars.length; i < j; i++)\n        {\n            const scrollBar = this.scrollBars[i];\n\n            if (scrollBar.orientation === Slider.HORIZONTAL)\n            {\n                const x = this.getPercentPosition('x');\n\n                scrollBar.value = x;\n            }\n            else if (scrollBar.orientation === Slider.VERTICAL)\n            {\n                const y = this.getPercentPosition('y');\n\n                scrollBar.value = y;\n            }\n        }\n    }\n\n    getInnerBounds(force?: boolean): PIXI.Rectangle\n    {\n        // this is a temporary fix, because we cant rely on innercontainer height if the children is positioned > 0 y.\n        if (force || performance.now() - this.boundCached > 1000)\n        {\n            this.innerContainer.insetContainer.getLocalBounds(this.innerBounds);\n\n            this.innerBounds.height = this.innerBounds.y + this.innerContainer.height || 0;\n            this.innerBounds.width = this.innerBounds.x + this.innerContainer.width || 0;\n            this.boundCached = performance.now();\n        }\n\n        return this.innerBounds;\n    }\n\n    /**\n     * @override\n     */\n    initialize(): void\n    {\n        super.initialize();\n\n        if (this.scrollX || this.scrollY)\n        {\n            this.initScrolling();\n        }\n    }\n\n    private initScrolling(): void\n    {\n        const container = this.innerContainer.insetContainer;\n        const realPosition = new PIXI.Point();\n        const {\n            scrollPosition,\n            targetPosition,\n        } = this;\n\n        // Drag scroll\n        if (this.dragScrolling)\n        {\n            const drag: DragManager = this.eventBroker.dnd as DragManager;\n\n            drag.onDragStart = (e): void =>\n            {\n                if (!this.scrolling)\n                {\n                    realPosition.copyFrom(container.position);\n                    scrollPosition.copyFrom(container.position);\n                    this.scrolling = true;\n                    this.setScrollPosition();\n\n                    this.emit('scrollstart', e);\n                }\n            };\n\n            drag.onDragMove = (_, offset): void =>\n            {\n                if (this.scrollX)\n                {\n                    targetPosition.x = realPosition.x + offset.x;\n                }\n                if (this.scrollY)\n                {\n                    targetPosition.y = realPosition.y + offset.y;\n                }\n\n                this.setScrollPosition();\n            };\n\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            drag.onDragEnd = (e): void =>\n            {\n                if (this.scrolling)\n                {\n                    this.scrolling = false;\n                    this.emit('scrollend', e);\n                }\n            };\n        }\n\n        // Mouse scroll\n        const scrollSpeed = new PIXI.Point();\n        const scroll = new ScrollManager(this, true);\n\n        scroll.onMouseScroll = (e, delta: PIXI.Point): void =>\n        {\n            scrollSpeed.set(-delta.x * 0.2, -delta.y * 0.2);\n            this.setScrollPosition(scrollSpeed);\n        };\n\n        this.updateScrollBars();\n    }\n\n    /**\n     * @param {string} direction - `'x'` or `'y'`\n     * @returns {number} a value between 0 and 1 indicating how scrolling\n     *      has occured in that direction (called percent position).\n     */\n    getPercentPosition(direction: 'x' | 'y'): number\n    {\n        const bounds = this.getInnerBounds();\n        const container = this.innerContainer.insetContainer;\n\n        if (direction === 'x')\n        {\n            return container.x / (this.width - bounds.width);\n        }\n        else if (direction === 'y')\n        {\n            return container.y / (this.height - bounds.height);\n        }\n\n        return 0;\n    }\n\n    forcePctPosition = (direction: string, pct: number): void =>\n    {\n        const bounds = this.getInnerBounds();\n        const container = this.innerContainer.insetContainer;\n\n        if (this.scrollX && direction === 'x')\n        {\n            container.position[direction] = -((bounds.width - this.width) * pct);\n        }\n        if (this.scrollY && direction === 'y')\n        {\n            container.position[direction] = -((bounds.height - this.height) * pct);\n        }\n\n        this.scrollPosition[direction] = this.targetPosition[direction] = container.position[direction];\n    };\n\n    focusPosition = (pos: PIXI.Point): void =>\n    {\n        const bounds = this.getInnerBounds();\n        const container = this.innerContainer.insetContainer;\n\n        let dif;\n\n        if (this.scrollX)\n        {\n            const x = Math.max(0, (Math.min(bounds.width, pos.x)));\n\n            if (x + container.x > this.width)\n            {\n                dif = x - this.width;\n                container.x = -dif;\n            }\n            else if (x + container.x < 0)\n            {\n                dif = x + container.x;\n                container.x -= dif;\n            }\n        }\n        if (this.scrollY)\n        {\n            const y = Math.max(0, (Math.min(bounds.height, pos.y)));\n\n            if (y + container.y > this.height)\n            {\n                dif = y - this.height;\n                container.y = -dif;\n            }\n            else if (y + container.y < 0)\n            {\n                dif = y + container.y;\n                container.y -= dif;\n            }\n        }\n\n        this.lastPosition.copyFrom(container.position);\n        this.targetPosition.copyFrom(container.position);\n        this.scrollPosition.copyFrom(container.position);\n\n        this.updateScrollBars();\n    };\n\n    /**\n     * @param {PIXI.Point}[velocity]\n     */\n    setScrollPosition = (velocity?: PIXI.Point): void =>\n    {\n        if (velocity)\n        {\n            this.scrollVelocity.copyFrom(velocity);\n        }\n\n        const container = this.innerContainer.insetContainer;\n\n        if (!this.animating)\n        {\n            this.animating = true;\n            this.lastPosition.copyFrom(container.position);\n            this.targetPosition.copyFrom(container.position);\n\n            PIXI.Ticker.shared.add(this.updateScrollPosition);\n        }\n    };\n\n    /**\n     * @param {number} delta\n     * @protected\n     */\n    protected updateScrollPosition = (delta: number): void =>\n    {\n        this.stop = true;\n\n        if (this.scrollX)\n        {\n            this.updateDirection('x', delta);\n        }\n        if (this.scrollY)\n        {\n            this.updateDirection('y', delta);\n        }\n\n        if (this.stop)\n        {\n            PIXI.Ticker.shared.remove(this.updateScrollPosition);\n            this.animating = false;\n        }\n\n        this.updateScrollBars();\n    };\n\n    /**\n     * @param {'x' | 'y'} direction\n     * @param {number} delta\n     * @protected\n     */\n    protected updateDirection = (direction: string, delta: number): void =>\n    {\n        const bounds = this.getInnerBounds();\n        const {\n            scrollPosition,\n            scrollVelocity,\n            targetPosition,\n            lastPosition,\n        } = this;\n        const container = this.innerContainer.insetContainer;\n\n        let min;\n\n        if (direction === 'y')\n        {\n            min = Math.round(Math.min(0, this.height - bounds.height));\n        }\n        else\n        {\n            min = Math.round(Math.min(0, this.width - bounds.width));\n        }\n\n        if (!this.scrolling && Math.round(scrollVelocity[direction]) !== 0)\n        {\n            targetPosition[direction] += scrollVelocity[direction];\n            scrollVelocity[direction] = Helpers.Lerp(\n                scrollVelocity[direction],\n                0,\n                (5 + 2.5 / Math.max(this.softness, 0.01)) * delta);\n\n            if (targetPosition[direction] > 0)\n            {\n                targetPosition[direction] = 0;\n            }\n            else if (targetPosition[direction] < min)\n            {\n                targetPosition[direction] = min;\n            }\n        }\n\n        if (!this.scrolling\n            && Math.round(scrollVelocity[direction]) === 0\n            && (container[direction] > 0\n            || container[direction] < min))\n        {\n            const target = this.scrollPosition[direction] > 0 ? 0 : min;\n\n            scrollPosition[direction] = Helpers.Lerp(\n                scrollPosition[direction],\n                target,\n                (40 - (30 * this.softness)) * delta);\n            this.stop = false;\n        }\n        else if (this.scrolling || Math.round(scrollVelocity[direction]) !== 0)\n        {\n            if (this.scrolling)\n            {\n                scrollVelocity[direction] = this.scrollPosition[direction] - lastPosition[direction];\n                lastPosition.copyFrom(scrollPosition);\n            }\n            if (targetPosition[direction] > 0)\n            {\n                scrollVelocity[direction] = 0;\n                scrollPosition[direction] = 100 * this.softness * (1 - Math.exp(targetPosition[direction] / -200));\n            }\n            else if (targetPosition[direction] < min)\n            {\n                scrollVelocity[direction] = 0;\n                scrollPosition[direction] = min - (100 * this.softness * (1 - Math.exp((min - targetPosition[direction]) / -200)));\n            }\n            else\n            {\n                scrollPosition[direction] = targetPosition[direction];\n            }\n\n            this.stop = false;\n        }\n\n        container.position[direction] = Math.round(scrollPosition[direction]);\n    };\n\n    /**\n     * This is fired when the user starts scrolling.\n     * @event scrollstart\n     */\n\n    /**\n     * This is fired when the user stops scrolling.\n     * @event scrollend\n     */\n}\n","import { Stage } from '../Stage';\nimport { Widget } from '../Widget';\nimport * as PIXI from 'pixi.js';\n\nexport abstract class Controller<T> extends PIXI.utils.EventEmitter\n{\n    stage: Stage;\n\n    constructor(stage: Stage)\n    {\n        super();\n        this.stage = stage;\n    }\n\n    abstract in(widget: T): any;\n\n    abstract out(widget: T): any;\n}\n\n/**\n * A controller handles a stage-level state that can be held by wigets. For example,\n * `PUXI.FocusController` handles which widget is focused.\n *\n * @memberof PUXI\n * @class Controller\n */\n\n/**\n * Enables the widget to enter the controller's state.\n *\n * @memberof PUXI.Controller#\n * @method in\n * @param {PUXI.Widget} widget\n */\n\n/**\n * Disables the widget from the controller's state.\n *\n * @memberof PUXI.Controller#\n * @method out\n * @param {PUXI.Widget} widget\n */\n","import { Widget } from './Widget';\nimport * as PIXI from 'pixi.js';\nimport { MeasureMode } from './IMeasurable';\nimport { LayoutOptions, FastLayoutOptions } from './layout-options';\nimport { FocusController, Controller, CheckBoxGroupController } from './ctl';\n\n/**\n * The stage is the root node in the PUXI scene graph. It does not provide a\n * sophisticated layout model; however, it will accept constraints defined by\n * `PUXI.FastLayoutOptions` or `PUXI.LayoutOptions` in its children.\n *\n * The stage is not a `PUXI.Widget` and its dimensions are always fixed.\n *\n * @memberof PUXI\n * @class\n * @extends PIXI.Container\n */\nexport class Stage extends PIXI.Container\n{\n    __width: number;\n    __height: number;\n    minWidth: number;\n    minHeight: number;\n    initialized: boolean;\n    widgetChildren: Widget[];\n\n    stage: any;\n\n    private _checkBoxGroupCtl: CheckBoxGroupController;\n    private _focusCtl: FocusController;\n\n    protected background: PIXI.Container;\n\n    /**\n     * @param {number} width - width of the stage\n     * @param {number} height - height of the stage\n     */\n    constructor(width: number, height: number)\n    {\n        super();\n\n        this.__width = width;\n        this.__height = height;\n        this.minWidth = 0;\n        this.minHeight = 0;\n\n        this.widgetChildren = [];\n        this.interactive = true;\n        this.stage = this;\n        this.hitArea = new PIXI.Rectangle(0, 0, 0, 0);\n        this.initialized = true;\n        this.resize(width, height);\n\n        this._checkBoxGroupCtl = new Stage.CHECK_BOX_GROUP_CONTROLLER(this);\n        this._focusCtl = new Stage.FOCUS_CONTROLLER(this);\n    }\n\n    public measureAndLayout(): void\n    {\n        if (this.background)\n        {\n            this.background.width = this.width;\n            this.background.height = this.height;\n        }\n\n        for (let i = 0, j = this.widgetChildren.length; i < j; i++)\n        {\n            const widget = this.widgetChildren[i];\n            const lopt = (widget.layoutOptions || LayoutOptions.DEFAULT) as FastLayoutOptions;\n\n            const widthMeasureMode = lopt.width < LayoutOptions.MAX_DIMEN\n                ? MeasureMode.EXACTLY\n                : MeasureMode.AT_MOST;\n            const heightMeasureMode = lopt.height < LayoutOptions.MAX_DIMEN\n                ? MeasureMode.EXACTLY\n                : MeasureMode.AT_MOST;\n            const loptWidth = (Math.abs(lopt.width) < 1) ? lopt.width * this.width : lopt.width;\n            const loptHeight = (Math.abs(lopt.height) < 1) ? lopt.height * this.height : lopt.height;\n\n            widget.measure(\n                widthMeasureMode === MeasureMode.EXACTLY ? loptWidth : this.width,\n                heightMeasureMode === MeasureMode.EXACTLY ? loptHeight : this.height,\n                widthMeasureMode,\n                heightMeasureMode);\n\n            let x = lopt.x ? lopt.x : 0;\n            let y = lopt.y ? lopt.y : 0;\n\n            if (Math.abs(x) < 1)\n            {\n                x *= this.width;\n            }\n            if (Math.abs(y) < 1)\n            {\n                y *= this.height;\n            }\n\n            const anchor = lopt.anchor || FastLayoutOptions.DEFAULT_ANCHOR;\n            const l = x - (anchor.x * widget.getMeasuredWidth());\n            const t = y - (anchor.y * widget.getMeasuredHeight());\n\n            widget.layout(l, t,\n                l + widget.getMeasuredWidth(),\n                t + widget.getMeasuredHeight(),\n                true);\n        }\n    }\n\n    getBackground(): PIXI.Container\n    {\n        return this.background;\n    }\n\n    setBackground(bg: PIXI.Container): void\n    {\n        if (this.background)\n        {\n            super.removeChild(this.background);\n        }\n\n        this.background = bg;\n\n        if (bg)\n        {\n            super.addChildAt(bg, 0);\n\n            this.background.width = this.width;\n            this.background.height = this.height;\n        }\n    }\n\n    private update(widgets: Widget[]): void\n    {\n        this.emit('preupdate', this);\n\n        for (let i = 0, j = widgets.length; i < j; i++)\n        {\n            const widget = widgets[i];\n\n            widget.stage = this;\n\n            if (!widget.initialized)\n            {\n                widget.initialize();\n            }\n\n            this.update(widget.widgetChildren);\n            widget.update();\n        }\n\n        this.emit('postupdate', this);\n    }\n\n    render(renderer: PIXI.Renderer): void\n    {\n        this.update(this.widgetChildren);\n        super.render(renderer);\n    }\n\n    addChild(UIObject: Widget): void\n    {\n        const argumentLenght = arguments.length;\n\n        if (argumentLenght > 1)\n        {\n            for (let i = 0; i < argumentLenght; i++)\n            {\n                this.addChild(arguments[i]);\n            }\n        }\n        else\n        {\n            if (UIObject.parent)\n            {\n                UIObject.parent.removeChild(UIObject);\n            }\n\n            UIObject.parent = this;\n            this.widgetChildren.push(UIObject);\n            super.addChild(UIObject.insetContainer);\n            // UIObject.updatesettings(true);\n        }\n\n        this.measureAndLayout();\n    }\n\n    removeChild(UIObject: Widget): void\n    {\n        const argumentLenght = arguments.length;\n\n        if (argumentLenght > 1)\n        {\n            for (let i = 0; i < argumentLenght; i++)\n            {\n                this.removeChild(arguments[i]);\n            }\n        }\n        else\n        {\n            super.removeChild(UIObject.insetContainer);\n\n            const index = this.widgetChildren.indexOf(UIObject);\n\n            if (index !== -1)\n            {\n                this.children.splice(index, 1);\n                UIObject.parent = null;\n            }\n        }\n\n        this.measureAndLayout();\n    }\n\n    resize(width?: number, height?: number): void\n    {\n        this.width = width;\n        this.height = height;\n\n        if (this.hitArea)\n        {\n            (this.hitArea as PIXI.Rectangle).width = this.__width;\n            (this.hitArea as PIXI.Rectangle).height = this.__height;\n        }\n\n        this.measureAndLayout();\n    }\n\n    get width(): number\n    {\n        return this.__width;\n    }\n    set width(val: number)\n    {\n        if (!isNaN(val))\n        {\n            this.__width = val;\n            this.resize();\n        }\n    }\n\n    get height(): number\n    {\n        return this.__height;\n    }\n    set height(val: number)\n    {\n        if (!isNaN(val))\n        {\n            this.__height = val;\n            this.resize();\n        }\n    }\n\n    /**\n     * The check box group controller for check boxes in this stage.\n     *\n     * @member {PUXI.CheckBoxGroupController}\n     */\n    get checkBoxGroupController(): CheckBoxGroupController\n    {\n        return this._checkBoxGroupCtl;\n    }\n\n    /**\n     * The focus controller for widgets in this stage. You can use this to bring a\n     * widget into focus.\n     *\n     * @member {PUXI.FocusController}\n     */\n    get focusController(): FocusController\n    {\n        return this._focusCtl;\n    }\n\n    /**\n     * Use this to override which class is used for the check box group controller. It\n     * should extend from `PUXI.CheckBoxGroupController`.\n     *\n     * @static\n     */\n    static CHECK_BOX_GROUP_CONTROLLER: typeof CheckBoxGroupController = CheckBoxGroupController;\n\n    /**\n     * Use this to override which class is used for the focus controller. It should\n     * extend from `PUXI.FocusController`.\n     *\n     * @static\n     */\n    static FOCUS_CONTROLLER: typeof FocusController = FocusController;\n}\n","import { Controller } from './Controller';\nimport { CheckBox } from '../CheckBox';\nimport { Stage } from '../Stage';\n\nexport type CheckGroup = string;\n\n/**\n * @memberof PUXI\n * @typedef {string} CheckGroup\n */\n\ninterface CBGroup\n{\n    checks: Array<CheckBox>;\n    selected: CheckBox;\n}\n\n/**\n * Check boxes use this controller to deselect other checkboxes in the group when\n * they are selected.\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.Controller\n */\nexport class CheckBoxGroupController extends Controller<CheckBox>\n{\n    protected checkGroups: Map<CheckGroup, CBGroup>;\n\n    constructor(stage: Stage)\n    {\n        super(stage);\n        this.checkGroups = new Map<CheckGroup, CBGroup>();\n    }\n\n    /**\n     * @param {PUXI.CheckBox} widget\n     * @param {PUXI.CheckGroup} checkGroup\n     * @override\n     */\n    in(widget: CheckBox, checkGroup?: CheckGroup): void\n    {\n        if (!checkGroup)\n        {\n            throw new Error('Default check groups don\\'t exist!');\n        }\n\n        const group = this.checkGroups.get(checkGroup) || this.initGroup(checkGroup);\n\n        group.checks.push(widget);\n        widget.checkGroup = checkGroup;\n    }\n\n    /**\n     * @override\n     */\n    out(widget: CheckBox): void\n    {\n        const group = this.checkGroups.get(widget.checkGroup);\n        const i = group.checks.indexOf(widget);\n\n        if (i > 0)\n        {\n            group.checks.splice(i, 1);\n        }\n\n        widget.checkGroup = null;\n    }\n\n    /**\n     * Called when a checkbox is selected. Do not call from outside.\n     *\n     * @param {CheckBox} widget\n     */\n    notifyCheck(widget: CheckBox): void\n    {\n        const group = this.checkGroups.get(widget.checkGroup);\n\n        if (!group)\n        {\n            return;\n        }\n\n        const { checks } = group;\n\n        for (let i = 0, j = checks.length; i < j; i++)\n        {\n            if (checks[i] !== widget)\n            {\n                checks[i].checked = false;\n            }\n        }\n\n        group.selected = widget;\n    }\n\n    /**\n     * @param {PUXI.CheckGroup} group\n     * @returns {CheckBox} the selected checkbox in the group\n     */\n    getSelected(group: CheckGroup): CheckBox\n    {\n        return this.checkGroups.get(group)?.selected;\n    }\n\n    /**\n     * Ensures that the check group exists in `this.checkGroups`.\n     *\n     * @param {PUXI.CheckGroup} id\n     * @protected\n     */\n    protected initGroup(id: CheckGroup): CBGroup\n    {\n        const cgroup: CBGroup = {\n            checks: [],\n            selected: null,\n        };\n\n        this.checkGroups.set(id, cgroup);\n\n        return cgroup;\n    }\n}\n","import { Controller } from './Controller';\nimport { Stage } from '../Stage';\nimport { FocusableWidget } from '../FocusableWidget';\n\nexport type TabGroup = string;\n\n/**\n * Pressing tab on a focused widget will make the next widget its tab group\n * focused. If no tab group is specified for a focusable widget, then it\n * has the `'default'` tab group.\n *\n * @memberof PUXI\n * @typedef {string} TabGroup\n */\n\n/**\n * @memberof PUXI\n * @class\n * @extends PUXI.Controller\n */\nexport class FocusController extends Controller<FocusableWidget>\n{\n    stage: Stage;\n\n    protected tabGroups: Map<TabGroup, FocusableWidget[]>;\n    protected currentItem: FocusableWidget;\n\n    useTab: boolean;\n    useForward: boolean;\n    useBack: boolean;\n\n    constructor(stage: Stage)\n    {\n        super(stage);\n\n        /**\n         * Map of tab-group names to the widgets in those groups.\n         * @member {Map<PUXI.TabGroup, PUXI.FocusableWidget[]>}\n         * @protected\n         */\n        this.tabGroups = new Map<TabGroup, FocusableWidget[]>();\n\n        /**\n         * Whether to enable tab-based focus movement.\n         * @member {boolean}\n         */\n        this.useTab = true;\n\n        /**\n         * Whether to enable forward arrow key focus movement.\n         * @member {boolean}\n         */\n        this.useForward = true;\n\n        /**\n         * Whether to enable back arrow key focus movement.\n         * @member {boolean}\n         */\n        this.useBack = true;\n    }\n\n    /**\n     * Adds the (focusable) widget to the tab group so that pressing tab repeatedly\n     * will eventually bring it into focus.\n     *\n     * @param {PUXI.FocusableWidget} widget - the widget to add\n     * @param {number}[tabIndex=0] - unique index for the widget in tab group used for ordering\n     * @param {PUXI.TabGroup}[tabGroup='default'] - tab group name\n     */\n    in(widget: FocusableWidget, tabIndex = 0, tabGroup = 'default'): void\n    {\n        let widgets = this.tabGroups.get(tabGroup);\n\n        if (!widgets)\n        {\n            widgets = [];\n            this.tabGroups.set(tabGroup, widgets);\n        }\n\n        const i = widgets.indexOf(widget);\n\n        // Push widget into tab group list if not present already.\n        if (i === -1)\n        {\n            widget.tabIndex = tabIndex !== undefined ? tabIndex : -1;\n            widget.tabGroup = tabGroup;\n\n            widgets.push(widget);\n            widgets.sort((a, b) => a.tabIndex - b.tabIndex);\n        }\n    }\n\n    /**\n     * @param {PUXI.FocusableWidget} widget\n     * @override\n     */\n    out(widget: FocusableWidget): void\n    {\n        const widgets = this.tabGroups.get(widget.tabGroup);\n\n        if (!widgets)\n        {\n            return;\n        }\n\n        const i = widgets.indexOf(widget);\n\n        if (i !== -1)\n        {\n            // Widgets should already be sorted & so deleting should not unsort it.\n            widgets.splice(i, 1);\n        }\n    }\n\n    /**\n     * Called when a widget comes into focus. Do not call this yourself.\n     *\n     * @param {FocusableWidget} widget\n     */\n    notifyFocus(widget: FocusableWidget): void\n    {\n        const lastItem = this.currentItem;\n\n        if (lastItem)\n        {\n            lastItem.blur();\n            this.emit('blur', lastItem);\n        }\n\n        this.currentItem = widget;\n\n        this.emit('focus', widget);\n        this.emit('focusChanged', widget, lastItem);\n    }\n\n    /**\n     * Clears the currently focused item without blurring it. It is called\n     * when a widget goes out of focus.\n     */\n    notifyBlur(): void\n    {\n        this.emit('blur', this.currentItem);\n        this.emit('focusChanged', null, this.currentItem);\n\n        this.currentItem = null;\n    }\n\n    /**\n     * Brings the widget into focus.\n     *\n     * @param {FocusableWidget} item\n     */\n    focus(item: FocusableWidget): void\n    {\n        const lastItem = this.currentItem;\n\n        if (lastItem)\n        {\n            lastItem.blur();\n            this.emit('blur', lastItem);\n        }\n\n        item.focus();\n\n        this.emit('focus', item);\n        this.emit('focusChanged', item, lastItem);\n    }\n\n    /**\n     * Blurs the currently focused widget out of focus.\n     */\n    blur(): void\n    {\n        if (this.currentItem)\n        {\n            this.currentItem.blur();\n\n            this.emit('blur', this.currentItem);\n            this.emit('focusChanged', null, this.currentItem);\n\n            this.currentItem = null;\n        }\n    }\n\n    /**\n     * Called when tab is pressed on a focusable widget.\n     */\n    onTab(): void\n    {\n        const { tabGroups, currentItem } = this;\n\n        if (currentItem)\n        {\n            const tabGroup = tabGroups.get(currentItem.tabGroup);\n\n            let i = tabGroup.indexOf(currentItem) + 1;\n\n            if (i >= tabGroup.length)\n            {\n                i = 0;\n            }\n\n            this.focus(tabGroup[i]);\n        }\n    }\n\n    /**\n     * Focuses the next item without wrapping, i.e. it does not go to the first\n     * item if the current one is the last item. This is called when the user\n     * presses the forward arrow key.\n     */\n    onForward(): void\n    {\n        if (!this.useForward)\n        {\n            return;\n        }\n\n        const { currentItem, tabGroups } = this;\n\n        if (currentItem)\n        {\n            const tabGroup = tabGroups.get(currentItem.tabGroup);\n\n            let i = tabGroup.indexOf(currentItem) + 1;\n\n            if (i >= tabGroup.length)\n            {\n                i = tabGroup.length - 1;\n            }\n\n            this.focus(tabGroup[i]);\n        }\n    }\n\n    /**\n     * Focuses the last item without wrapping, i.e. it does not go to the last\n     * item if the current item is the first one. This is called when the user\n     * presses the back arrow button.\n     */\n    onBack(): void\n    {\n        const { currentItem, tabGroups } = this;\n\n        if (currentItem)\n        {\n            const tabGroup = tabGroups.get(currentItem.tabGroup);\n            let i = tabGroup.indexOf(currentItem) - 1;\n\n            if (i < 0) i = 0;\n\n            this.focus(tabGroup[i]);\n        }\n    }\n\n    /**\n     * Fired when a widget gains focus.\n     * @event focus\n     * @param {PUXI.FocusableWidget} widget - the widget that gained focus.\n     */\n\n    /**\n     * Fired when a widget looses focus.\n     * @event blur\n     * @param {PUXI.FocusableWidget} widget - the widget that lost focus.\n     */\n\n    /**\n     * Fired when a new widget comes into focus or one looses focus.\n     * @event focusChanged\n     * @param {PUXI.FocusableWidget}[newFocus] - the widget that came into focus. It may\n     *      be null if only a blur occured.\n     * @param {PUXI.FocusableWidget}[oldFocus] - the widget that lost focus. It may be\n     *      null if a widget gained focused for the first time.\n     */\n}\n","import * as PIXI from 'pixi.js';\n\nexport type StyleData = {\n    [id: string]: any;\n    backgroundColor?: string | number;\n    background?: PIXI.Container;\n    fontFamily?: string;\n    fontSize?: number;\n    paddingLeft?: number;\n    paddingTop?: number;\n    paddingRight?: number;\n    paddingBottom?: number;\n    padding?: number;\n\n//    [':hover']?: StyleData;\n//    [':focus']?: StyleData;\n};\n\n/**\n * A StyleSheet provides a mechansim to style widgets in a shared fashion.\n */\nexport class Style extends PIXI.utils.EventEmitter\n{\n    public dirtyID: number;\n\n    private data: StyleData;\n    private extends: Style[];\n\n    private computedData: StyleData;\n    private computedDirty: boolean;\n\n    constructor(data: StyleData = {})\n    {\n        super();\n\n        this.dirtyID = 0;\n\n        this.data = data;\n        this.extends = [];\n\n        this.computedData = data;\n        this.computedDirty = false;\n    }\n\n    /**\n     * @param prop\n     */\n    getProperty(prop: string): any\n    {\n        if (this.computedDirty)\n        {\n            this.compute();\n        }\n\n        return this.computedData[prop];\n    }\n\n    /**\n     * @param props\n     * @example\n     * style.getProperties('paddingLeft', 'paddingRight')\n     */\n    getProperties(...props: string[]): Record<string, any>\n    {\n        if (this.computedDirty)\n        {\n            this.compute();\n        }\n\n        const result = { };\n\n        for (let i = 0, j = props.length; i < j; i++)\n        {\n            result[props[i]] = this.computedData[props[i]];\n        }\n\n        return result;\n    }\n\n    /**\n     * @param prop\n     * @param value\n     */\n    setProperty(prop: string, value: any): void\n    {\n        // Ensure computedData is up-to-date to ensure child styles get the correct information.\n        if (this.computedDirty)\n        {\n            this.compute();\n        }\n\n        this.data[prop] = value;\n        this.computedData[prop] = value;\n        this.emit('setProperty', prop, value, this);\n\n        ++this.dirtyID;\n    }\n\n    /**\n     * Extend the given style so that properties not set on this style are derived from it. If multiple styles\n     * are extended, the ones extended later have a higher priority.\n     *\n     * @param style\n     */\n    extend(style: Style): void\n    {\n        this.extends.push(style);\n        this.computedDirty = true;\n\n        ++this.dirtyID;\n\n        // Recompute the set-property for this style\n        style.on('setProperty', this.onParentSetProperty);\n    }\n\n    /**\n     * Recomputes the style data\n     */\n    private compute(): void\n    {\n        const superStyles = this.extends;\n\n        this.computedData = {};\n\n        for (let i = 0, j = superStyles.length; i < j; i++)\n        {\n            Object.assign(this.computedData, superStyles[i].computedData);\n        }\n\n        this.computedDirty = false;\n    }\n\n    private onParentSetProperty = (propertyName: string, value: any, style: Style): void =>\n    {\n        const superStyles = this.extends;\n        const superIndex = superStyles.indexOf(style);\n\n        if (superIndex === -1)\n        {\n            throw new Error('onParentSetProperty triggered when by a non-super style.');\n        }\n\n        const thisValue = this.computedData[propertyName];\n\n        for (let i = superIndex, j = superStyles.length; i < j; i++)\n        {\n            const superStyle = superStyles[i];\n\n            if (superStyle.computedData[propertyName])\n            {\n                this.computedData[propertyName] = superStyle.computedData[propertyName];\n            }\n        }\n\n        if (this.data[propertyName])\n        {\n            this.computedData[propertyName] = this.data[propertyName];\n        }\n\n        if (thisValue !== this.computedData[propertyName])\n        {\n            this.emit('setProperty', propertyName, this.computedData[propertyName], this);\n        }\n    };\n\n    /**\n     * @param data\n     * @example\n     * Style.create({\n     *     backgroundColor: 0xabcdef,\n     *     padding: 8\n     * })\n     */\n    static create(data: StyleData): Style\n    {\n        return new Style(data);\n    }\n}\n","import { Style, StyleData } from './Style';\n\nexport class StyleSheet\n{\n    [id: string]: Style;\n\n    static create(sheetData: { [id: string]: StyleData }): StyleSheet\n    {\n        const sheet = new StyleSheet();\n\n        for (const key in sheetData)\n        {\n            sheet[key] = Style.create(sheetData[key]);\n        }\n\n        return sheet;\n    }\n}\n","import { FocusableWidget, IFocusableOptions } from './FocusableWidget';\nimport { ScrollWidget } from './ScrollWidget';\nimport * as PIXI from 'pixi.js';\nimport { LayoutOptions } from './layout-options';\nimport { DragManager } from './event/DragManager';\n\n/**\n * @memberof PUXI\n * @interface\n */\ninterface ITextInputOptions extends IFocusableOptions\n{\n    multiLine?: boolean;\n    style?: PIXI.TextStyle;\n    background?: PIXI.Container;\n    selectedColor?: string | number[];\n    selectedBackgroundColor?: string;\n    width?: number;\n    height?: number;\n    padding?: number;\n    paddingTop?: number;\n    paddingBottom?: number;\n    paddingLeft?: number;\n    paddingRight?: number;\n    tabIndex?: number;\n    tabGroup?: number;\n    maxLength?: number;\n    caretWidth?: number;\n    lineHeight?: number;\n    value?: string;\n}\n\n// Dummy <input> element created for mobile keyboards\nlet mockDOMInput: any;\n\nfunction initMockDOMInput(): void\n{\n    // create temp input (for mobile keyboard)\n    if (typeof mockDOMInput === 'undefined')\n    {\n        mockDOMInput = document.createElement('INPUT');\n        mockDOMInput.setAttribute('type', 'text');\n        mockDOMInput.setAttribute('id', '_pui_tempInput');\n        mockDOMInput.setAttribute('style', 'position:fixed; left:-10px; top:-10px; width:0px; height: 0px;');\n        document.body.appendChild(mockDOMInput);\n    }\n}\n\n/**\n * An UI text object\n *\n * @class\n * @extends PIXI.UI.InputBase\n * @memberof PIXI.UI\n */\nexport class TextInput extends FocusableWidget\n{\n    private options: ITextInputOptions;\n\n    private _dirtyText: boolean;\n    private _value: string;\n    private _lastValue: string;\n\n    private _lastWidth: number;\n    private _lastHeight: number;\n\n    private selection: PIXI.Graphics;\n    private textContainer: ScrollWidget;\n\n    public maxLength: number;\n\n    private chars: any[];\n    private multiLine: boolean;\n    private color: string;\n    private selectedColor: string;\n    private selectedBackgroundColor: string;\n    private tempText: PIXI.Text;\n    private textHeight: number;\n    private lineHeight: number;\n\n    private caret: PIXI.Graphics;\n    private caretInterval: NodeJS.Timeout;\n    private si: number; // startIndex\n    private sie: boolean; // startIndexEnd\n    private ei: number; // endIndex\n    private eie: boolean; // endIndexEnd\n    private sp: PIXI.Point; // startposition\n    private ds: PIXI.Point; // dragStart\n    private de: PIXI.Point; // dragend\n    private rdd: boolean; // Reverse drag direction\n    private vrdd: boolean; // vertical Reverse drag direction\n\n    private selectionStart: number;\n    private selectionEnd: number;\n    private hasSelection: boolean;\n    private t: number; // timestamp\n    private cc: number; // click counter\n    private textLengthPX: number;\n    private textHeightPX: number;\n    private lineIndexMax: number;\n\n    private ctrlDown: boolean;\n    private shiftDown: boolean;\n    private shiftKey: number;\n    private ctrlKey: number;\n    private cmdKey: number;\n\n    private _sp: PIXI.Point;\n\n    /**\n     * @param {PUXI.ITextInputOptions} options\n     * @param {string} options.value Text content\n     * @param {boolean} [options.multiLine=false] Multiline input\n     * @param options.style {PIXI.TextStyle} Style used for the Text\n     * @param options.background {(PIXI.UI.SliceSprite|PIXI.UI.Sprite)} will be used as background for input\n     * @param [options.selectedColor='#ffffff'] {String|Array} Fill color of selected text\n     * @param [options.selectedBackgroundColor='#318cfa'] {String} BackgroundColor of selected text\n     * @param [options.width=150] {Number} width of input\n     * @param [options.height=20] {Number} height of input\n     * @param [options.padding=3] {Number} input padding\n     * @param [options.paddingTop=0] {Number} input padding\n     * @param [options.paddingBottom=0] {Number} input padding\n     * @param [options.paddingLeft=0] {Number} input padding\n     * @param [options.paddingRight=0] {Number} input padding\n     * @param [options.tabIndex=0] {Number} input tab index\n     * @param [options.tabGroup=0] {Number|String} input tab group\n     * @param [options.maxLength=0] {Number} 0 = unlimited\n     * @param [options.caretWidth=1] {Number} width of the caret\n     * @param [options.lineHeight=0] {Number} 0 = inherit from text\n     */\n    constructor(options: ITextInputOptions)\n    {\n        super(options);\n        initMockDOMInput();\n\n        this.options = options;\n\n        this._dirtyText = true;\n        this.maxLength = options.maxLength || 0;\n        this._value = this._lastValue = options.value || '';\n\n        if (this.maxLength)\n        {\n            this._value = this._value.slice(0, this.maxLength);\n        }\n\n        this.chars = [];\n        this.multiLine = options.multiLine !== undefined ? options.multiLine : false;\n        this.color = options.style && options.style.fill ? options.style.fill : '#000000';\n        this.selectedColor = options.selectedColor || '#ffffff';\n        this.selectedBackgroundColor = options.selectedBackgroundColor || '#318cfa';\n        this.tempText = new PIXI.Text('1', options.style);\n        this.textHeight = this.tempText.height;\n        this.lineHeight = options.lineHeight || this.textHeight || this._height;\n\n        this.tempText.destroy();\n\n        // set cursor\n        // this.container.cursor = \"text\";\n\n        // selection graphics\n        this.selection = new PIXI.Graphics();\n        this.selection.visible = false;\n        this.selection._startIndex = 0;\n        this.selection._endIndex = 0;\n\n        // caret graphics\n        this.caret = new PIXI.Graphics();\n        this.caret.visible = false;\n        this.caret._index = 0;\n        this.caret.lineStyle(options.caretWidth || 1, '#ffffff', 1);\n        this.caret.moveTo(0, 0);\n        this.caret.lineTo(0, this.textHeight);\n\n        // var padding\n        const paddingLeft = options.paddingLeft !== undefined ? options.paddingLeft : options.padding;\n        const paddingRight = options.paddingRight !== undefined ? options.paddingRight : options.padding;\n        const paddingBottom = options.paddingBottom !== undefined ? options.paddingBottom : options.padding;\n        const paddingTop = options.paddingTop !== undefined ? options.paddingTop : options.padding;\n\n        // insert text container (scrolling container)\n        this.textContainer = new ScrollWidget({\n            scrollX: !this.multiLine,\n            scrollY: this.multiLine,\n            dragScrolling: this.multiLine,\n            expandMask: 2,\n            softness: 0.2,\n            overflowX: 40,\n            overflowY: 40,\n        }).setPadding(\n            paddingLeft || 3,\n            paddingTop || 3,\n            paddingRight || 3,\n            paddingBottom || 3,\n        ).setLayoutOptions(\n            new LayoutOptions(\n                LayoutOptions.FILL_PARENT,\n                LayoutOptions.FILL_PARENT,\n            ),\n        ) as ScrollWidget;\n\n        this.addChild(this.textContainer);\n\n        if (this.multiLine)\n        {\n            this._useNext = this._usePrev = false;\n            this.textContainer.dragRestrictAxis = 'y';\n            this.textContainer.dragThreshold = 5;\n            this.dragRestrictAxis = 'x';\n            this.dragThreshold = 5;\n        }\n\n        // selection Vars\n        this.sp = new PIXI.Point(); // startposition\n        this._sp = new PIXI.Point();\n        this.ds = new PIXI.Point(); // dragStart\n        this.de = new PIXI.Point(); // dragend\n        this.rdd = false; // Reverse drag direction\n        this.vrdd = false; // vertical Reverse drag direction\n        this.selectionStart = -1;\n        this.selectionEnd = -1;\n        this.hasSelection = false;\n        this.t = performance.now(); // timestamp\n        this.cc = 0; // click counter\n        this.textLengthPX = 0;\n        this.textHeightPX = 0;\n        this.lineIndexMax = 0;\n        this.ctrlDown = false;\n        this.shiftDown = false;\n        this.shiftKey = 16;\n        this.ctrlKey = 17;\n        this.cmdKey = 91;\n\n        this.setupDrag();\n    }\n\n    setupDrag(): void\n    {\n        const event = new DragManager(this);\n\n        event.onPress = (e, mouseDown): void =>\n        {\n            if (mouseDown)\n            {\n                const timeSinceLast = performance.now() - this.t;\n\n                this.t = performance.now();\n                if (timeSinceLast < 250)\n                {\n                    this.cc++;\n                    if (this.cc > 1)\n                    {\n                        this.select();\n                    }\n                    else\n                    {\n                        this.innerContainer.toLocal(this.sp, undefined, this.ds, true);\n                        this.updateClosestIndex(this.ds, true);\n                        const c = this.chars[this.si];\n\n                        if (c)\n                        {\n                            if (c.wordIndex != -1)\n                            {\n                                this.selectWord(c.wordIndex);\n                            }\n                            else\n                            {\n                                this.selectRange(this.si, this.si);\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    this.cc = 0;\n                    this.sp.copyFrom(e.data.global);\n                    this.innerContainer.toLocal(this.sp, undefined, this.ds, true);\n\n                    if (this.chars.length)\n                    {\n                        this.updateClosestIndex(this.ds, true);\n                        this.setCaretIndex(this.sie ? this.si + 1 : this.si);\n                    }\n                }\n            }\n            e.data.originalEvent.preventDefault();\n        };\n\n        event.onDragMove = (e, offset: PIXI.Point): void =>\n        {\n            if (!this.chars.length || !this._isFocused)\n            {\n                return;\n            }\n\n            this.de.x = this.sp.x + offset.x;\n            this.de.y = this.sp.y + offset.y;\n            this.innerContainer.toLocal(this.de, undefined, this.de, true);\n            this.updateClosestIndex(this.de, false);\n\n            if (this.si < this.ei)\n            {\n                this.selectRange(this.sie ? this.si + 1 : this.si, this.eie ? this.ei : this.ei - 1);\n                this.caret._index = this.eie ? this.ei : this.ei - 1;\n            }\n            else if (this.si > this.ei)\n            {\n                this.selectRange(this.ei, this.sie ? this.si : this.si - 1);\n                this.caret._index = this.ei;\n            }\n            else if (this.sie === this.eie)\n            {\n                this.setCaretIndex(this.sie ? this.si + 1 : this.si);\n            }\n            else\n            {\n                this.selectRange(this.si, this.ei);\n                this.caret._index = this.ei;\n            }\n\n            this.caret._forward = this.si <= this.ei;\n            this.caret._down = offset.y > 0;\n\n            this.scrollToPosition(this.de);\n        };\n    }\n\n    private get innerContainer(): PIXI.Container\n    {\n        return this.textContainer.innerContainer.insetContainer;\n    }\n\n    update(): void\n    {\n        if (this.width !== this._lastWidth)\n        {\n            this._lastWidth = this._width;\n\n            if (this.multiLine)\n            {\n                this.updateText();\n\n                if (this.caret.visible)\n                {\n                    this.setCaretIndex(this.caret._index);\n                }\n                if (this.hasSelection)\n                {\n                    this.updateSelectionGraphics();\n                }\n            }\n        }\n\n        // update text\n        if (this._dirtyText)\n        {\n            this.updateText();\n            this._dirtyText = false;\n        }\n    }\n\n    updateText(): void\n    {\n        this.textLengthPX = 0;\n        this.textHeightPX = 0;\n        this.lineIndexMax = 0;\n\n        let lineIndex = 0;\n        const length = this._value.length;\n        let x = 0;\n        let y = (this.lineHeight - this.textHeight) * 0.5;\n        let i = 0;\n\n        // destroy excess chars\n        if (this.chars.length > length)\n        {\n            for (i = this.chars.length - 1; i >= length; i--)\n            {\n                this.innerContainer.removeChild(this.chars[i]);\n                this.chars[i].destroy();\n            }\n\n            this.chars.splice(length, this.chars.length - length);\n        }\n\n        // update and add chars\n        let whitespace = false;\n        let newline = false;\n        let wordIndex = 0;\n        let lastWordIndex = -1;\n        let wrap = false;\n\n        for (i = 0; i < this._value.length; i++)\n        {\n            if (whitespace || newline)\n            {\n                lastWordIndex = i;\n                wordIndex++;\n            }\n\n            let c = this._value[i];\n\n            whitespace = c === ' ';\n            newline = c === '\\n';\n\n            if (newline)\n            { // newline \"hack\". webgl render errors if \\n is passed to text\n                c = '';\n            }\n\n            let charText = this.chars[i];\n\n            if (!charText)\n            {\n                charText = new PIXI.Text(c, this.options.style);\n                this.innerContainer.addChild(charText);\n                this.chars.push(charText);\n            }\n            else\n            {\n                charText.text = c;\n            }\n\n            charText.scale.x = newline ? 0 : 1;\n            charText.wrapped = wrap;\n            wrap = false;\n\n            if (newline || (this.multiLine && x + charText.width >= this._width - this.paddingLeft - this.paddingRight))\n            {\n                lineIndex++;\n                x = 0;\n                y += this.lineHeight;\n\n                if (lastWordIndex !== -1 && !newline)\n                {\n                    i = lastWordIndex - 1;\n                    lastWordIndex = -1;\n                    wrap = true;\n                    continue;\n                }\n            }\n\n            charText.lineIndex = lineIndex;\n            charText.x = x;\n            charText.y = y;\n            charText.wordIndex = whitespace || newline ? -1 : wordIndex;\n            x += charText.width;\n\n            if (x > this.textLengthPX)\n            {\n                this.textLengthPX = x;\n            }\n            if (y > this.textHeightPX)\n            {\n                this.textHeightPX = y;\n            }\n        }\n\n        this.lineIndexMax = lineIndex;\n\n        // put caret on top\n        this.innerContainer.addChild(this.caret);\n\n        // recache\n        if (this.innerContainer.cacheAsBitmap)\n        {\n            this.innerContainer.cacheAsBitmap = false;\n            this.innerContainer.cacheAsBitmap = true;\n        }\n\n        this.textContainer.update();\n    }\n\n    updateClosestIndex(point: PIXI.Point, start: boolean): void\n    {\n        let currentDistX = 99999;\n        let currentIndex = -1;\n        let atEnd = false;\n\n        let closestLineIndex = 0;\n\n        if (this.lineIndexMax > 0)\n        {\n            closestLineIndex = Math.max(0, Math.min(\n                this.lineIndexMax,\n                Math.floor(point.y / this.lineHeight)));\n        }\n\n        for (let i = 0; i < this.chars.length; i++)\n        {\n            const char = this.chars[i];\n\n            if (char.lineIndex !== closestLineIndex)\n            {\n                continue;\n            }\n\n            const distX = Math.abs(point.x - (char.x + (char.width * 0.5)));\n\n            if (distX < currentDistX)\n            {\n                currentDistX = distX;\n                currentIndex = i;\n                atEnd = point.x > char.x + (char.width * 0.5);\n            }\n        }\n\n        if (start)\n        {\n            this.si = currentIndex;\n            this.sie = atEnd;\n        }\n        else\n        {\n            this.ei = currentIndex;\n            this.eie = atEnd;\n        }\n    }\n\n    deleteSelection(): boolean\n    {\n        if (this.hasSelection)\n        {\n            this.value = this.value.slice(0, this.selectionStart) + this.value.slice(this.selectionEnd + 1);\n            this.setCaretIndex(this.selectionStart);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    updateSelectionColors(): void\n    {\n        // Color charecters\n        for (let i = 0; i < this.chars.length; i++)\n        {\n            if (i >= this.selectionStart && i <= this.selectionEnd)\n            {\n                this.chars[i].style.fill = this.selectedColor;\n            }\n            else\n            {\n                this.chars[i].style.fill = this.color;\n            }\n        }\n    }\n\n    scrollToPosition(pos: PIXI.Point): void\n    {\n        this._sp.x = pos.x;\n        this._sp.y = pos.y;\n\n        if (this.multiLine && this._sp.y >= this.lineHeight)\n        {\n            this._sp.y += this.lineHeight;\n        }\n\n        this.textContainer.focusPosition(this._sp);\n    }\n\n    resetScrollPosition(): void\n    {\n        this._sp.set(0, 0);\n        this.textContainer.focusPosition(this._sp);\n    }\n\n    hideCaret(): void\n    {\n        this.caret.visible = false;\n        clearInterval(this.caretInterval);\n    }\n\n    showCaret(): void\n    {\n        this.clearSelection();\n        clearInterval(this.caretInterval);\n\n        this.caret.alpha = 1;\n        this.caret.visible = true;\n\n        this.caretInterval = setInterval(() =>\n        {\n            this.caret.alpha = this.caret.alpha === 0 ? 1 : 0;\n        }, 500);\n    }\n\n    insertTextAtCaret(c: string): void\n    {\n        if (!this.multiLine && c.indexOf('\\n') !== -1)\n        {\n            c = c.replace(/\\n/g, '');\n        }\n\n        if (this.hasSelection)\n        {\n            this.deleteSelection();\n        }\n\n        if (!this.maxLength || this.chars.length < this.maxLength)\n        {\n            if (this.caret._atEnd)\n            {\n                this.valueEvent += c;\n                this.setCaretIndex(this.chars.length);\n            }\n            else\n            {\n                const index = Math.min(this.chars.length - 1, this.caret._index);\n\n                this.valueEvent = this.value.slice(0, index) + c + this.value.slice(index);\n                this.setCaretIndex(index + c.length);\n            }\n        }\n    }\n\n    onKeyDown = (e): void =>\n    {\n        if (e.which === this.ctrlKey || e.which === this.cmdKey)\n        {\n            this.ctrlDown = true;\n        }\n        if (e.which === this.shiftKey)\n        {\n            this.shiftDown = true;\n        }\n\n        // FocusableWidget.onKeyDownImpl should've been called before this.\n\n        if (e.defaultPrevented)\n        {\n            return;\n        }\n\n        if (e.which === 13)\n        { // enter\n            this.insertTextAtCaret('\\n');\n            e.preventDefault();\n\n            return;\n        }\n\n        if (this.ctrlDown)\n        {\n            // Handle Ctrl+<?> commands\n\n            if (e.which === 65)\n            {\n                // Ctrl+A (Select all)\n                this.select();\n                e.preventDefault();\n\n                return;\n            }\n            else if (e.which === 90)\n            {\n                // Ctrl+Z (Undo)\n                if (this.value != this._lastValue)\n                {\n                    this.valueEvent = this._lastValue;\n                }\n\n                this.setCaretIndex(this._lastValue.length + 1);\n                e.preventDefault();\n\n                return;\n            }\n        }\n        if (e.which === 8)\n        {\n            // Handle backspace\n            if (!this.deleteSelection())\n            {\n                if (this.caret._index > 0 || (this.chars.length === 1 && this.caret._atEnd))\n                {\n                    if (this.caret._atEnd)\n                    {\n                        this.valueEvent = this.value.slice(0, this.chars.length - 1);\n                        this.setCaretIndex(this.caret._index);\n                    }\n                    else\n                    {\n                        this.valueEvent = this.value.slice(0, this.caret._index - 1) + this.value.slice(this.caret._index);\n                        this.setCaretIndex(this.caret._index - 1);\n                    }\n                }\n            }\n\n            e.preventDefault();\n\n            return;\n        }\n\n        if (e.which === 46)\n        {\n            // Delete selection\n            if (!this.deleteSelection())\n            {\n                if (!this.caret._atEnd)\n                {\n                    this.valueEvent = this.value.slice(0, this.caret._index) + this.value.slice(this.caret._index + 1);\n                    this.setCaretIndex(this.caret._index);\n                }\n            }\n\n            e.preventDefault();\n\n            return;\n        }\n        else if (e.which === 37 || e.which === 39)\n        {\n            this.rdd = e.which === 37;\n\n            if (this.shiftDown)\n            {\n                if (this.hasSelection)\n                {\n                    const caretAtStart = this.selectionStart === this.caret._index;\n\n                    if (caretAtStart)\n                    {\n                        if (this.selectionStart === this.selectionEnd && this.rdd === this.caret._forward)\n                        {\n                            this.setCaretIndex(this.caret._forward ? this.caret._index : this.caret._index + 1);\n                        }\n                        else\n                        {\n                            const startindex = this.rdd ? this.caret._index - 1 : this.caret._index + 1;\n\n                            this.selectRange(startindex, this.selectionEnd);\n                            this.caret._index = Math.min(this.chars.length - 1, Math.max(0, startindex));\n                        }\n                    }\n                    else\n                    {\n                        const endIndex = this.rdd ? this.caret._index - 1 : this.caret._index + 1;\n\n                        this.selectRange(this.selectionStart, endIndex);\n                        this.caret._index = Math.min(this.chars.length - 1, Math.max(0, endIndex));\n                    }\n                }\n                else\n                {\n                    const _i = this.caret._atEnd ? this.caret._index + 1 : this.caret._index;\n                    const selectIndex = this.rdd ? _i - 1 : _i;\n\n                    this.selectRange(selectIndex, selectIndex);\n                    this.caret._index = selectIndex;\n                    this.caret._forward = !rdd;\n                }\n            }\n            else\n            {\n                // Navigation\n                // eslint-disable-next-line no-lonely-if\n                if (this.hasSelection)\n                {\n                    this.setCaretIndex(this.rdd ? this.selectionStart : this.selectionEnd + 1);\n                }\n                else\n                {\n                    this.setCaretIndex(this.caret._index + (this.rdd ? this.caret._atEnd ? 0 : -1 : 1));\n                }\n            }\n\n            e.preventDefault();\n\n            return;\n        }\n        else if (this.multiLine && (e.which === 38 || e.which === 40))\n        {\n            this.vrdd = e.which === 38;\n\n            if (this.shiftDown)\n            {\n                if (this.hasSelection)\n                {\n                    this.de.y = Math.max(0, Math.min(\n                        this.textHeightPX,\n                        this.de.y + (this.vrdd ? -this.lineHeight : this.lineHeight)));\n                    this.updateClosestIndex(this.de, false);\n\n                    // console.log(si, ei);\n                    if (Math.abs(this.si - this.ei) <= 1)\n                    {\n                    // console.log(si, ei);\n                        this.setCaretIndex(this.sie ? this.si + 1 : this.si);\n                    }\n                    else\n                    {\n                        this.caret._index = (this.eie ? this.ei + 1 : this.ei) + (this.caret._down ? -1 : 0);\n                        this.selectRange(this.caret._down ? this.si : this.si - 1, this.caret._index);\n                    }\n                }\n                else\n                {\n                    this.si = this.caret._index;\n                    this.sie = false;\n                    this.de.copyFrom(this.caret);\n                    this.de.y = Math.max(0, Math.min(\n                        this.textHeightPX,\n                        this.de.y + (this.vrdd ? -this.lineHeight : this.lineHeight)));\n                    this.updateClosestIndex(this.de, false);\n\n                    this.caret._index = (this.eie ? this.ei + 1 : ei) - (this.vrdd ? 0 : 1);\n                    this.selectRange(this.vrdd ? this.si - 1 : this.si, this.caret._index);\n                    this.caret._down = !this.vrdd;\n                }\n            }\n            else if (this.hasSelection)\n            {\n                this.setCaretIndex(this.vrdd ? this.selectionStart : this.selectionEnd + 1);\n            }\n            else\n            {\n                this.ds.copyFrom(this.caret);\n                this.ds.y += this.vrdd ? -this.lineHeight : this.lineHeight;\n                this.ds.x += 1;\n                this.updateClosestIndex(this.ds, true);\n                this.setCaretIndex(this.sie ? this.si + 1 : this.si);\n            }\n            e.preventDefault();\n\n            return;\n        }\n    };\n\n    keyUpEvent = (e): void =>\n    {\n        if (e.which === this.ctrlKey || e.which === this.cmdKey) this.ctrlDown = false;\n        if (e.which === this.shiftKey) this.shiftDown = false;\n\n        this.emit('keyup', e);\n\n        if (e.defaultPrevented)\n        { return; }\n    };\n\n    copyEvent = (e): void =>\n    {\n        this.emit('copy', e);\n\n        if (e.defaultPrevented)\n        { return; }\n\n        if (this.hasSelection)\n        {\n            const clipboardData = e.clipboardData || window.clipboardData;\n\n            clipboardData.setData('Text', this.value.slice(this.selectionStart, this.selectionEnd + 1));\n        }\n\n        e.preventDefault();\n    };\n\n    cutEvent = (e): void =>\n    {\n        this.emit('cut', e);\n\n        if (e.defaultPrevented)\n        { return; }\n\n        if (this.hasSelection)\n        {\n            this.copyEvent(e);\n            this.deleteSelection();\n        }\n\n        e.preventDefault();\n    };\n\n     pasteEvent = (e): void =>\n     {\n         this.emit('paste', e);\n\n         if (e.defaultPrevented)\n         { return; }\n\n         const clipboardData = e.clipboardData || window.clipboardData;\n\n         this.insertTextAtCaret(clipboardData.getData('Text'));\n         e.preventDefault();\n     };\n\n    inputEvent = (e): void =>\n    {\n        const c = mockDOMInput.value;\n\n        if (c.length)\n        {\n            this.insertTextAtCaret(c);\n            mockDOMInput.value = '';\n        }\n\n        e.preventDefault();\n    };\n\n    inputBlurEvent = (e): void =>\n    {\n        this.blur();\n    };\n\n    public focus = (): void =>\n    {\n        if (!this._isFocused)\n        {\n            super.focus();\n\n            const l = `${this.contentContainer.worldTransform.tx}px`;\n            const t = `${this.contentContainer.worldTransform.ty}px`;\n            const h = `${this.contentContainer.height}px`;\n            const w = `${this.contentContainer.width}px`;\n\n            mockDOMInput.setAttribute('style', `position:fixed; left:${l}; top:${t}; height:${h}; width:${w};`);\n            mockDOMInput.value = '';\n            mockDOMInput.focus();\n            mockDOMInput.setAttribute('style', 'position:fixed; left:-10px; top:-10px; width:0px; height: 0px;');\n\n            this.innerContainer.cacheAsBitmap = false;\n            mockDOMInput.addEventListener('blur', this.inputBlurEvent, false);\n            document.addEventListener('keydown', this.onKeyDown, false);\n            document.addEventListener('keyup', this.keyUpEvent, false);\n            document.addEventListener('paste', this.pasteEvent, false);\n            document.addEventListener('copy', this.copyEvent, false);\n            document.addEventListener('cut', this.cutEvent, false);\n            mockDOMInput.addEventListener('input', this.inputEvent, false);\n\n            setTimeout(() =>\n            {\n                if (!this.caret.visible && !this.selection.visible && !this.multiLine)\n                {\n                    this.setCaretIndex(this.chars.length);\n                }\n            }, 0);\n        }\n    };\n\n    public blur = (): void =>\n    {\n        if (this._isFocused)\n        {\n            super.blur();\n            this.ctrlDown = false;\n            this.shiftDown = false;\n\n            this.hideCaret();\n            this.clearSelection();\n\n            if (this.chars.length > 1)\n            {\n                this.innerContainer.cacheAsBitmap = true;\n            }\n\n            mockDOMInput.removeEventListener('blur', this.inputBlurEvent);\n            document.removeEventListener('keydown', this.onKeyDown);\n            document.removeEventListener('keyup', this.keyUpEvent);\n            document.removeEventListener('paste', this.pasteEvent);\n            document.removeEventListener('copy', this.copyEvent);\n            document.removeEventListener('cut', this.cutEvent);\n            mockDOMInput.removeEventListener('input', this.inputEvent);\n            mockDOMInput.blur();\n        }\n\n        if (!this.multiLine)\n        {\n            this.resetScrollPosition();\n        }\n    };\n\n    setCaretIndex = (index: number): void =>\n    {\n        this.caret._atEnd = index >= this.chars.length;\n        this.caret._index = Math.max(0, Math.min(this.chars.length - 1, index));\n\n        if (this.chars.length && index > 0)\n        {\n            let i = Math.max(0, Math.min(index, this.chars.length - 1));\n            let c = this.chars[i];\n\n            if (c && c.wrapped)\n            {\n                this.caret.x = c.x;\n                this.caret.y = c.y;\n            }\n            else\n            {\n                i = Math.max(0, Math.min(index - 1, this.chars.length - 1));\n                c = this.chars[i];\n                this.caret.x = this.chars[i].x + this.chars[i].width;\n                this.caret.y = (this.chars[i].lineIndex * this.lineHeight) + (this.lineHeight - this.textHeight) * 0.5;\n            }\n        }\n        else\n        {\n            this.caret.x = 0;\n            this.caret.y = (this.lineHeight - this.textHeight) * 0.5;\n        }\n\n        this.scrollToPosition(this.caret);\n        this.showCaret();\n    };\n\n    select = (): void =>\n    {\n        this.selectRange(0, this.chars.length - 1);\n    };\n\n    selectWord = (wordIndex: number): void =>\n    {\n        let startIndex = this.chars.length;\n        let endIndex = 0;\n\n        for (let i = 0; i < this.chars.length; i++)\n        {\n            if (this.chars[i].wordIndex !== wordIndex)\n            {\n                continue;\n            }\n\n            if (i < startIndex)\n            {\n                startIndex = i;\n            }\n            if (i > endIndex)\n            {\n                endIndex = i;\n            }\n        }\n\n        this.selectRange(startIndex, endIndex);\n    };\n\n    selectRange = (startIndex: number, endIndex: number): void =>\n    {\n        if (startIndex > -1 && endIndex > -1)\n        {\n            const start = Math.min(startIndex, endIndex, this.chars.length - 1);\n            const end = Math.min(Math.max(startIndex, endIndex), this.chars.length - 1);\n\n            if (start !== this.selectionStart || end !== this.selectionEnd)\n            {\n                this.hasSelection = true;\n                this.selection.visible = true;\n                this.selectionStart = start;\n                this.selectionEnd = end;\n\n                this.hideCaret();\n                this.updateSelectionGraphics();\n                this.updateSelectionColors();\n            }\n\n            this.focus();\n        }\n        else\n        {\n            this.clearSelection();\n        }\n    };\n\n    clearSelection = (): void =>\n    {\n        if (this.hasSelection)\n        {\n            // Remove color\n            this.hasSelection = false;\n            this.selection.visible = false;\n            this.selectionStart = -1;\n            this.selectionEnd = -1;\n            this.updateSelectionColors();\n        }\n    };\n\n    updateSelectionGraphics = () =>\n    {\n        const c1 = this.chars[this.selectionStart];\n\n        if (c1 !== undefined)\n        {\n            let cx = c1.x;\n            let cy = c1.y;\n            let w = 0;\n            const h = this.textHeight;\n            let cl = c1.lineIndex;\n\n            this.selection.clear();\n            for (let i = this.selectionStart; i <= this.selectionEnd; i++)\n            {\n                const c = this.chars[i];\n\n                if (c.lineIndex != cl)\n                {\n                    this.drawSelectionRect(cx, cy, w, h);\n                    cx = c.x;\n                    cy = c.y;\n                    cl = c.lineIndex;\n                    w = 0;\n                }\n\n                w += c.width;\n            }\n\n            this.drawSelectionRect(cx, cy, w, h);\n            this.innerContainer.addChildAt(this.selection, 0);\n        }\n    };\n\n    drawSelectionRect = (x: number, y: number, w: number, h: number): void =>\n    {\n        this.selection.beginFill(`0x${this.selectedBackgroundColor.slice(1)}`, 1);\n        this.selection.moveTo(x, y);\n        this.selection.lineTo(x + w, y);\n        this.selection.lineTo(x + w, y + h);\n        this.selection.lineTo(x, y + h);\n        this.selection.endFill();\n    };\n\n    get valueEvent(): string\n    {\n        return this._value;\n    }\n    set valueEvent(val: string)\n    {\n        if (this.maxLength)\n        {\n            val = val.slice(0, this.maxLength);\n        }\n\n        if (this._value != val)\n        {\n            this.value = val;\n            this.emit('change');\n        }\n    }\n\n    get value(): string\n    {\n        return this._value;\n    }\n    set value(val: string)\n    {\n        if (this.maxLength)\n        {\n            val = val.slice(0, this.maxLength);\n        }\n\n        if (this._value != val)\n        {\n            this._lastValue = this._value;\n            this._value = val;\n            this._dirtyText = true;\n            this.update();\n        }\n    }\n\n    get text(): string\n    {\n        return this.value;\n    }\n    set text(value: string)\n    {\n        this.value = value;\n    }\n}\n\n/*\n * Features:\n * multiLine, shift selection, Mouse Selection, Cut, Copy, Paste, Delete, Backspace, Arrow navigation, tabIndex\n *\n * Methods:\n * blur()\n * focus()\n * select() - selects all text\n * selectRange(startIndex, endIndex)\n * clearSelection()\n * setCaretIndex(index) moves caret to index\n *\n *\n * Events:\n * \"change\"\n * \"blur\"\n * \"blur\"\n * \"focus\"\n * \"focusChanged\" param: [bool]focus\n * \"keyup\" param: Event\n * \"keydown\" param: Event\n * \"copy\" param: Event\n * \"paste\" param: Event\n * \"cut\" param: Event\n * \"keyup\" param: Event\n */\n","import { Tween } from './Tween';\nimport * as PIXI from 'pixi.js';\n\n/**\n * This ticker is an event-emitter that can be used for running periodic tasks\n * in the rendering loop. It emits the `update` event every animation frame.\n *\n * @memberof PUXI\n * @class\n * @extends PIXI.utils.EventEmitter\n */\nexport class Ticker extends PIXI.utils.EventEmitter\n{\n    private _disabled: boolean;\n    private _now: number;\n\n    DeltaTime: number;\n    Time: number;\n    Ms: number;\n\n    constructor(autoStart: boolean)\n    {\n        super();\n\n        this._disabled = true;\n        this._now = 0;\n\n        this.DeltaTime = 0;\n        this.Time = performance.now();\n        this.Ms = 0;\n\n        if (autoStart)\n        {\n            this.disabled = false;\n        }\n\n        Ticker.shared = this;\n    }\n\n    get disabled(): boolean\n    {\n        return this._disabled;\n    }\n    set disabled(val: boolean)\n    {\n        if (!this._disabled)\n        {\n            this._disabled = true;\n        }\n        else\n        {\n            this._disabled = false;\n            Ticker.shared = this;\n\n            this.update(performance.now(), true);\n        }\n    }\n\n    /**\n     * Updates the text\n     *\n     * @private\n     */\n    update(time: number): void\n    {\n        Ticker.shared._now = time;\n        Ticker.shared.Ms = Ticker.shared._now - Ticker.shared.Time;\n        Ticker.shared.Time = Ticker.shared._now;\n        Ticker.shared.DeltaTime = Ticker.shared.Ms * 0.001;\n        Ticker.shared.emit('update', Ticker.shared.DeltaTime);\n        Tween._update(Ticker.shared.DeltaTime);\n\n        if (!Ticker.shared._disabled)\n        {\n            requestAnimationFrame(Ticker.shared.update);\n        }\n    }\n\n    /**\n     * The update event is fired periodically and it can be used to for a rendering\n     * loop.\n     * @event update\n     * @param {DOMHighResTimeStamp} deltaTime - milliseconds since last update\n     */\n\n    static shared: Ticker;\n\n    static on(event: any, fn: Function, context: any): void\n    {\n        Ticker.shared.on(event, fn, context);\n    }\n\n    static once(event: any, fn: Function, context: any): void\n    {\n        Ticker.shared.once(event, fn, context);\n    }\n\n    static removeListener(event: any, fn: Function): void\n    {\n        Ticker.shared.removeListener(event, fn);\n    }\n}\n\nTicker.shared = new Ticker(true);\n","import { ILayoutManager } from './ILayoutManager';\nimport { Widget } from '../Widget';\nimport { AnchorLayoutOptions, ALIGN, LayoutOptions } from '../layout-options';\nimport { MeasureMode } from '../IMeasurable';\nimport { WidgetGroup } from '../WidgetGroup';\n\ninterface IAnchorCache {\n    remeasure: boolean;\n}\n\n/**\n * `AnchorLayout` is used in conjunction with `AnchorLayoutOptions`.\n *\n * @memberof PUXI\n * @class\n * @example\n * ```\n * parent.useLayout(new PUXI.AnchorLayout());\n * ```\n */\nexport class AnchorLayout implements ILayoutManager\n{\n    private measuredWidth: number;\n    private measuredHeight: number;\n\n    private host: WidgetGroup;\n\n    onAttach(host: WidgetGroup): void\n    {\n        this.host = host;\n    }\n\n    onDetach(): void\n    {\n        this.host = null;\n    }\n\n    onLayout(): void\n    {\n        const parent = this.host;\n        const { widgetChildren } = parent;\n\n        const parentWidth = parent.contentWidth;\n        const parentHeight = parent.contentHeight;\n\n        for (let i = 0; i < widgetChildren.length; i++)\n        {\n            const child = widgetChildren[i];\n            const layoutOptions = (child.layoutOptions || {}) as AnchorLayoutOptions;\n\n            const childWidth = child.getMeasuredWidth();\n            const childHeight = child.getMeasuredHeight();\n            const anchorLeft = this.calculateAnchor(layoutOptions.anchorLeft || 0, parentWidth, false);\n            const anchorTop = this.calculateAnchor(layoutOptions.anchorTop || 0, parentHeight, false);\n            const anchorRight = this.calculateAnchor(layoutOptions.anchorRight || 0, parentWidth, true);\n            const anchorBottom = this.calculateAnchor(layoutOptions.anchorBottom || 0, parentHeight, true);\n\n            let x = anchorLeft;\n            let y = anchorTop;\n\n            switch (layoutOptions.horizontalAlign)\n            {\n                case ALIGN.MIDDLE:\n                    x = (anchorRight + anchorLeft - childWidth) / 2;\n                    break;\n                case ALIGN.RIGHT:\n                    x = anchorRight - childWidth;\n                    break;\n            }\n\n            switch (layoutOptions.verticalAlign)\n            {\n                case ALIGN.MIDDLE:\n                    y = (anchorBottom + anchorTop - childHeight) / 2;\n                    break;\n                case ALIGN.BOTTOM:\n                    y = anchorBottom - childHeight;\n                    break;\n            }\n\n            child.layout(x, y, x + childWidth, y + childHeight);\n        }\n    }\n\n    onMeasure(widthLimit: number, heightLimit: number, widthMode: MeasureMode, heightMode: MeasureMode): void\n    {\n        const children = this.host.widgetChildren;\n\n        let naturalWidth = 0;\n        let naturalHeight = 0;\n\n        const baseWidthMode = widthMode === MeasureMode.EXACTLY ? MeasureMode.AT_MOST : widthMode;\n        const baseHeightMode = heightMode === MeasureMode.EXACTLY ? MeasureMode.AT_MOST : heightMode;\n\n        let hasFillers = false;\n\n        // First pass: measure children and find our natural width/height. If we have a upper\n        // limit, then pass that on.\n        for (let i = 0, j = children.length; i < j; i++)\n        {\n            const widget = children[i];\n            const lopt = (widget.layoutOptions || LayoutOptions.DEFAULT) as AnchorLayoutOptions;\n\n            if (lopt.width === LayoutOptions.FILL_PARENT)\n            {\n                throw new Error('AnchorLayout does not support width = FILL_PARENT. Use anchorLeft = 0 & anchorRight = 0');\n            }\n            if (lopt.height === LayoutOptions.FILL_PARENT)\n            {\n                throw new Error('AnchorLayout does not support height = FILL_PARENT. Use anchorTop = 0 & anchorBottom = 0');\n            }\n\n            const anchorLeft = this.calculateAnchor(lopt.anchorLeft || 0, widthLimit, false);\n            const anchorTop = this.calculateAnchor(lopt.anchorTop || 0, heightLimit, false);\n            const anchorRight = this.calculateAnchor(lopt.anchorRight || 0, widthLimit, true);\n            const anchorBottom = this.calculateAnchor(lopt.anchorBottom || 0, heightLimit, true);\n\n            // Does child have a pre-determined width or height?\n            const widthConst = lopt.isWidthPredefined;\n            const heightConst = lopt.isHeightPredefined;\n            const widgetWidthLimit = widthConst ? lopt.width : anchorRight - anchorLeft;\n            const widgetHeightLimit = heightConst ? lopt.height : anchorBottom - anchorTop;\n\n            const widgetWidthMode = widthConst ? MeasureMode.EXACTLY : baseWidthMode;\n            const widgetHeightMode = heightConst ? MeasureMode.EXACTLY : baseHeightMode;\n\n            // Fillers need to be remeasured using EXACTLY.\n            hasFillers = hasFillers || lopt.width === 0 || lopt.height === 0;\n\n            widget.measure(widgetWidthLimit, widgetHeightLimit, widgetWidthMode, widgetHeightMode);\n\n            const horizontalReach = this.calculateReach(\n                lopt.anchorLeft || 0, lopt.anchorRight || 0, widget.getMeasuredWidth());\n            const verticalReach = this.calculateReach(\n                lopt.anchorTop || 0, lopt.anchorBottom || 0, widget.getMeasuredHeight());\n\n            naturalWidth = Math.max(naturalWidth, horizontalReach);\n            naturalHeight = Math.max(naturalHeight, verticalReach);\n        }\n\n        this.measuredWidth = Widget.resolveMeasuredDimen(naturalWidth, widthLimit, widthMode);\n        this.measuredHeight = Widget.resolveMeasuredDimen(naturalHeight, heightLimit, heightMode);\n\n        if (!hasFillers)\n        {\n            return;\n        }\n\n        // Handle fillers.\n        for (let i = 0, j = children.length; i < j; i++)\n        {\n            const widget = children[i];\n            const lopt = (widget.layoutOptions || LayoutOptions.DEFAULT) as AnchorLayoutOptions;\n\n            if (lopt.width === 0 || lopt.height === 0)\n            {\n                const anchorLeft = this.calculateAnchor(lopt.anchorLeft || 0, this.measuredWidth, false);\n                const anchorTop = this.calculateAnchor(lopt.anchorTop || 0, this.measuredHeight, false);\n                const anchorRight = this.calculateAnchor(lopt.anchorRight || 0, this.measuredWidth, true);\n                const anchorBottom = this.calculateAnchor(lopt.anchorBottom || 0, this.measuredHeight, true);\n\n                widget.measure(\n                    lopt.isWidthPredefined ? lopt.width : anchorRight - anchorLeft,\n                    lopt.isHeightPredefined ? lopt.height : anchorBottom - anchorTop,\n                    lopt.width === 0 || lopt.isWidthPredefined ? MeasureMode.EXACTLY : MeasureMode.AT_MOST,\n                    lopt.height === 0 || lopt.isHeightPredefined ? MeasureMode.EXACTLY : MeasureMode.AT_MOST,\n                );\n            }\n        }\n    }\n\n    getMeasuredWidth(): number\n    {\n        return this.measuredWidth;\n    }\n\n    getMeasuredHeight(): number\n    {\n        return this.measuredHeight;\n    }\n\n    /**\n     * Calculates the actual value of the anchor, given the parent's dimension.\n     *\n     * @param {number} anchor - anchor as given in layout options\n     * @param {number} limit - parent's dimension\n     * @param {boolean} limitSubtract - true for right/bottom anchors, false for left/top\n     */\n    protected calculateAnchor(anchor: number, limit: number, limitSubtract: boolean): number\n    {\n        const offset = Math.abs(anchor) < 1 ? anchor * limit : anchor;\n\n        return limitSubtract ? limit - offset : offset;\n    }\n\n    /**\n     * Calculates the \"reach\" of a child widget, which is the minimum dimension of\n     * the parent required to fully fit the child.\n     *\n     * @param {number} startAnchor - left or top anchor as given in layout options\n     * @param {number} endAnchor - right or bottom anchor as given in layout options\n     * @param {number} dimen - measured dimension of the widget (width or height)\n     */\n    protected calculateReach(startAnchor: number, endAnchor: number, dimen: number): number\n    {\n        if (Math.abs(startAnchor) < 1 && Math.abs(endAnchor) < 1)\n        {\n            return dimen / (1 - endAnchor - startAnchor);\n        }\n        else if (Math.abs(startAnchor) < 1)\n        {\n            return (endAnchor + dimen) / (1 - startAnchor);\n        }\n        else if (Math.abs(endAnchor) < 1)\n        {\n            return (startAnchor + dimen) / (1 - endAnchor);\n        }\n\n        return startAnchor + dimen + endAnchor;\n    }\n}\n","import { ALIGN } from './Align';\nimport { LayoutOptions } from './LayoutOptions';\n\ninterface IAnchorLayoutParams\n{\n    anchorLeft?: number;\n    anchorTop?: number;\n    anchorRight?: number;\n    anchorBottom?: number;\n    horizontalAlign?: ALIGN;\n    verticalAlign?: ALIGN;\n    width: number | string;\n    height: number | string;\n}\n\n/**\n * @memberof PUXI\n * @interface IAnchorLayoutParams\n * @property {number} anchorLeft - distance from parent's left inset to child's left edge\n * @property {number} anchorTop - distance from parent's top inset to child's top edge\n * @property {number} anchorRight - distance from parent's right inset to child's right edge\n * @property {number} anchorBottom - distance from parent's bottom insets to child's bottom edge\n * @property {PUXI.ALIGN} horizontalAlign - horizontal alignment of child in anchor region\n * @property {PUXI.ALIGN} verticalAlign - vertical alignment of child in anchor region\n * @property {number | string} width - requested width of widget (default is `WRAP_CONTENT`)\n * @property {number | string} height - requested height of widget (default is `WRAP_CONTENT`)\n */\n\n/**\n * Anchors the edge of a widget to defined offsets from the parent's insets.\n *\n * The following example will render a widget at (10px, 15%) with a width extending\n * to the parent's center and a height extending till 40px above the parent's bottom\n * inset.\n * ```js\n * new PUXI.AnchoredLayoutOptions({\n *      anchorLeft: 10,\n *      anchorTop: .15,\n *      anchorRight: .5,\n *      anchorBottom: 40\n * });\n * ```\n *\n * ### Intra-anchor region alignment\n *\n * You can specify how the widget should be aligned in the intra-anchor region using the\n * `horizontalAlign` and `verticalAlign` properties.\n *\n * ### Support for FILL_PARENT and percentage-of-parent dimensions\n *\n * Anchor layout does not support a width/height that is `LayoutOptions.FILL_PARENT`\n * or a percentage of the parent's width/height. Instead, you can define anchors that\n * result in the equivalent behaviour.\n *\n * @memberof PUXI\n * @extends PUXI.LayoutOptions\n * @class\n */\nexport class AnchorLayoutOptions extends LayoutOptions\n{\n    public anchorLeft: number;\n    public anchorTop: number;\n    public anchorRight: number;\n    public anchorBottom: number;\n\n    public horizontalAlign: ALIGN;\n    public verticalAlign: ALIGN;\n\n    constructor(options: IAnchorLayoutParams)\n    {\n        super(options.width, options.height);\n\n        this.anchorLeft = options.anchorLeft || 0;\n        this.anchorTop = options.anchorTop || 0;\n        this.anchorBottom = options.anchorBottom || 0;\n        this.anchorRight = options.anchorRight || 0;\n\n        this.horizontalAlign = options.horizontalAlign || ALIGN.LEFT;\n        this.verticalAlign = options.verticalAlign || ALIGN.CENTER;\n    }\n}\n","import { FocusableWidget, IFocusableOptions } from './FocusableWidget';\nimport { ClickManager } from './event/ClickManager';\nimport { InteractiveGroup } from './InteractiveGroup';\nimport { LayoutOptions, FastLayoutOptions } from './layout-options';\nimport { CheckGroup } from './ctl';\nimport { TextWidget } from './TextWidget';\n\ninterface ICheckBoxOptions extends IFocusableOptions\n{\n    checked?: boolean;\n    background: PIXI.Container;\n    checkmark?: PIXI.Container;\n    checkGroup?: CheckGroup;\n    value?: string;\n    tabIndex?: number;\n    tabGroup?: number;\n}\n\n/**\n * @memberof PUXI\n * @extends PUXI.IFocusableOptions\n * @member {boolean} checked\n * @member {PIXI.Container}[checkmark]\n * @member {PUXI.CheckGroup}[checkGroup]\n * @member {string}[value]\n */\n\n/**\n * A checkbox is a button can be selected (checked). It has a on/off state that\n * can be controlled by the user.\n *\n * When used in a checkbox group, the group will control whether the checkbox can\n * be selected or not.\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.FocusableWidget\n */\nexport class CheckBox extends FocusableWidget\n{\n    private _checked: boolean;\n    private _value: string;\n\n    private label: TextWidget;\n    private checkmark: InteractiveGroup;\n\n    checkGroup: CheckGroup;\n\n    /**\n     * @param {PUXI.ICheckBoxOptions} options\n     * @param [options.checked=false] {bool} is checked\n     * @param options.background {(PIXI.UI.SliceSprite|PIXI.UI.Sprite)} will be used as background for CheckBox\n     * @param options.checkmark {(PIXI.UI.SliceSprite|PIXI.UI.Sprite)} will be used as checkmark for CheckBox\n     * @param {PUXI.CheckGroup}[options.checkGroup=null] CheckGroup name\n     * @param options.value {String} mostly used along with checkgroup\n     * @param [options.tabIndex=0] {Number} input tab index\n     * @param [options.tabGroup=0] {Number|String} input tab group\n     */\n    constructor(options: ICheckBoxOptions)\n    {\n        super(options);\n        this._checked = options.checked !== undefined ? options.checked : false;\n        this._value = options.value || '';\n        this.checkGroup = options.checkGroup || null;\n\n        this.checkmark = new InteractiveGroup();\n        this.checkmark.contentContainer.addChild(options.checkmark);\n        this.checkmark.setLayoutOptions(\n            new FastLayoutOptions({\n                width: LayoutOptions.WRAP_CONTENT,\n                height: LayoutOptions.WRAP_CONTENT,\n                x: 0.5,\n                y: 0.5,\n                anchor: FastLayoutOptions.CENTER_ANCHOR,\n            }),\n        );\n        this.checkmark.alpha = this._checked ? 1 : 0;\n        this.addChild(this.checkmark);\n\n        this.contentContainer.buttonMode = true;\n    }\n\n    update(): void\n    {\n        // No need for updating\n    }\n\n    get checked(): boolean\n    {\n        return this._checked;\n    }\n    set checked(val: boolean)\n    {\n        if (val !== this._checked)\n        {\n            if (this.checkGroup !== null && val)\n            {\n                this.stage.checkBoxGroupController.notifyCheck(this);\n            }\n\n            this._checked = val;\n            this.change(val);\n        }\n    }\n\n    get value(): string\n    {\n        return this._value;\n    }\n    set value(val: string)\n    {\n        this._value = val;\n\n        if (this.checked)\n        {\n            this.stage.checkBoxGroupController.notifyCheck(this);\n        }\n    }\n\n    get selectedValue(): string\n    {\n        return this.stage\n            ?.checkBoxGroupController\n            .getSelected(this.checkGroup)\n            .value;\n    }\n\n    initialize(): void\n    {\n        super.initialize();\n\n        const clickMgr = (this.eventBroker.click as ClickManager);\n\n        clickMgr.onHover = (_, over): void =>\n        {\n            this.emit('hover', over);\n        };\n\n        clickMgr.onPress = (e, isPressed): void =>\n        {\n            if (isPressed)\n            {\n                this.focus();\n                e.data.originalEvent.preventDefault();\n            }\n\n            this.emit('press', isPressed);\n        };\n\n        clickMgr.onClick = (): void =>\n        {\n            this.click();\n        };\n\n        if (this.checkGroup !== null)\n        {\n            this.stage.checkBoxGroupController.in(this, this.checkGroup);\n        }\n    }\n\n    protected change = (val: boolean): void =>\n    {\n        if (this.checkmark)\n        {\n            this.checkmark.alpha = val ? 1 : 0;\n        }\n    };\n\n    protected click = (): void =>\n    {\n        this.emit('click');\n\n        if (this.checkGroup !== null && this.checked)\n        {\n            return;\n        }\n\n        this.checked = !this.checked;\n        this.emit('changed', this.checked);\n    };\n\n    /**\n     * This event is fired when the user's cursor hovers over this checkbox.\n     * @event hover\n     */\n\n    /**\n     * This event is fired when the user clicks on the checkbox, regardless of whether\n     * the checkbox was selected or deselected.\n     * @event click\n     */\n\n    /**\n     * This event is fired when the user selects/deselects the checkbox, i.e. the \"value\"\n     * of the checkbox changes. This is also fired when setting the `checked` property\n     * directly.\n     * @event changed\n     * @param {boolean} checked - whether the checkbox is checked\n     */\n}\n\n/*\n * Features:\n * checkbox, radio button (checkgroups)\n *\n * Methods:\n * blur()\n * focus()\n * change(checked) //only exposed to overwrite (if you dont want to hard toggle alpha of checkmark)\n *\n * Properties:\n * checked: get/set checkbox checked\n * value: get/set checkbox value\n * selectedValue: get/set selected value for checkgroup\n *\n * Events:\n * \"hover\"          param: [bool]isHover (hover/leave)\n * \"press\"          param: [bool]isPressed (pointerdown/pointerup)\n * \"click\"\n * \"blur\"\n * \"focus\"\n * \"focusChanged\"   param: [bool]isFocussed\n * \"change\"         param: [bool]isChecked\n *\n */\n","import { IButtonOptions, Button } from './Button';\nimport { ImageWidget } from './Sprite';\nimport { Texture } from 'pixi.js';\nimport { LinearLayout } from './layout-manager';\n\nexport interface IImageButtonOptions extends IButtonOptions\n{\n    icon: string | Texture | ImageWidget;\n}\n\nexport class ImageButton extends Button\n{\n    iconWidget: ImageWidget;\n\n    constructor(options: IImageButtonOptions)\n    {\n        super(options);\n\n        if (!(options.icon instanceof ImageWidget))\n        {\n            const texture = options.icon instanceof Texture ? options.icon\n                : Texture.from(options.icon);\n\n            options.icon = new ImageWidget(texture);\n        }\n\n        this.textWidget.setLayoutOptions(null);// a little redundant maybe?\n        this.iconWidget = options.icon;\n\n        this.removeChild(this.textWidget);\n        this.addChild(this.iconWidget);\n        this.addChild(this.textWidget);\n\n        this.useLayout(new LinearLayout('vertical'));\n    }\n}\n","import { Widget } from './Widget';\nimport * as PIXI from 'pixi.js';\n\n/**\n * A sliced sprite with dynamic width and height.\n *\n * @class\n * @memberof PUXI\n * @param Texture {PIXI.Texture} the texture for this SliceSprite\n * @param BorderWidth {Number} Width of the sprite borders\n * @param horizontalSlice {Boolean} Slice the sprite horizontically\n * @param verticalSlice {Boolean} Slice the sprite vertically\n * @param [tile=false] {Boolean} tile or streach\n */\nexport class SliceSprite extends Widget\n{\n    ftl: PIXI.Rectangle;\n    ftr: PIXI.Rectangle;\n\n    fbl: PIXI.Rectangle;\n    fbr: PIXI.Rectangle;\n\n    ft: PIXI.Rectangle;\n    fb: PIXI.Rectangle;\n    fr: PIXI.Rectangle;\n    fl: PIXI.Rectangle;\n    ff: PIXI.Rectangle;\n\n    stl: PIXI.Sprite;\n    str: PIXI.Sprite;\n    sbl: PIXI.Sprite;\n    sbr: PIXI.Sprite;\n\n    st: PIXI.Sprite;\n    sb: PIXI.Sprite;\n    sl: PIXI.Sprite;\n    sr: PIXI.Sprite;\n\n    sf: PIXI.Sprite;\n\n    bw: number;\n    vs: boolean;\n    hs: boolean;\n    t: PIXI.BaseTexture;\n    f: PIXI.Rectangle;\n\n    tile: any;\n\n    constructor(texture: PIXI.Texture, borderWidth, horizontalSlice, verticalSlice, tile)\n    {\n        super(texture.width, texture.height);\n\n        this.bw = borderWidth || 5;\n        this.vs = typeof verticalSlice !== 'undefined' ? verticalSlice : true;\n        this.hs = typeof horizontalSlice !== 'undefined' ? horizontalSlice : true;\n        this.t = texture.baseTexture;\n        this.f = texture.frame;\n        this.tile = tile;\n\n        if (this.hs)\n        {\n            this.setting.minWidth = borderWidth * 2;\n        }\n        if (this.vs)\n        {\n            this.setting.minHeight = borderWidth * 2;\n        }\n\n        /**\n     * Updates the sliced sprites position and size\n     *\n     * @private\n     */\n        this.update = function ()\n        {\n            if (!this.initialized) return;\n            if (vs && hs)\n            {\n                str.x = sbr.x = sr.x = this._width - bw;\n                sbl.y = sbr.y = sb.y = this._height - bw;\n                sf.width = st.width = sb.width = this._width - bw * 2;\n                sf.height = sl.height = sr.height = this._height - bw * 2;\n            }\n            else if (hs)\n            {\n                sr.x = this._width - bw;\n                sl.height = sr.height = sf.height = this._height;\n                sf.width = this._width - bw * 2;\n            }\n            else\n            { // vs\n                sb.y = this._height - bw;\n                st.width = sb.width = sf.width = this._width;\n                sf.height = this._height - bw * 2;\n            }\n\n            if (this.tint !== null)\n            {\n                sf.tint = this.tint;\n                if (vs && hs) stl.tint = str.tint = sbl.tint = sbr.tint = this.tint;\n                if (hs) sl.tint = sr.tint = this.tint;\n                if (vs) st.tint = sb.tint = this.tint;\n            }\n\n            if (this.blendMode !== null)\n            {\n                sf.blendMode = this.blendMode;\n                if (vs && hs) stl.blendMode = str.blendMode = sbl.blendMode = sbr.blendMode = this.blendMode;\n                if (hs) sl.blendMode = sr.blendMode = this.blendMode;\n                if (vs) st.blendMode = sb.blendMode = this.blendMode;\n            }\n        };\n    }\n\n    initialize()\n    {\n        super.initialize();\n        const { f, bw } = this;\n\n        // get frames\n        if (this.vs && this.hs)\n        {\n            this.ftl = new PIXI.Rectangle(f.x, f.y, bw, bw);\n            this.ftr = new PIXI.Rectangle(f.x + f.width - bw, f.y, bw, bw);\n            this.fbl = new PIXI.Rectangle(f.x, f.y + f.height - bw, bw, bw);\n            this.fbr = new PIXI.Rectangle(f.x + f.width - bw, f.y + f.height - bw, bw, bw);\n            this.ft = new PIXI.Rectangle(f.x + bw, f.y, f.width - bw * 2, bw);\n            this.fb = new PIXI.Rectangle(f.x + bw, f.y + f.height - bw, f.width - bw * 2, bw);\n            this.fl = new PIXI.Rectangle(f.x, f.y + bw, bw, f.height - bw * 2);\n            this.fr = new PIXI.Rectangle(f.x + f.width - bw, f.y + bw, bw, f.height - bw * 2);\n            this.ff = new PIXI.Rectangle(f.x + bw, f.y + bw, f.width - bw * 2, f.height - bw * 2);\n        }\n        else if (this.hs)\n        {\n            this.fl = new PIXI.Rectangle(this.f.x, f.y, bw, f.height);\n            this.fr = new PIXI.Rectangle(f.x + f.width - bw, f.y, bw, f.height);\n            this.ff = new PIXI.Rectangle(f.x + bw, f.y, f.width - bw * 2, f.height);\n        }\n        else\n        { // vs\n            this.ft = new PIXI.Rectangle(f.x, f.y, f.width, bw);\n            this.fb = new PIXI.Rectangle(f.x, f.y + f.height - bw, f.width, bw);\n            this.ff = new PIXI.Rectangle(f.x, f.y + bw, f.width, f.height - bw * 2);\n        }\n\n        // TODO: swap frames if rotation\n\n        const { t, ff, fl, fr, ft, fb } = this;\n\n        // make sprites\n        this.sf = this.tile\n            ? new PIXI.TilingSprite(new PIXI.Texture(t, ff))\n            : new PIXI.Sprite(new PIXI.Texture(t, ff));\n        this.contentContainer.addChildAt(this.sf, 0);\n\n        if (this.vs && this.hs)\n        {\n            this.stl = new PIXI.Sprite(new PIXI.Texture(t, this.ftl));\n            this.str = new PIXI.Sprite(new PIXI.Texture(t, this.ftr));\n            this.sbl = new PIXI.Sprite(new PIXI.Texture(t, this.fbl));\n            this.sbr = new PIXI.Sprite(new PIXI.Texture(t, this.fbr));\n            this.contentContainer.addChildAt(this.stl, 0);\n            this.contentContainer.addChildAt(this.str, 0);\n            this.contentContainer.addChildAt(this.sbl, 0);\n            this.contentContainer.addChildAt(this.sbr, 0);\n        }\n        if (hs)\n        {\n            this.sl = this.tile\n                ? new PIXI.TilingSprite(new PIXI.Texture(t, fl))\n                : new PIXI.Sprite(new PIXI.Texture(t, fl));\n            this.sr = this.tile\n                ? new PIXI.TilingSprite(new PIXI.Texture(t, fr))\n                : new PIXI.Sprite(new PIXI.Texture(t, fr));\n\n            this.contentContainer.addChildAt(this.sl, 0);\n            this.contentContainer.addChildAt(this.sr, 0);\n        }\n        if (this.vs)\n        {\n            this.st = this.tile\n                ? new PIXI.TilingSprite(new PIXI.Texture(t, ft))\n                : new PIXI.Sprite(new PIXI.Texture(t, ft));\n            this.sb = this.tile\n                ? new PIXI.TilingSprite(new PIXI.Texture(t, fb))\n                : new PIXI.Sprite(new PIXI.Texture(t, fb));\n            this.contentContainer.addChildAt(this.st, 0);\n            this.contentContainer.addChildAt(this.sb, 0);\n        }\n\n        // set constant position and sizes\n        if (this.vs && this.hs)\n        {\n            this.st.x = bw;\n            this.sb.x = bw;\n            this.sl.y = bw;\n            this.sr.y = bw;\n            this.stl.width = bw;\n            this.str.width = bw;\n            this.sbl.width = bw;\n            this.sbr.width = bw;\n            this.stl.height = bw;\n            this.str.height = bw;\n            this.sbl.height = bw;\n            this.sbr.height = bw;\n        }\n\n        if (this.hs)\n        {\n            this.sf.x = this.sl.width = this.sr.width = bw;\n        }\n        if (this.vs)\n        {\n            this.sf.y = this.st.height = this.sb.height = bw;\n        }\n    }\n\n    update(): void\n    {\n        // NO updates\n    }\n}\n\n","import { InteractiveGroup } from './InteractiveGroup';\nimport { Tween } from './Tween';\nimport { EaseBase } from './Ease/EaseBase';\nimport { Widget } from './Widget';\n\n/**\n * An UI Container object\n *\n * @memberof PUXI\n * @class\n * @extends PUXI.Widget\n * @param desc {Boolean} Sort the list descending\n * @param tweenTime {Number} if above 0 the sort will be animated\n * @param tweenEase {PIXI.UI.Ease} ease method used for animation\n */\nexport class SortableList extends InteractiveGroup\n{\n    desc: boolean;\n    tweenTime: number;\n    tweenEase: EaseBase;\n    items: any[];\n\n    _sortTimeout: NodeJS.Timeout;\n\n    constructor(desc, tweenTime, tweenEase)\n    {\n        super(0, 0);\n\n        this.desc = typeof desc !== 'undefined' ? desc : false;\n        this.tweenTime = tweenTime || 0;\n        this.tweenEase = tweenEase;\n        this.items = [];\n    }\n\n    addChild(UIObject: any, fnValue?, fnThenBy?): void\n    {\n        super.addChild(UIObject);\n\n        if (this.items.indexOf(UIObject) === -1)\n        {\n            this.items.push(UIObject);\n        }\n\n        if (typeof fnValue === 'function')\n        {\n            UIObject._sortListValue = fnValue;\n        }\n\n        if (typeof fnThenBy === 'function')\n        {\n            UIObject._sortListThenByValue = fnThenBy;\n        }\n\n        if (!UIObject._sortListRnd)\n        {\n            UIObject._sortListRnd = Math.random();\n        }\n\n        this.sort();\n    }\n\n    removeChild(UIObject): void\n    {\n        if (arguments.length > 1)\n        {\n            for (let i = 0; i < arguments.length; i++)\n            {\n                this.removeChild(arguments[i]);\n            }\n        }\n        else\n        {\n            super.removeChild(UIObject);\n            const index = this.items.indexOf(UIObject);\n\n            if (index !== -1)\n            {\n                this.items.splice(index, 1);\n            }\n\n            this.sort();\n        }\n    }\n\n    sort(instant = false): void\n    {\n        clearTimeout(this._sortTimeout);\n\n        if (instant)\n        {\n            this._sort();\n\n            return;\n        }\n\n        this._sortTimeout = setTimeout(() => { this._sort(); }, 0);\n    }\n\n    _sort()\n    {\n        const desc = this.desc;\n        let y = 0;\n        let alt = true;\n\n        this.items.sort(function (a, b)\n        {\n            let res = a._sortListValue() < b._sortListValue() ? desc ? 1 : -1\n                : a._sortListValue() > b._sortListValue() ? desc ? -1 : 1 : 0;\n\n            if (res === 0 && a._sortListThenByValue && b._sortListThenByValue)\n            {\n                res = a._sortListThenByValue() < b._sortListThenByValue() ? desc ? 1 : -1\n                    : a._sortListThenByValue() > b._sortListThenByValue() ? desc ? -1 : 1 : 0;\n            }\n            if (res === 0)\n            {\n                res = a._sortListRnd > b._sortListRnd ? 1\n                    : a._sortListRnd < b._sortListRnd ? -1 : 0;\n            }\n\n            return res;\n        });\n\n        for (let i = 0; i < this.items.length; i++)\n        {\n            const item = this.items[i];\n\n            alt = !alt;\n\n            if (this.tweenTime > 0)\n            {\n                Tween.fromTo(item, this.tweenTime, { x: item.x, y: item.y }, { x: 0, y }, this.tweenEase);\n            }\n            else\n            {\n                item.x = 0;\n                item.y = y;\n            }\n            y += item.height;\n            if (typeof item.altering === 'function')\n            { item.altering(alt); }\n        }\n\n        // force it to update parents when sort animation is done (prevent scrolling container bug)\n        if (this.tweenTime > 0)\n        {\n            setTimeout(() =>\n            {\n                this.updatesettings(false, true);\n            }, this.tweenTime * 1000);\n        }\n    }\n}\n\n","import * as PIXI from 'pixi.js';\nimport { Widget } from './Widget';\n\n/**\n * An UI sprite object\n *\n * @class\n * @extends PIXI.UI.UIBase\n * @memberof PIXI.UI\n * @param Texture {PIXI.Texture} The texture for the sprite\n * @param [Width=Texture.width] {number} Width of tilingsprite\n * @param [Height=Texture.height] {number} Height of tiling sprite\n */\nexport class TilingSprite extends Widget\n{\n    protected sprite: PIXI.extras.TilingSprite;\n\n    constructor(t, width: number, height: number)\n    {\n        const sprite = new PIXI.extras.TilingSprite(t);\n\n        super(width || sprite.width, height || sprite.height);\n\n        this.sprite = sprite;\n        this.contentContainer.addChild(this.sprite);\n    }\n\n    /**\n     * Updates the text\n     *\n     * @private\n     */\n    update(): void\n    {\n        if (this.tint !== null)\n        { this.sprite.tint = this.tint; }\n\n        if (this.blendMode !== null)\n        { this.sprite.blendMode = this.blendMode; }\n\n        this.sprite.width = this._width;\n        this.sprite.height = this._height;\n    }\n\n    get tilePosition(): any\n    {\n        return this.sprite.tilePosition;\n    }\n    set tilingPosition(val: any)\n    {\n        this.sprite.tilePosition = val;\n    }\n\n    get tileScale(): number\n    {\n        return this.sprite.tileScale;\n    }\n    set tileScale(val: number)\n    {\n        this.sprite.tileScale = val;\n    }\n}\n"],"names":["_items","DragDropController","add","item","event","_dragDropEventId","data","identifier","indexOf","push","[object Object]","object","index","i","length","splice","group","id","dragGroup","Insets","this","reset","dirtyId","left","top","right","bottom","MeasureMode","EventManager","target","isEnabled","ClickManager","includeHover","rightMouseButton","doubleClick","super","_includeHover","_rightMouseButton","_doubleClick","insetContainer","on","evMouseDown","onMouseDownImpl","onMouseOverImpl","onMouseOutImpl","bound","removeListener","evMouseUp","onMouseUpImpl","evMouseUpOutside","onMouseUpOutsideImpl","onMouseMoveImpl","obj","_onMouseUp","_onMouseUpOutside","mouse","copyFrom","global","onPress","call","now","performance","time","onClick","originalEvent","preventDefault","offset","set","x","y","onMouseUpCommonImpl","dragThreshold","movementX","Math","abs","movementY","max","ishover","onHover","onMove","PIXI.Point","interactive","startEvent","val","DragManager","e","isBound","dragStart","stage","onDragMoveImpl","onDragEndImpl","lastCursor","dragOffset","isDragging","dragRestrictAxis","cancel","onDragStart","onDragMove","onDragEnd","onDragStartImpl","EventBroker","mgr","Object","keys","MANAGER_MAP","defineProperty","click","dnd","ScrollManager","delta","deltaX","deltaY","axis","detail","onMouseScroll","onMouseScrollImpl","document","addEventListener","removeEventListener","onHoverImpl","contentContainer","PADDING_PROPERTIES","PADDING_AXIS_PROPERTIES","TEXT_STYLE_PROPERTIES","Widget","PIXI.utils","EventEmitter","PIXI.Container","addChild","widgetChildren","layoutMeasure","initialized","dragInitialized","dropInitialized","dirty","_oldWidth","_oldHeight","pixelPerfect","_paddingLeft","_paddingTop","_paddingRight","_paddingBottom","_elevation","tint","blendMode","PIXI.BLEND_MODES","NORMAL","draggable","droppable","singleClickTimeout","style","styleID","onPointerPress","onPointerMove","onPointerRelease","onPointerEnter","onPointerExit","onRightClick","_layoutDirty","console","log","setTimeout","measureAndLayout","dirtyID","onStyleChange","measuredWidth","_measuredWidth","measuredHeight","_measuredHeight","width","height","widthMode","heightMode","naturalWidth","paddingHorizontal","naturalHeight","paddingVertical","EXACTLY","UNBOUNDED","AT_MOST","min","onMeasure","l","t","r","b","_width","_height","background","onLayout","lopt","layoutOptions","styleData","getProperties","setBackground","backgroundColor","elevation","setElevation","forEach","propName","padding","onHoverChange","clearTimeout","onDoubleClick","CLICK_DELAY","hover","contextMenu","contextPopup","getLocalPosition","eventBroker","_eventBroker","paddingLeft","paddingTop","paddingRight","paddingBottom","contentWidth","contentHeight","alpha","bg","removeChild","string2hex","PIXI.Graphics","beginFill","drawRect","endFill","addChildAt","_dropShadow","filters","menu","DropShadowFilter","distance","widgets","widget","parent","initDraggable","stopEvent","initDroppable","realPosition","dragPosition","added","position","emit","getItem","onDrop","container","getEventItem","dropGroup","droppableReparent","self","toLocal","content","natural","limit","mode","ALIGN","LayoutOptions","WRAP_CONTENT","setWidth","setHeight","cache","parseDimen","isWidthPredefined","MAX_DIMEN","isHeightPredefined","marginLeft","_marginLeft","marginTop","_marginTop","marginRight","_marginRight","marginBottom","_marginBottom","endsWith","parseFloat","replace","isNaN","Error","FastLayoutOptions","options","anchor","DEFAULT_ANCHOR","clone","BorderLayoutOptions","region","REGION_CENTER","horizontalAlign","LEFT","verticalAlign","TOP","FastLayout","host","children","j","DEFAULT","getMeasuredWidth","getMeasuredHeight","layout","maxWidth","maxHeight","loptWidth","loptHeight","widthMeasureMode","getChildMeasureMode","heightMeasureMode","measure","measureWidthReach","measureHeightReach","measureChildFillers","dimen","parentMeasureMode","parentWidthLimit","childWidth","minr","parentHeightLimit","childHeight","minb","FILL_PARENT","WidgetGroup","layoutMgr","onDetach","onAttach","useLayout","useDefaultLayout","InteractiveGroup","hitArea","PIXI.Rectangle","update","FocusableWidget","onDocumentPointerDownImpl","onKeyDownImpl","off","focusCtl","focusController","which","useTab","onTab","useBack","onBack","useForward","onForward","_isMousePressed","blur","_isFocused","tabIndex","tabGroup","focus","isFocused","notifyFocus","bindEvents","notifyBlur","clearEvents","initialize","in","TextWidget","text","textStyle","textDisplay","PIXI.Text","value","undefined","Button","isHover","PIXI.TextStyle","textWidget","setLayoutOptions","CENTER_ANCHOR","buttonMode","interactiveChildren","EaseBase","p","ExponentialEase","power","easeIn","easeOut","pow","getPosition","prototype","create","constructor","Ease","HALF_PI","PI","fn","Linear","wrapEase","easeInFunction","easeOutFunction","easeInOutFunction","easeInOut","Power0","easeNone","Power1","Quad","Power2","Cubic","Power3","Quart","Power4","Quint","Bounce","BounceIn","BounceOut","BounceInOut","invert","Circ","CircIn","sqrt","CircOut","CircInOut","Expo","ExpoIn","ExpoOut","ExpoInOut","Sine","SineIn","cos","SineOut","sin","SineInOut","Helpers","Lerp","start","stop","amt","number","decimals","round","c","hex","toString","g","componentToHex","rgbToNumber","numberToRgb","floor","m","result","exec","parseInt","Sprite","texture","spriteDisplay","PIXI.Sprite","imageUrl","PIXI.Texture","PIXI.BaseTexture","ImageWidget","REGION_LEFT","REGION_TOP","REGION_RIGHT","REGION_BOTTOM","BorderLayout","leftWidgets","topWidgets","rightWidgets","bottomWidgets","centerWidgets","clearMeasureCache","clearRegions","layoutChildren","measuredTopHeight","measuredLeftWidth","measuredCenterHeight","measuredRightWidth","measuredBottomHeight","measuredCenterWidth","regionX","regionY","regionWidth","regionHeight","CENTER","RIGHT","BOTTOM","indexRegions","childWidthMode","childHeightMode","tw","th","thmin","measureChildren","bw","bh","bhmin","cw","ch","cwmin","chmin","lw","lwmin","rw","rwmin","middleRowWidth","netWidth","netHeight","hmin","downscale","wmin","fitChildren","list","widthFixedLowerBound","heightFixedLowerBound","w","h","wmd","hmd","measuredRegionWidth","measuredRegionHeight","wm","hm","LinearLayout","orientation","gravity","breadth","u","v","widthLimit","heightLimit","baseWidthMode","baseHeightMode","widgetWidthLimit","widgetHeightLimit","widgetWidthMode","widgetHeightMode","Slider","percentValue","_disabled","fill","_minValue","minValue","_maxValue","maxValue","HORIZONTAL","onValueChange","onValueChanging","track","fromContent","DEFAULT_HORIZONTAL_TRACK","DEFAULT_VERTICAL_TRACK","handle","DEFAULT_HANDLE","_localCursor","trackSize","startValue","triggerValueChange","_lastChange","triggerValueChanging","_lastChanging","updatePositionToMouse","mousePosition","soft","getValueAtPhysicalPosition","layoutHandle","handleDrag","stopPropagation","trackDrag","isPressed","Round","disabled","cursor","localCursor","range","handleWidth","handleHeight","handleX","handleY","VERTICAL","lineStyle","moveTo","lineTo","drawCircle","_tweenItemCache","_callbackItemCache","_tweenObjects","_activeTweenObjects","_currentId","TweenObject","tweens","active","onUpdate","CallbackItem","_ready","key","callback","currentTime","_tweenObjectId","_currentCallbackID","remove","TweenItem","from","to","ease","isColor","surfix","getSurfix","hexToRgb","currentColor","getToValue","widthKeys","heightKeys","getFromValue","getObject","getTweenItem","tween","getCallbackItem","cb","Tween","params","match","paramsFrom","paramsTo","ScrollBar","DEFAULT_TRACK","scrollingContainer","autohide","_hidden","forcePctPosition","setScrollPosition","hidden","ScrollWidget","direction","pct","bounds","getInnerBounds","innerContainer","scrollX","scrollY","scrollPosition","targetPosition","pos","dif","lastPosition","updateScrollBars","velocity","scrollVelocity","animating","PIXI.Ticker","shared","updateScrollPosition","updateDirection","scrolling","softness","exp","mask","innerBounds","dragScrolling","radius","expandMask","overflowY","overflowX","scrollBars","horizontalScrollBar","setBackgroundAlpha","verticalScrollBar","boundCached","lastWidth","lastHeight","of","clear","drawRoundedRect","scrollBar","newChildren","getPercentPosition","force","getLocalBounds","initScrolling","drag","_","scrollSpeed","Controller","Stage","__width","__height","minWidth","minHeight","resize","_checkBoxGroupCtl","CHECK_BOX_GROUP_CONTROLLER","_focusCtl","FOCUS_CONTROLLER","renderer","render","UIObject","argumentLenght","arguments","checkBoxGroupController","checkGroups","Map","checkGroup","get","initGroup","checks","checked","selected","cgroup","tabGroups","sort","a","lastItem","currentItem","Style","propertyName","superStyles","extends","superIndex","thisValue","computedData","superStyle","computedDirty","prop","compute","props","onParentSetProperty","assign","StyleSheet","sheetData","sheet","mockDOMInput","Ticker","autoStart","_now","DeltaTime","Time","Ms","_update","requestAnimationFrame","context","once","parentWidth","parentHeight","child","anchorLeft","calculateAnchor","anchorTop","anchorRight","anchorBottom","MIDDLE","hasFillers","widthConst","heightConst","horizontalReach","calculateReach","verticalReach","resolveMeasuredDimen","limitSubtract","startAnchor","endAnchor","checkmark","_checked","_value","notifyCheck","change","selectedValue","getSelected","clickMgr","over","icon","Texture","iconWidget","borderWidth","horizontalSlice","verticalSlice","tile","vs","hs","baseTexture","f","frame","setting","str","sbr","sr","sbl","sb","sf","st","sl","stl","ftl","ftr","fbl","fbr","ft","fb","fl","fr","ff","PIXI.TilingSprite","desc","tweenTime","tweenEase","items","fnValue","fnThenBy","_sortListValue","_sortListThenByValue","_sortListRnd","random","instant","_sortTimeout","_sort","alt","res","fromTo","altering","updatesettings","ctrlKey","cmdKey","ctrlDown","shiftKey","shiftDown","defaultPrevented","insertTextAtCaret","select","_lastValue","valueEvent","setCaretIndex","deleteSelection","caret","_index","chars","_atEnd","slice","multiLine","vrdd","hasSelection","de","textHeightPX","lineHeight","updateClosestIndex","si","ei","sie","eie","_down","selectRange","selectionStart","selectionEnd","ds","rdd","_forward","startindex","endIndex","_i","selectIndex","clipboardData","window","setData","copyEvent","getData","worldTransform","tx","ty","setAttribute","cacheAsBitmap","inputBlurEvent","onKeyDown","keyUpEvent","pasteEvent","cutEvent","inputEvent","visible","selection","hideCaret","clearSelection","resetScrollPosition","wrapped","lineIndex","textHeight","scrollToPosition","showCaret","wordIndex","startIndex","end","updateSelectionGraphics","updateSelectionColors","c1","cx","cy","cl","drawSelectionRect","selectedBackgroundColor","createElement","body","appendChild","_dirtyText","maxLength","color","selectedColor","tempText","destroy","_startIndex","_endIndex","caretWidth","textContainer","setPadding","_useNext","_usePrev","sp","_sp","cc","textLengthPX","lineIndexMax","setupDrag","mouseDown","timeSinceLast","selectWord","_lastWidth","updateText","whitespace","newline","lastWordIndex","wrap","charText","scale","point","currentDistX","currentIndex","atEnd","closestLineIndex","char","distX","focusPosition","clearInterval","caretInterval","setInterval","sprite","PIXI.extras","TilingSprite","tilePosition","tilingPosition","tileScale"],"mappings":"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"}